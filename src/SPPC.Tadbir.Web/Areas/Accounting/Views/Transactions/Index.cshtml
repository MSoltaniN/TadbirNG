@using System.Globalization
@using Microsoft.Practices.Unity
@using SPPC.Tadbir.Security
@using SPPC.Tadbir.Service
@using SPPC.Tadbir.Web.AppStart
@using SPPC.Framework.Extensions
@using SPPC.Framework.Values
@using SPPC.Tadbir.Values
@using SPPC.Tadbir.ViewModel.Finance
@using PagedList.Mvc

@model PagedList.IPagedList<TransactionViewModel>

@{
    string createTitle = String.Format(LocalStrings.CreateNewEntity, Entities.Transaction);
    string title = String.Format(LocalStrings.IndexTitle, Entities.Transactions);
    ViewBag.Title = title;
    string pageInfo = String.Format(LocalStrings.NoRecords, Entities.ATransaction);
    if (Model.Count > 0)
    {
        pageInfo = String.Format(
            LocalStrings.CurrentPageInfo,
            Model.TotalItemCount, Entities.Transaction, Model.PageNumber, Model.PageCount);
    }

    var persianCulture = new CultureInfo("fa-IR");
    persianCulture.NumberFormat.CurrencySymbol = String.Empty;

    var contextManager = UnityConfig
        .GetConfiguredContainer()
        .Resolve<ISecurityContextManager>();
    var currentContext = contextManager.CurrentContext;
    int itemCount = Model.Count;
}

<ol class="breadcrumb">
    <li>@Html.ActionLink(LocalStrings.HomePage, "index", "home", new { area = "" }, null)</li>
    <li class="active">@title</li>
</ol>

<div class="page-header">
    <h3>@title</h3>
</div>

@using (Html.BeginForm("index", "transactions", FormMethod.Post, new { name = "selectForm" }))
{
    @Html.AntiForgeryToken()

    if (currentContext.HasPermissions(Permissions.Transaction.Create))
    {
        <p>
            @Html.ActionLink(createTitle, "create", "transactions", new { }, new { @class = "btn btn-sm btn-primary" })
            <span class="pull-left">@pageInfo</span>
        </p>
    }

    <table class="table table-bordered table-striped table-responsive table-hover">
        <thead>
            <tr>
                <th></th>
                <th>@FieldNames.NumberField</th>
                <th>@FieldNames.DateField</th>
                <th>@FieldNames.DescriptionField</th>
                <th>@FieldNames.StatusField</th>
                <th>@FieldNames.OperationalStatusField</th>
                <th>@FieldNames.DebitSumField</th>
                <th>@FieldNames.CreditSumField</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < itemCount; i++)
            {
                var item = Model[i];
                string debit = item.DebitSum.ToString("C0", persianCulture);
                string credit = item.CreditSum.ToString("C0", persianCulture);
                string status = TransactionStatus.ToLocalValue(item.Document.StatusName);
                string opStatus = DocumentStatusName.ToLocalValue(item.Document.OperationalStatus);
                @Html.HiddenFor(modelItem => Model[i].Id);
                <tr>
                    <td>
                        <input type="checkbox" name="@String.Format("[{0}].IsSelected", i)" />
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.No)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Date)
                    </td>
                    <td title="@item.Description">
                        @item.Description.AutoEllipsis(50)
                    </td>
                    <td>
                        @status
                    </td>
                    <td>
                        @opStatus
                    </td>
                    <td>
                        @debit
                    </td>
                    <td>
                        @credit
                    </td>
                    <td>
                        @if (currentContext.HasPermissions(Permissions.Transaction.Edit))
                        {
                            @Html.ActionLink(LocalStrings.Edit, "edit", new { id = item.Id })<span> | </span>
                        }
                        @Html.ActionLink(LocalStrings.Details, "details", new { id = item.Id })
                        @if (currentContext.HasPermissions(Permissions.Transaction.Delete))
                        {
                            <span> | </span>@Html.ActionLink(LocalStrings.Delete, "delete", new { id = item.Id })
                        }
                        @if (item.Document.OperationalStatus == DocumentStatusName.Created && currentContext.HasPermissions(Permissions.Transaction.Prepare))
                        {
                            <span> | </span>@Html.ActionLink(DocumentActionName.ToLocalValue(DocumentActionName.Prepare), "prepare", new { id = item.Id }, new { id = String.Format("prepare-action{0}", item.Id) })
                        }
                        @if (item.WorkItemId > 0 && currentContext.IsInRole(item.WorkItemTargetId) && item.WorkItemAction == DocumentActionName.Review)
                        {
                            <span> | </span>@Html.ActionLink(DocumentActionName.ToLocalValue(DocumentActionName.Review), "review", new { id = item.Id }, new { id = String.Format("review-action{0}", item.Id) })
                        }
                        @if (item.WorkItemId > 0 && currentContext.IsInRole(item.WorkItemTargetId) && item.WorkItemAction == DocumentActionName.Confirm)
                        {
                            <span> | </span>@Html.ActionLink(DocumentActionName.ToLocalValue(DocumentActionName.Confirm), "confirm", new { id = item.Id }, new { id = String.Format("confirm-action{0}", item.Id) })
                            <span> | </span>@Html.ActionLink(DocumentActionName.ToLocalValue(DocumentActionName.Reject), "reject", new { id = item.Id }, new { id = String.Format("reject-action{0}", item.Id) })
                        }
                        @if (item.WorkItemId > 0 && currentContext.IsInRole(item.WorkItemTargetId) && item.WorkItemAction == DocumentActionName.Approve)
                        {
                            <span> | </span>@Html.ActionLink(DocumentActionName.ToLocalValue(DocumentActionName.Approve), "approve", new { id = item.Id }, new { id = String.Format("approve-action{0}", item.Id) })
                        }
                    </td>
                </tr>
            }
            <tr>
                <td colspan="6">@Strings.Total</td>
                <td>@Model.Sum(item => item.DebitSum).ToString("C0", persianCulture)</td>
                <td>@Model.Sum(item => item.CreditSum).ToString("C0", persianCulture)</td>
            </tr>
        </tbody>
    </table>

    <div class="pull-left">
        <input type="hidden" id="paraph" name="paraph" value="" />
        @if (currentContext.HasPermissions(Permissions.Transaction.Prepare))
        {
            <input type="submit" class="btn btn-primary" name="submit-prepare" value="@Strings.GroupPrepare" />
        }
        @if (currentContext.HasPermissions(Permissions.Transaction.Review))
        {
            <input type="submit" class="btn btn-primary" name="submit-review" value="@Strings.GroupReview" />
        }
        @if (currentContext.HasPermissions(Permissions.Transaction.Confirm))
        {
            <input type="submit" class="btn btn-primary" name="submit-reject" value="@Strings.GroupReject" />
            <input type="submit" class="btn btn-primary" name="submit-confirm" value="@Strings.GroupConfirm" />
        }
        @if (currentContext.HasPermissions(Permissions.Transaction.Approve))
        {
            <input type="submit" class="btn btn-primary" name="submit-approve" value="@Strings.GroupApprove" />
        }
    </div>

    @Html.PagedListPager(Model, page => Url.Action("index", new { page = page }), PagedListRenderOptions.ClassicPlusFirstAndLast)

    if (currentContext.HasPermissions(Permissions.Transaction.Create))
    {
        <p>
            @Html.ActionLink(createTitle, "create", "transactions", new { }, new { @class = "btn btn-sm btn-primary" })
        </p>
    }
}

@section scripts {
    @Scripts.Render("~/bundles/site")
}
