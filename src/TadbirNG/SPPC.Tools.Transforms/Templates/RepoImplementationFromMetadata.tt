<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SPPC.Framework.Extensions" #>
<#@ import namespace="SPPC.Tools.Model" #>
<#
var entityInfo = _model;
var entity = entityInfo.Entity;
var plural = entity.Name.ToPlural();
var camelCase = entity.Name.CamelCase();
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using SPPC.Framework.Common;
using SPPC.Framework.Presentation;
using SPPC.Tadbir.Domain;
using SPPC.Tadbir.Model.<#= entity.Area #>;
using SPPC.Tadbir.Utility;
<# if(entity.Area != "Auth")
{ #>
using SPPC.Tadbir.ViewModel.<#= entity.Area #>;
<# } #>

namespace SPPC.Tadbir.Persistence
{
    /// <summary>
    /// عملیات مورد نیاز برای مدیریت <#= entityInfo.PluralName #> را پیاده سازی می کند
    /// </summary>
    public class <#= entity.Name #>Repository : EntityLoggingRepository<<#= entity.Name #>, <#= entity.Name #>ViewModel>, I<#= entity.Name #>Repository
    {
        /// <summary>
        /// نمونه جدیدی از این کلاس می سازد
        /// </summary>
        /// <param name="context">امکانات مشترک مورد نیاز را برای عملیات دیتابیسی فراهم می کند</param>
        /// <param name="system">امکانات مورد نیاز در دیتابیس های سیستمی را فراهم می کند</param>
        public <#= entity.Name #>Repository(IRepositoryContext context, ISystemRepository system)
            : base(context, system.Logger)
        {
<# if(entityInfo.IsFiscalEntity)
   { #>
            _system = system;
<# } #>
        }

        /// <inheritdoc/>
        public async Task<PagedList<<#= entity.Name #>ViewModel>> Get<#= plural #>Async(GridOptions gridOptions)
        {
            Verify.ArgumentNotNull(gridOptions, nameof(gridOptions));
            var <#= plural.CamelCase() #> = new List<<#= entity.Name #>ViewModel>();
            if (gridOptions.Operation != (int)OperationId.Print)
            {
<# if(entityInfo.IsFiscalEntity)
   { #>
                var query = Repository.GetAllQuery<<#= entity.Name #>>(ViewId.<#= entity.Name #>);
                <#= plural.CamelCase() #> = await query
                    .Select(item => Mapper.Map<<#= entity.Name #>ViewModel>(item))
                    .ToListAsync();
<# }
   else
   { #>
                var repository = UnitOfWork.GetAsyncRepository<<#= entity.Name #>>();
                <#= plural.CamelCase() #> = await repository
                    .GetEntityQuery()
                    .Select(item => Mapper.Map<<#= entity.Name #>ViewModel>(item))
                    .ToListAsync();
<# } #>
            }

            await ReadAsync(gridOptions);
            return new PagedList<<#= entity.Name #>ViewModel>(<#= plural.CamelCase() #>, gridOptions);
        }

        /// <inheritdoc/>
        public async Task<<#= entity.Name #>ViewModel> Get<#= entity.Name #>Async(int <#= camelCase #>Id)
        {
            <#= entity.Name #>ViewModel item = null;
            var repository = UnitOfWork.GetAsyncRepository<<#= entity.Name #>>();
            var <#= camelCase #> = await repository.GetByIDAsync(<#= camelCase #>Id);
            if (<#= camelCase #> != null)
            {
                item = Mapper.Map<<#= entity.Name #>ViewModel>(<#= camelCase #>);
            }

            return item;
        }

        /// <inheritdoc/>
        public async Task<<#= entity.Name #>ViewModel> Save<#= entity.Name #>Async(<#= entity.Name #>ViewModel <#= camelCase #>)
        {
            Verify.ArgumentNotNull(<#= camelCase #>, nameof(<#= camelCase #>));
            <#= entity.Name #> <#= camelCase #>Model;
            var repository = UnitOfWork.GetAsyncRepository<<#= entity.Name #>>();
            if (<#= camelCase #>.Id == 0)
            {
                <#= camelCase #>Model = Mapper.Map<<#= entity.Name #>>(<#= camelCase #>);
                await InsertAsync(repository, <#= camelCase #>Model);
            }
            else
            {
                <#= camelCase #>Model = await repository.GetByIDAsync(<#= camelCase #>.Id);
                if (<#= camelCase #>Model != null)
                {
                    await UpdateAsync(repository, <#= camelCase #>Model, <#= camelCase #>);
                }
            }

            return Mapper.Map<<#= entity.Name #>ViewModel>(<#= camelCase #>Model);
        }

        /// <inheritdoc/>
        public async Task Delete<#= entity.Name #>Async(int <#= camelCase #>Id)
        {
            var repository = UnitOfWork.GetAsyncRepository<<#= entity.Name #>>();
            var <#= camelCase #> = await repository.GetByIDAsync(<#= camelCase #>Id);
            if (<#= camelCase #> != null)
            {
                await DeleteAsync(repository, <#= camelCase #>);
            }
        }

        /// <inheritdoc/>
        public async Task Delete<#= plural #>Async(IList<int> <#= camelCase #>Ids)
        {
            var repository = UnitOfWork.GetAsyncRepository<<#= entity.Name #>>();
            foreach (int <#= camelCase #>Id in <#= camelCase #>Ids)
            {
                var <#= camelCase #> = await repository.GetByIDAsync(<#= camelCase #>Id);
                if (<#= camelCase #> != null)
                {
                    await DeleteNoLogAsync(repository, <#= camelCase #>);
                }
            }

            await OnEntityGroupDeleted(<#= camelCase #>Ids);
        }

        internal override int? EntityType
        {
            get { return (int?)EntityTypeId.<#= entity.Name #>; }
        }

        /// <inheritdoc/>
        protected override void UpdateExisting(<#= entity.Name #>ViewModel <#= camelCase #>ViewModel, <#= entity.Name #> <#= camelCase #>)
        {
<#
var doNotCopy = new string[] { "ModifiedDate", "RowGuid" };
foreach(var property in entity.Properties
    .Where(prop => !doNotCopy.Contains(prop.Name) && prop.Name.IndexOf("Id") == -1))
{ #>
            <#= camelCase #>.<#= property.Name #> = <#= camelCase #>ViewModel.<#= property.Name #>;
<# } #>
        }

        /// <inheritdoc/>
        protected override string GetState(<#= entity.Name #> entity)
        {
            return String.Empty;
        }
<# if(entityInfo.IsFiscalEntity)
   { #>

        private ISecureRepository Repository
        {
            get { return _system.Repository; }
        }

        private readonly ISystemRepository _system;
<# } #>
    }
}
