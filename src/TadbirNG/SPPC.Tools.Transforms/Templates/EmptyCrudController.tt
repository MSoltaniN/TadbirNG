<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SPPC.Framework.Extensions" #>
using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Localization;
using SPPC.Tadbir.Api;
using SPPC.Tadbir.Persistence;
using SPPC.Tadbir.Security;
using SPPC.Tadbir.ViewModel.Core;
using SPPC.Tadbir.ViewModel.<#= _model.EntityArea #>;
using SPPC.Tadbir.Web.Api.Filters;
using SPPC.Tadbir.Web.Api.Resources.Types;

<#
var plural = _model.EntityName.ToPlural();
var name = String.Format("{0}Controller", plural);
#>
namespace SPPC.Tadbir.Web.Api.Controllers
{
    [Produces("application/json")]
    public class <#= name #> : ValidatingController<<#= _model.EntityName #>ViewModel>
    {
        public <#= name #>(I<#= _model.EntityName #>Repository repository, IStringLocalizer<AppStrings> strings,
            ITokenManager tokenManager)
            : base(strings, tokenManager)
        {
            _repository = repository;
        }

        protected override string EntityNameKey
        {
            get { return AppStrings.<#= _model.EntityName #>; }
        }

        /// <summary>
        /// به روش آسنکرون، اطلاعات صفحه بندی شده <#= _model.EntityPluralPersianName #> را خوانده و برمی گرداند
        /// </summary>
        /// <returns>اطلاعات صفحه بندی شده <#= _model.EntityPluralPersianName #></returns>
        // GET: api/<#= plural.ToLower() #>
        [Route(<#= _model.EntityName #>Api.<#= plural #>Url)]
        [AuthorizeRequest(SecureEntity.<#= _model.EntityName #>, (int)<#= _model.EntityName #>Permissions.View)]
        public async Task<IActionResult> Get<#= plural #>Async()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// به روش آسنکرون، اطلاعات نمایشی <#= _model.EntityPersianName #> مشخص شده با شناسه دیتابیسی را خوانده و برمی گرداند
        /// </summary>
        /// <param name="<#= _model.EntityName.ToLower() #>Id">شناسه دیتابیسی <#= _model.EntityPersianName #> مورد نظر</param>
        /// <returns>اطلاعات نمایشی <#= _model.EntityPersianName #> مورد نظر</returns>
        // GET: api/<#= plural.ToLower() #>/{<#= _model.EntityName.ToLower() #>Id:min(1)}
        [Route(<#= _model.EntityName #>Api.<#= _model.EntityName #>Url)]
        [AuthorizeRequest(SecureEntity.<#= _model.EntityName #>, (int)<#= _model.EntityName #>Permissions.View)]
        public async Task<IActionResult> Get<#= _model.EntityName #>Async(int <#= _model.EntityName.ToLower() #>Id)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// به روش آسنکرون، اطلاعات نمایشی یک <#= _model.EntityPersianName #> جدید را پس از اعتبارسنجی در دیتابیس ذخیره می کند
        /// </summary>
        /// <param name="<#= _model.EntityName.ToLower() #>">اطلاعات نمایشی <#= _model.EntityPersianName #> جدید</param>
        /// <returns>اطلاعات نمایشی ذخیره شده برای <#= _model.EntityPersianName #></returns>
        // POST: api/<#= plural.ToLower() #>
        [HttpPost]
        [Route(<#= _model.EntityName #>Api.<#= plural #>Url)]
        [AuthorizeRequest(SecureEntity.<#= _model.EntityName #>, (int)<#= _model.EntityName #>Permissions.Create)]
        public async Task<IActionResult> PostNew<#= _model.EntityName #>Async([FromBody] <#= _model.EntityName #>ViewModel <#= _model.EntityName.ToLower() #>)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// به روش آسنکرون، اطلاعات نمایشی اصلاح شده برای یک <#= _model.EntityPersianName #> موجود را پس از اعتبارسنجی در دیتابیس ذخیره می کند
        /// </summary>
        /// <param name="<#= _model.EntityName.ToLower() #>Id">شناسه دیتابیسی <#= _model.EntityPersianName #> اصلاح شده</param>
        /// <param name="<#= _model.EntityName.ToLower() #>">اطلاعات نمایشی اصلاح شده برای <#= _model.EntityPersianName #></param>
        /// <returns>اطلاعات نمایشی ذخیره شده برای <#= _model.EntityPersianName #></returns>
        // PUT: api/<#= plural.ToLower() #>/{<#= _model.EntityName.ToLower() #>Id:min(1)}
        [HttpPut]
        [Route(<#= _model.EntityName #>Api.<#= _model.EntityName #>Url)]
        [AuthorizeRequest(SecureEntity.<#= _model.EntityName #>, (int)<#= _model.EntityName #>Permissions.Edit)]
        public async Task<IActionResult> PutModified<#= _model.EntityName #>Async(int <#= _model.EntityName.ToLower() #>Id, [FromBody] <#= _model.EntityName #>ViewModel <#= _model.EntityName.ToLower() #>)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// به روش آسنکرون، اطلاعات <#= _model.EntityPersianName #> مشخص شده با شناسه دیتابیسی را پس از اعتبارسنجی از دیتابیس حذف می کند
        /// </summary>
        /// <param name="<#= _model.EntityName.ToLower() #>Id">شناسه دیتابیسی <#= _model.EntityPersianName #> مورد نظر برای حذف</param>
        // DELETE: api/<#= plural.ToLower() #>/{<#= _model.EntityName.ToLower() #>Id:min(1)}
        [HttpDelete]
        [Route(<#= _model.EntityName #>Api.<#= _model.EntityName #>Url)]
        [AuthorizeRequest(SecureEntity.<#= _model.EntityName #>, (int)<#= _model.EntityName #>Permissions.Delete)]
        public async Task<IActionResult> DeleteExisting<#= _model.EntityName #>Async(int <#= _model.EntityName.ToLower() #>Id)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// به روش آسنکرون، <#= _model.EntityPluralPersianName #> داده شده را - در صورت امکان - حذف می کند
        /// </summary>
        /// <param name="actionDetail">اطلاعات مورد نیاز برای عملیات حذف گروهی</param>
        /// <returns>در صورت بروز خطای اعتبارسنجی، کد وضعیتی 400 به همراه پیغام خطا و در غیر این صورت
        /// کد وضعیتی 204 (به معنی نبود اطلاعات) را برمی گرداند</returns>
        // PUT: api/<#= plural.ToLower() #>
        [HttpPut]
        [Route(<#= _model.EntityName #>Api.<#= plural #>Url)]
        [AuthorizeRequest(SecureEntity.<#= _model.EntityName #>, (int)<#= _model.EntityName #>Permissions.Delete)]
        public async Task<IActionResult> PutExisting<#= plural #>AsDeletedAsync(
            [FromBody] ActionDetailViewModel actionDetail)
        {
            throw new NotImplementedException();
        }

        private readonly I<#= _model.EntityName #>Repository _repository;
    }
}