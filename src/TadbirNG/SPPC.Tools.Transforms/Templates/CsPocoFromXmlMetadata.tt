<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SPPC.Tools.Model" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: <#= _version #>
//     Template Version: 1.0
//     Generation Date: <#= DateTime.Now.ToString() #>
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
<#
foreach(var ns in GetRequiredNamespaces())
{ #>
using <#= ns  #>;
<# }
#>

<# var codeNamespace = NamespaceUtil.GetNamespace(_entity.Repository, "Model", _entity.Area); #>
namespace <#= codeNamespace #>
{
<#  if(!String.IsNullOrWhiteSpace(_entity.Description))
    { #>
    /// <summary>
    /// <#= _entity.Description #>
    /// </summary>
<#  } #>
    public partial class <#= _entity.Name #> : <#= _entity.Type #>
    {
        /// <summary>
        /// نمونه جدیدی از این کلاس می سازد
        /// </summary>
        public <#= _entity.Name #>()
        {
<#
var textProps = _entity.Properties.Where(prop => prop.Type.ToString() == "String");
foreach(var textProp in textProps)
{ #>
            <#= textProp.Name #> = String.Empty;
<# }
var dateProps = _entity.Properties.Where(prop => prop.Type.ToString() == "DateTime");
foreach(var dateProp in dateProps)
{ #>
            <#= dateProp.Name #> = DateTime.Now;
<# } #>
        }
<#
foreach(var property in GetNonInheritedProperties())
{
    if(!String.IsNullOrWhiteSpace(property.Description))
    { #>

        /// <summary>
        /// <#= property.Description #>
        /// </summary>
<#  } #>
        public virtual <#= this.GetTypeAlias(property) #> <#= property.Name #> { get; set; }
<#
}
foreach (var relation in GetNonInheritedRelations())
{ #>

<#  if (!String.IsNullOrEmpty(relation.Description))
    { #>
        /// <summary>
        /// <#= relation.Description #>
        /// </summary>
<#  }
    if (relation.Multiplicity == RelationMultiplicity.OneToOne || relation.Multiplicity == RelationMultiplicity.ManyToOne)
    { #>
        public virtual <#= relation.EntityName #> <#= relation.Name #> { get; set; }
<#  }
    else if (relation.Multiplicity == RelationMultiplicity.OneToMany)
    { #>
        public virtual IList<<#= relation.EntityName #>> <#= relation.Name #> { get; protected set; }
<#  }
    else if (relation.Multiplicity == RelationMultiplicity.ManyToMany)
    { #>
        public virtual IList<<#= relation.JoinTable #>> <#= relation.JoinTable #>s { get; protected set; }
<#  }
} #>
    }
}
