<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="SPPC.Framework.Common" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SPPC.Framework.Common" #>
<#@ import namespace="SPPC.Framework.Extensions" #>
<#@ import namespace="SPPC.Tools.Model" #>
<#@ output extension=".cs" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: <#= _version #>
//     Template Version: 1.0
//     Generation Date: <#= DateTime.Now.ToString() #>
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

<#
string typeName = _csType.Name.Replace("ViewModel", String.Empty);
foreach(var type in GetReferencedModelTypes(_csType))
{ #>
import { <#= type #> } from "./<#= type.CamelCase() #>";
<# }
#>

export interface <#= typeName #> {
<#
var modelProperties = _csType.GetProperties(BindingFlags.Public | BindingFlags.Instance);
foreach(var property in modelProperties)
{
    string name = property.Name.CamelCase();
    if(IsNullable(property))
    {
        name = String.Concat(name, "?");
    }
#>    <#= name #>: <#= GetTypescriptTypeName(property) #>;
<#
} #>
}
