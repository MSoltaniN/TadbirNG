<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: <#= _version #>
//     Template Version: 1.0
//     Generation Date: <#= DateTime.Now.ToString() #>
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.ComponentModel.DataAnnotations;
using SPPC.Framework.Values;

<# var codeNamespace = NamespaceUtil.GetNamespace(_entity.Repository, "ViewModel", _entity.Area); #>
namespace <#= codeNamespace #>
{
<#  if(!String.IsNullOrWhiteSpace(_entity.Description))
    { #>
    /// <summary>
    /// <#= _entity.Description #>
    /// </summary>
<#  } #>
    public partial class <#= _entity.Name #>ViewModel : ViewModelBase
    {
        /// <summary>
        /// نمونه جدیدی از این کلاس می سازد
        /// </summary>
        public <#= _entity.Name #>ViewModel()
        {
<#
var textProps = _entity.Properties.Where(prop => prop.Type.ToString() == "String");
foreach(var textProp in textProps)
{ #>
            <#= textProp.Name #> = String.Empty;
<# } #>
        }
<#
var baseProperties = new string[] { "Id", "RowGuid", "ModifiedDate" };
foreach(var property in _entity.Properties.Where(prop => !baseProperties.Contains(prop.Name)))
{
    if(!String.IsNullOrWhiteSpace(property.Description))
    { #>

        /// <summary>
        /// <#= property.Description #>
        /// </summary>
<#  }
    if(property.IsValidated)
    {
        var rule = property.ValidationRule;
        if (rule.Required)
	    { #>
        [Required(ErrorMessage = ValidationMessages.FieldIsRequired)]
<#      }
        if (HasMinLengthRestrictionOnly(property))
	    { #>
        [MinLength(<#= rule.Minimum #>, ErrorMessage = ValidationMessages.TextFieldIsTooShort)]
<#      }
        if (HasMaxLengthRestrictionOnly(property))
	    { #>
        [StringLength(<#= rule.Maximum #>, ErrorMessage = ValidationMessages.TextFieldIsTooLong)]
<#      }
        if (HasLengthRangeRestriction(property))
	    { #>
        [StringLength(<#= rule.Maximum #>, MinimumLength = <#= rule.Minimum #>, ErrorMessage = ValidationMessages.TextFieldHasLengthRange)]
<#      }
        if (HasRangeRestriction(property))
	    { #>
        [Range(<#= rule.Minimum #>, <#= rule.Maximum #>, ErrorMessage = ValidationMessages.NumberHasValueRange)]
<#      }
    } #>
        public <#= GetTypeAlias(property) #> <#= property.Name #> { get; set; }
<#
} #>
    }
}
