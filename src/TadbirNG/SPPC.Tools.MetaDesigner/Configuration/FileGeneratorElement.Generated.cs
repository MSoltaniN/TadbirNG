// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.0.0
//     Template Version: 1.0
//     Generation Date: 2014-12-27 7:33:18 PM
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Configuration;
using System.Xml;

namespace SPPC.Tools.MetaDesigner.Configuration
{
    /// <summary>
    /// Defines configuration settings for a file generator.
    /// </summary>
    public class FileGeneratorElement : ConfigurationElement
    {
        /// <summary>
        /// Initializes a new instance of FileGeneratorElement class.
        /// </summary>
        public FileGeneratorElement()
        {
        }

        /// <summary>
        /// Name of this file generator configuration
        /// </summary>
        [ConfigurationProperty("name",
            IsRequired = true,
            IsKey = true)]
        public string Name
        {
            get
            {
                return (string)this["name"];
            }
            set
            {
                this["name"] = value;
            }
        }

        /// <summary>
        /// Content type of the file generated by this file generator
        /// </summary>
        [ConfigurationProperty("outputType",
            IsRequired = true)]
        public string OutputType
        {
            get
            {
                return (string)this["outputType"];
            }
            set
            {
                this["outputType"] = value;
            }
        }

        /// <summary>
        /// A template used for dynamic generation of file name
        /// </summary>
        [ConfigurationProperty("fileName",
            IsRequired = true)]
        public string FileName
        {
            get
            {
                return (string)this["fileName"];
            }
            set
            {
                this["fileName"] = value;
            }
        }

        /// <summary>
        /// Type name of runtime T4 template used by file generator
        /// </summary>
        [ConfigurationProperty("template",
            IsRequired = true)]
        public string TemplateType
        {
            get
            {
                return (string)this["template"];
            }
            set
            {
                this["template"] = value;
            }
        }

        /// <summary>
        /// Reads XML from the configuration file.
        /// </summary>
        /// <param name="reader">The XmlReader that reads from the configuration file.</param>
        /// <param name="serializeCollectionKey">true to serialize only the collection key properties; otherwise, false.</param>
        protected override void DeserializeElement(XmlReader reader, bool serializeCollectionKey)
        {
            base.DeserializeElement(reader, serializeCollectionKey);
            // Enter your custom processing code here.
        }

        /// <summary>
        /// Writes the contents of this configuration element to the configuration file
        /// when implemented in a derived class.
        /// </summary>
        /// <param name="writer">The XmlWriter that writes to the configuration file.</param>
        /// <param name="serializeCollectionKey">true to serialize only the collection key properties; otherwise, false.</param>
        /// <returns>true if any data was actually serialized; otherwise, false.</returns>
        protected override bool SerializeElement(XmlWriter writer, bool serializeCollectionKey)
        {
            bool ret = base.SerializeElement(writer, serializeCollectionKey);
            // Enter your custom processing code here. 
            return ret;

        }

        /// <summary>
        /// Indicates whether this configuration element has been modified since it was
        /// last saved or loaded, when implemented in a derived class.
        /// </summary>
        /// <returns>true if the element has been modified; otherwise, false.</returns>
        protected override bool IsModified()
        {
            bool ret = base.IsModified();
            // Enter your custom processing code here. 
            return ret;
        }
    }
}
