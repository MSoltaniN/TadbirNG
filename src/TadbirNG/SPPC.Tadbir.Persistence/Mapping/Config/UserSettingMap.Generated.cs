// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.330
//     Template Version: 1.0
//     Generation Date: 2018-06-27 1:19:43 PM
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using SPPC.Tadbir.Model.Config;

namespace SPPC.Tadbir.Persistence.Mapping
{
    internal static class SysUserSettingMap
    {
        internal static void BuildMapping(EntityTypeBuilder<UserSetting> builder)
        {
            builder.ToTable("UserSetting", "Config");
            builder.HasKey(e => e.Id);
            builder.Property(e => e.Id)
                .HasColumnName("UserSettingID");
            builder.Property(e => e.ViewId);
            builder.Property(e => e.ModelType)
                .IsRequired()
                .HasMaxLength(128);
            builder.Property(e => e.Values)
                .HasColumnName("Values")
                .IsRequired();
            builder.Property(e => e.RowGuid)
                .HasColumnName("rowguid")
                .HasDefaultValueSql("(newid())");
            builder.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");

            builder.HasOne(e => e.Setting)
                .WithMany()
                .HasForeignKey(e => e.SettingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Config_UserSetting_Config_Setting");
            builder.HasOne(e => e.User)
                .WithMany()
                .HasForeignKey(e => e.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Config_UserSetting_Auth_User");
            builder.HasOne(e => e.Role)
                .WithMany()
                .HasForeignKey(e => e.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Config_UserSetting_Auth_Role");
            builder.HasOne(e => e.View)
                .WithMany()
                .HasForeignKey(e => e.ViewId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Config_UserSetting_Metadata_EntityView");
        }
    }

    internal static class UserSettingMap
    {
        internal static void BuildMapping(EntityTypeBuilder<UserSetting> builder)
        {
            builder.ToTable("UserSetting", "Config");
            builder.HasKey(e => e.Id);
            builder.Property(e => e.Id)
                .HasColumnName("UserSettingID");
            builder.Property(e => e.ViewId);
            builder.Property(e => e.ModelType)
                .IsRequired()
                .HasMaxLength(128);
            builder.Property(e => e.Values)
                .HasColumnName("Values")
                .IsRequired();
            builder.Property(e => e.RowGuid)
                .HasColumnName("rowguid")
                .HasDefaultValueSql("(newid())");
            builder.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");

            builder.HasOne(e => e.Setting)
                .WithMany()
                .HasForeignKey(e => e.SettingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Config_UserSetting_Config_Setting");

            builder.Ignore(e => e.User);
            builder.Ignore(e => e.Role);
            builder.Ignore(e => e.View);

        }
    }
}
