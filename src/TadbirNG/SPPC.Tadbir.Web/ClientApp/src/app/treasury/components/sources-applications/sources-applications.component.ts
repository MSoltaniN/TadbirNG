import { ChangeDetectorRef,
  Component,
  ElementRef,
  NgZone,
  OnInit,
  Renderer2,
  ViewChild }
 from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { DialogService } from '@progress/kendo-angular-dialog';
import { GridComponent } from '@progress/kendo-angular-grid';
import { RTL } from '@progress/kendo-angular-l10n';
import { SettingService } from '@sppc/config/service';
import { AutoGeneratedGridComponent, String } from '@sppc/shared/class';
import { ReportViewerComponent, ViewIdentifierComponent } from '@sppc/shared/components';
import { QuickReportSettingComponent } from '@sppc/shared/components/reportManagement/QuickReport-Setting.component';
import { ReportManagementComponent } from '@sppc/shared/components/reportManagement/reportManagement.component';
import { Entities, Layout, MessageType } from '@sppc/shared/enum/metadata';
import { OperationId } from '@sppc/shared/enum/operationId';
import { RelatedItems } from '@sppc/shared/models';
import { ViewName } from '@sppc/shared/security';
import { BrowserStorageService, GridService, MetaDataService } from '@sppc/shared/services';
import { SourceAppApi } from '@sppc/treasury/service/api';
import { CashRegisterApi } from '@sppc/treasury/service/api/cashRegistersApi';
import { CashRegistersInfo, CashRegistersService } from '@sppc/treasury/service/cash-registers.service';
import { SourceAppService } from '@sppc/treasury/service/source-app.service';
import { ToastrService } from 'ngx-toastr';
import { lastValueFrom } from 'rxjs';


export function getLayoutModule(layout: Layout) {
 return layout.getLayout();
}

@Component({
  selector: 'app-sources-applications',
  templateUrl: './sources-applications.component.html',
  styleUrls: ['./sources-applications.component.css'],
  providers: [
    {
      provide: RTL,
      useFactory: getLayoutModule,
      deps: [Layout],
    },
  ],
})
export class SourcesApplicationsComponent extends AutoGeneratedGridComponent implements OnInit {

  @ViewChild(GridComponent, {static: true}) grid: GridComponent;
  @ViewChild(ViewIdentifierComponent, {static: true}) viewIdentity: ViewIdentifierComponent;
  @ViewChild(ReportViewerComponent, {static: true}) viewer: ReportViewerComponent;
  @ViewChild(ReportManagementComponent, {static: true}) reportManager: ReportManagementComponent;
  @ViewChild(QuickReportSettingComponent, {static: true}) reportSetting: QuickReportSettingComponent;

  constructor(
    public toastrService: ToastrService,
    public translate: TranslateService,
    public gridService: GridService,
    public bStorageService: BrowserStorageService,
    public cdref: ChangeDetectorRef,
    public renderer: Renderer2,
    public metadata: MetaDataService,
    private sourceAppService: SourceAppService,
    public dialogService: DialogService,
    public settingService: SettingService,
    public ngZone: NgZone,
    public elem: ElementRef
  ) {
    super(
      toastrService,
      translate,
      gridService,
      renderer,
      metadata,
      settingService,
      bStorageService,
      cdref,
      ngZone,
      elem,
      SourceAppApi.SourceApps,
      SourceAppApi.SourceApp
    );
  }

  ngOnInit(): void {
    this.entityName = Entities.SourceApp;
    this.viewId = ViewName[this.entityTypeName];

    this.getDataUrl = SourceAppApi.SourceApps;
    this.reloadGrid();
    this.cdref.detectChanges();
  }

}
