import { ChangeDetectorRef,
   Component,
   ElementRef,
   NgZone,
   OnInit,
   Renderer2,
   ViewChild }
  from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { DialogService } from '@progress/kendo-angular-dialog';
import { GridComponent } from '@progress/kendo-angular-grid';
import { RTL } from '@progress/kendo-angular-l10n';
import { SettingService } from '@sppc/config/service';
import { AutoGeneratedGridComponent, String } from '@sppc/shared/class';
import { ReportViewerComponent, ViewIdentifierComponent } from '@sppc/shared/components';
import { QuickReportSettingComponent } from '@sppc/shared/components/reportManagement/QuickReport-Setting.component';
import { ReportManagementComponent } from '@sppc/shared/components/reportManagement/reportManagement.component';
import { Entities, Layout, MessageType } from '@sppc/shared/enum/metadata';
import { OperationId } from '@sppc/shared/enum/operationId';
import { RelatedItems } from '@sppc/shared/models';
import { ViewName } from '@sppc/shared/security';
import { BrowserStorageService, GridService, MetaDataService } from '@sppc/shared/services';
import { CashRegisterApi } from '@sppc/treasury/service/api/cashRegistersApi';
import { CashRegistersInfo, CashRegistersService } from '@sppc/treasury/service/cash-registers.service';
import { ToastrService } from 'ngx-toastr';
import { lastValueFrom } from 'rxjs';
import { CashRegisterRolesFormComponent } from './cash-register-roles-form.component';
import { CashRegistersFormComponent } from './cash-registers-form.component';

export function getLayoutModule(layout: Layout) {
  return layout.getLayout();
}

@Component({
  selector: 'cash-registers',
  templateUrl: './cash-registers.component.html',
  styles: [``],
  providers: [
    {
      provide: RTL,
      useFactory: getLayoutModule,
      deps: [Layout],
    },
  ],
})
export class CashRegistersComponent extends AutoGeneratedGridComponent implements OnInit {

  @ViewChild(GridComponent, {static: true}) grid: GridComponent;
  @ViewChild(ViewIdentifierComponent, {static: true}) viewIdentity: ViewIdentifierComponent;
  @ViewChild(ReportViewerComponent, {static: true}) viewer: ReportViewerComponent;
  @ViewChild(ReportManagementComponent, {static: true}) reportManager: ReportManagementComponent;
  @ViewChild(QuickReportSettingComponent, {static: true}) reportSetting: QuickReportSettingComponent;

  constructor(
    public toastrService: ToastrService,
    public translate: TranslateService,
    public gridService: GridService,
    public bStorageService: BrowserStorageService,
    public cdref: ChangeDetectorRef,
    public renderer: Renderer2,
    public metadata: MetaDataService,
    private cashRegisterService: CashRegistersService,
    public dialogService: DialogService,
    public settingService: SettingService,
    public ngZone: NgZone,
    public elem: ElementRef
  ) {
    super(
      toastrService,
      translate,
      gridService,
      renderer,
      metadata,
      settingService,
      bStorageService,
      cdref,
      ngZone,
      elem,
      CashRegisterApi.AllCashRegisters,
      CashRegisterApi.CashRegister
    );
  }

  ngOnInit(): void {
    this.entityName = Entities.CashRegister;
    this.viewId = ViewName[this.entityTypeName];

    this.getDataUrl = CashRegisterApi.AllCashRegisters;
    this.reloadGrid();
    this.cdref.detectChanges();
  }

  addNew() {
    this.editDataItem = new CashRegistersInfo();
    this.openEditorDialog(true);
  }

  editHandler(arg: any) {
    var recordId = this.selectedRows[0];
    this.grid.loading = true;
    this.cashRegisterService
      .getById(String.Format(CashRegisterApi.CashRegister, recordId))
      .subscribe((res) => {
        this.editDataItem = res;
        this.openEditorDialog(false);
        this.grid.loading = false;
      });
  }

  removeHandler(arg: any) {
    this.deleteConfirm = true;
    if (this.groupOperation) {
      this.prepareDeleteConfirm(this.getText("Messages.SelectedItems"));
    } else {
      var recordId = this.selectedRows[0];
      var record = this.rowData.data.find((f) => f.id == recordId);

      this.prepareDeleteConfirm(record.name);
      this.deleteModelId = recordId;
    }
  }

  cancelHandler() {
    this.editDataItem = undefined;
    this.errorMessages = undefined;
  }

  async rolesHandler() {
    var cashRegisterId = this.selectedRows[0];

    let cashRegisterRoles = await lastValueFrom(this.cashRegisterService.getCashRegisterRoles(cashRegisterId));

    this.dialogRef = this.dialogService.open({
      title: this.getText('CashRegisters.AssignUserToCashRegister'),
      content: CashRegisterRolesFormComponent,
    });

    this.dialogModel = this.dialogRef.content.instance;
    this.dialogModel.cashRegisterId = cashRegisterId;
    this.dialogModel.errorMessages = undefined;
    this.dialogModel.cashRegisterRoles = cashRegisterRoles;

    this.dialogRef.content.instance.saveCashRegisterRoles.subscribe((res) => {
      this.saveCashRegisterRoles(res);
    });

    const closeForm = this.dialogRef.content.instance.cancelCashRegisterRoles.subscribe((res) => {
      this.dialogRef.close();
    });
  }

  saveCashRegisterRoles(users: RelatedItems) {
    this.grid.loading = true;
    this.cashRegisterService.modifiedCashRegisterRoles(users).subscribe(
      (response) => {
        // this.roleList = false;
        this.showMessage(this.updateMsg, MessageType.Succes);
        this.grid.loading = false;
        this.dialogRef.close();
      },
      (error) => {
        this.grid.loading = false;
        this.errorMessages = this.errorHandlingService.handleError(error);
      }
    );
  }

  onAdvanceFilterOk() {
    this.enableViewListChanged(this.viewId);
    this.operationId = OperationId.Filter;
    this.reloadGrid();
  }

  /**باز کردن و مقداردهی اولیه به فرم ویرایشگر */
  openEditorDialog(isNew: boolean) {
    this.dialogRef = this.dialogService.open({
      title: this.getText(isNew ? "CashRegisters.New" : "CashRegisters.Edit"),
      content: CashRegistersFormComponent,
    });

    this.dialogModel = this.dialogRef.content.instance;
    this.dialogModel.model = this.editDataItem;
    this.dialogModel.isNew = isNew;
    this.dialogModel.errorMessages = undefined;

    this.dialogRef.content.instance.save.subscribe((model) => {
      var serviceUrl = isNew
        ? CashRegisterApi.AllCashRegisters
        : String.Format(CashRegisterApi.CashRegister, model.id);
      this.saveHandler(model, isNew, this.cashRegisterService, serviceUrl);
    });

    const closeForm = this.dialogRef.content.instance.cancel.subscribe(
      (res) => {
        this.dialogRef.close();
      }
    );
  }

  updateActiveState(toActivate:boolean) {

    let URL = toActivate == true? CashRegisterApi.ReactivateCashRegister: CashRegisterApi.DeactivateCashRegister;
    let apiUrl = String.Format(URL,this.selectedRows);
    let model = this.rowData?.data.find(i => i.id == this.selectedRows[0]);

    super.updateActiveState(toActivate,apiUrl,model);
  }

}
