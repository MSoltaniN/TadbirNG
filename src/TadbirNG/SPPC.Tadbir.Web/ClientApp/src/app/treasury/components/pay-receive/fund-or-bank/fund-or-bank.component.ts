import {
  ChangeDetectorRef,
  Component,
  ElementRef,
  EventEmitter,
  Input,
  NgZone,
  OnChanges,
  OnInit,
  Output,
  Renderer2,
  SimpleChanges,
  TemplateRef,
  ViewChild,
} from "@angular/core";
import { TranslateService } from "@ngx-translate/core";
import {
  DialogCloseResult,
  DialogService,
} from "@progress/kendo-angular-dialog";
import {
  GridComponent,
  GridDataResult,
  PageChangeEvent,
  RowArgs,
} from "@progress/kendo-angular-grid";
import { SettingService } from "@sppc/config/service";
import { VoucherLineFormComponent } from "@sppc/finance/components/operational/voucherLine/voucherLine-form.component";
import { FullAccount } from "@sppc/finance/models";
import { FullAccountInfo } from "@sppc/finance/service";
import { AutoGeneratedGridComponent, String } from "@sppc/shared/class";
import { Entities } from "@sppc/shared/enum/metadata";
import { ViewName } from "@sppc/shared/security";
import {
  BrowserStorageService,
  GridService,
  MetaDataService,
} from "@sppc/shared/services";
import {
  PaymentCashAccountApi,
  ReceiptCashAccountApi,
} from "@sppc/treasury/service/api/payReceiveCashAccountApi";
import { ToastrService } from "ngx-toastr";

@Component({
  selector: "fund-or-bank",
  templateUrl: "./fund-or-bank.component.html",
  styleUrls: ["./fund-or-bank.component.css"],
})
export class FundOrBankComponent extends AutoGeneratedGridComponent
  implements OnInit,OnChanges {

  constructor(
    public toastrService: ToastrService,
    public translate: TranslateService,
    public gridService: GridService,
    public bStorageService: BrowserStorageService,
    public cdref: ChangeDetectorRef,
    public renderer: Renderer2,
    public metadata: MetaDataService,
    public dialogService: DialogService,
    public settingService: SettingService,
    public ngZone: NgZone,
    public elem: ElementRef
  ) {
    super(
      toastrService,
      translate,
      gridService,
      renderer,
      metadata,
      settingService,
      bStorageService,
      cdref,
      ngZone,
      elem,
      PaymentCashAccountApi.CashAccountArticles
    );
  }

  @ViewChild(GridComponent, { static: true }) grid: GridComponent;
  @ViewChild("itemListRef") accountDetails: TemplateRef<any>;

  public rowData: GridDataResult;

  @Input() isNew: boolean;
  /**
   * 1 fo peyments and 2 for reciepts
   */
  @Input() set payReceiptType(value) {
    this._payReceiptType = value;
    if (value == "2") this.CashAccountApi = ReceiptCashAccountApi;
    else this.CashAccountApi = PaymentCashAccountApi;

    this.environmentModelsUrl = this.CashAccountApi.AllCashAccountArticles;
  }

  @Input("selectedAccounts") set selectedAccounts(accounts: FullAccount[]) {
    setTimeout(() => {
      if (accounts) {
        this.accounts = accounts;
        let total = accounts.length;
        this.rowData = {
          data: accounts,
          total: total,
        };
      }
    }, 0);
  }

  @Input() isConfirmed: boolean; 
  @Input() payReceiveId: number;
  /**
   * 1 fo peyments and 2 for reciepts
   */
  public get payReceiptType(): "1" | "2" {
    return this._payReceiptType;
  }

  private _payReceiptType: "1" | "2";
  CashAccountApi: typeof PaymentCashAccountApi;
  selectedItem: any;
  fullAccount: FullAccountInfo = new FullAccountInfo();
  accounts: FullAccount[] = [];
  editMode = false;
  models = [];
  totalCashAmount: number = 0;
  stateOptions: any[] = [
    { label: "PayReceipt.Bank", value: 2 },
    { label: "PayReceipt.Fund", value: 1 },
  ];
  /**
   *  1 for cashRegister ,2 for Bank
   */
  fundOrBankType: number = 1;

  @Output() setTotalCashAmount: EventEmitter<any> = new EventEmitter();

  ngOnInit() {
    this.entityName = Entities.PayReceiveCashAccount;
    this.viewId = ViewName[this.entityTypeName];

    this.pageSize = 5;
  }

  ngOnChanges(changes: SimpleChanges): void {
    console.log(changes);
    
    if (changes.payReceiveId && !changes.payReceiveId.firstChange) {
      this.getDataUrl = String.Format(this.CashAccountApi.CashAccountArticles,this.payReceiveId);
      console.log('fghfhgfh',this.getDataUrl);
      
      this.reloadGrid();
    }
  }

  addNew() {
    this.openEditorDialog(true);
  }

  getSelectedRow(item: RowArgs) {
    return item.index;
  }

  editHandler(event) {
    this.editMode = true;
    this.fullAccount = this.accounts[this.selectedRows[0]];
  }

  removeHandler() {
    this.selectedRows.forEach((i) => {
      if (i != -1) {
        this.accounts.splice(i, 1);
        this.pageSelectedData();
      }
    });

    this.selectedRows = [];
    // if (this.widgetAccounts.length == 0)
    //   this.dataloadingMessage = false;
  }

  openEditorDialog(isNew: boolean) {
    this.dialogRef = this.dialogService.open({
      title: this.getText(isNew ? "Buttons.New" : "Buttons.Edit"),
      content: VoucherLineFormComponent,
    });

    this.dialogModel = this.dialogRef.content.instance;
    this.dialogModel.model = this.editDataItem;
    this.dialogModel.errorMessages = undefined;
    this.dialogModel.isNew = isNew;
    this.dialogModel.isNewBalance = true; //this.isNewBalance;
    this.dialogModel.isPayReciept = true;
    this.dialogModel.creditDebiteMode = this.payReceiptType;

    this.dialogRef.content.instance.save.subscribe((viewModel) => {
      this.onSave(viewModel);
    });

    const closeForm = this.dialogRef.content.instance.cancel.subscribe(
      (res) => {
        this.dialogRef.close();

        this.dialogModel.errorMessages = undefined;
        this.dialogModel.model = undefined;

        // this.setFocus.emit();
      }
    );

    this.dialogRef.result.subscribe((result) => {
      if (result instanceof DialogCloseResult) {
        // this.isNewBalance = false;
        // this.setFocus.emit();
      }
    });

    this.dialogRef.content.instance.setFocus.subscribe((res) => {
      //this.dialogRef.dialog.instance.focus();
    });
  }

  onSave(event) {
    console.log(event);

    if (this.editMode) {
      this.accounts[this.selectedRows[0]] = event.model.fullAccount;
      this.models[this.selectedRows[0]] = event.model;
    } else {
      this.accounts.push(event.model.fullAccount);
      this.models.push(event.model);
    }

    let sum = 0;
    this.models.forEach((model) => {
      if (this.payReceiptType == "1") {
        sum += +model.debit;
      } else {
        sum += +model.credit;
      }
    });

    this.setTotalCashAmount.emit(sum);
    this.pageSelectedData();

    this.closeDialog();
  }

  closeDialog() {
    this.dialogRef.close();
  }

  private pageSelectedData(): void {
    this.rowData = {
      data: this.accounts.slice(this.skip, this.skip + this.pageSize),
      total: this.accounts.length,
    };
  }

  /**
   * برای صفحه بندی و تغییر صفحات گرید موارد انتخاب شده
   */

  public onPageChange(event: PageChangeEvent): void {
    this.skip = event.skip;
    // this.pageSize = event.take;
    this.selectedRows = [];
    this.pageSelectedData();
  }
}
