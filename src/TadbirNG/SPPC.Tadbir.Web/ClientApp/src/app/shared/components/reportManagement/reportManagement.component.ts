
import { Component, OnInit, Input, ViewChild, Host, Output, EventEmitter } from '@angular/core';
import { RTL } from '@progress/kendo-angular-l10n';
import { Renderer2, Optional, Inject } from "@angular/core";
import { ToastrService } from "ngx-toastr";
import { TranslateService } from '@ngx-translate/core';
import { Location } from '@angular/common';
import { TreeViewComponent } from "@progress/kendo-angular-treeview";
import { FormGroup, FormControl, Validators } from "@angular/forms";
import { SortDescriptor } from "@progress/kendo-data-query";
import { GridComponent, ColumnComponent } from "@progress/kendo-angular-grid";
import { environment } from "@sppc/env/environment";
import { Layout } from '@sppc/shared/enum/metadata';
import { MetaDataService, BrowserStorageService, ReportingService, LocalReportInfo, ParameterInfo, ErrorHandlingService, SessionKeys} from '@sppc/shared/services';
import { SettingService } from '@sppc/config/service';
import { ViewIdentifierComponent, ReportParametersComponent, ReportParamComponent, TabInfo } from '..';
import { QuickReportSettingComponent } from './QuickReport-Setting.component';
import { TabsComponent } from '@sppc/shared/controls';
import { AutoGeneratedGridComponent, DefaultComponent, FilterExpression, String, Filter, FilterExpressionBuilder, FilterExpressionOperator } from '@sppc/shared/class';
import { QuickReportConfigInfo, PrintInfo, TreeItem, QuickReportColumnConfig, QuickReportColumnConfigInfo, ReportSummary } from '@sppc/shared/models';
import { ReportApi } from '@sppc/shared/services/api';
import { OperationId } from '@sppc/shared/enum/operationId';
import { QuickReportViewSetting } from './quickReportViewSetting';
import { ServiceLocator } from '@sppc/service.locator';




export function getLayoutModule(layout: Layout) {
  return layout.getLayout();
}

declare var Stimulsoft: any;

@Component({
  selector: 'report-management',
  templateUrl: './reportManagement.component.html',
  styleUrls: ['./reportManagement.component.css'],
  providers: [{
    provide: RTL,
    useFactory: getLayoutModule,
    deps: [Layout]
  }, AutoGeneratedGridComponent],
  outputs: ['onDataBind']
})

export class ReportManagementComponent extends DefaultComponent implements OnInit {

  // @Input() public baseId: string;
  @Input() public ViewIdentity: ViewIdentifierComponent;
  @Input() public Grid: GridComponent;
  @Input() public Sort: SortDescriptor[];
  @Input() public Filter: FilterExpression;
  @Input() public QuickFilter: FilterExpression;
  @Input() public RowData: any;
  @Input() public MetadataType: string;
  @Input() public DefaultServiceUrl: string; //ServiceUrl from parent from
  @Input() public QuickReportSetting: QuickReportSettingComponent;
  //پارامتر های گزارشاتی مثل سود و زیان
  @Input() public Parameters: any;  

  @Input() public ViewSettings: QuickReportViewSetting;

  @Output() public onDataBind: EventEmitter<any> = new EventEmitter();

  @ViewChild(ReportParametersComponent) public reportParameter: ReportParametersComponent;
  @ViewChild(TreeViewComponent) public treeView: TreeViewComponent;
  @ViewChild(TabsComponent) public tabsComponent: TabsComponent;

  treeData: any[];
  active: boolean = false;
  showReportDesigner: boolean = false;
  showReportViewer: boolean = false;
  showSaveAsDialog: boolean = false;
  innerWidth: number;
  innerHeight: number;
  selectedKeys: any[] = [];
  report: any = new Stimulsoft.Report.StiReport();

  currentReportId: any;
  currentViewId: any;
  currentQuickReportViewInfo: QuickReportConfigInfo
  qReport: boolean;
  currentReportName: string;
  currentPrintInfo: PrintInfo;
  currentFormParams: Array<ReportParamComponent>;
  currentDefaultReportId: any;
  showDesktopTab: boolean = false;
  currentFilter: FilterExpression;
  currentQuickFilter: FilterExpression;
  currentSort: SortDescriptor[];

  quickReportJsonDesign: string;
  quickReportRowData: any;

  expandedKeys: any[] = [];
  deleteConfirmMsg: string;
  deleteConfirm: boolean = false;
  deleteMsg: string;

  //disableButtons: boolean = false;
  disableDesignButton: boolean = false;
  disableSaveAsButton: boolean = false;
  disableDefaultButton: boolean = false;
  disableDeleteButton: boolean = false;
  disablePreviewButton: boolean = false;

  quickReportFolderId: number = 18;

  errorHandlingService: ErrorHandlingService

  private reportForm = new FormGroup({
    reportName: new FormControl("", [Validators.required, Validators.maxLength(256)]),
  });

  reportTabs: Array<TabInfo>;

  constructor(public toastrService: ToastrService,
    public translate: TranslateService,
    public renderer: Renderer2,
    private metaDataService: MetaDataService,
    public bStorageService: BrowserStorageService,
    @Optional()
    @Inject('empty')
    public entityType: string,
    @Optional()
    @Inject('empty')
    public metaDataName: string,
    public reportingService: ReportingService,
    @Host() public masterComponent: AutoGeneratedGridComponent,
    public loc: Location,
    public settingService: SettingService,
    public metadataService: MetaDataService) {
    super(toastrService, translate, bStorageService, renderer, metadataService, settingService, '', undefined);      
  }

  ngOnInit() {
    this.innerWidth = window.innerWidth;
    this.innerHeight = window.screen.height;//window.innerHeight
    this.initViewer();
    this.disEnAllButtons(true);

    //if (this.loc.path().toLowerCase() == '/reports')
    //  this.showDialog();
  }

  onNodeClick(e: any) {
    var data = e.dataItem;

    this.qReport = false;
    if (data.isDynamic)
      this.qReport = true;

    if (!data.isGroup) {
      if (data.id > -100)
        this.currentReportId = data.id;
      this.currentReportName = data.caption;
      this.deleteConfirmMsg = String.Format(this.getText("Report.DeleteReportConfirm"), data.caption);
      this.disEnAllButtons(false);

      if (this.showDesktopTab) {
        if (data.isDynamic) {
          this.disEnAllButtons(true);
          this.disablePreviewButton = false;
        }
        //this line for show reporttemplate in quickreport
        if (data.id == 43) {
          this.disEnAllButtons(true);
          this.disableDesignButton = false;
        }
      }
    }
    else {
      this.disEnAllButtons(true);
    }
  }

  disEnAllButtons(value: boolean) {
    this.disableDesignButton = value;
    this.disableSaveAsButton = value;
    this.disableDefaultButton = value;
    this.disableDeleteButton = value;
    this.disablePreviewButton = value;
  }

  onNodeDblClick(dataItem: any) {
    var data = dataItem;
    //design template for quick report
    if (data.id == 43) {
      return;
    }
    if (!data.isGroup) {
      this.currentReportId = data.id;
      this.currentReportName = data.caption;
      this.qReport = data.isDynamic;
      this.deleteConfirmMsg = String.Format(this.getText("Report.DeleteReportConfirm"), data.caption);
      this.disEnAllButtons(false);
      this.showReport();
    }
    else
      this.disEnAllButtons(true);
  }

  //متد نمایش گزارش فوری
  public showQuickReport(viewId: string, formParams: Array<ReportParamComponent>,
    filter: FilterExpression = null, sort: SortDescriptor[] = null, designJson: string, qrRowData: any, quickReportViewInfo: QuickReportConfigInfo, quickFilter: FilterExpression = null) {
    this.active = true;

    if (viewId) {
      this.currentViewId = viewId;
      this.showDesktopTab = false;
      this.currentFilter = filter;
      this.currentQuickFilter = quickFilter;
      this.currentSort = sort;
      this.currentQuickReportViewInfo = quickReportViewInfo;
    }
    else {
      this.showDesktopTab = true;
      this.currentViewId = undefined;
    }

    this.quickReportJsonDesign = designJson;
    //this.quickReportRowData = qrRowData;
    this.treeData = qrRowData; //دیتا ساختار درختی
    this.addQReportToDefaultFolder(viewId, formParams);
    this.currentFormParams = formParams;
  }

  public showDialog(viewId: string = null, formParams: Array<ReportParamComponent> = null,
    filter: FilterExpression = null, sort: SortDescriptor[] = null, treeMenuData: any = null) {
    this.active = true;
    if (viewId) {
      this.currentViewId = viewId;
      this.showDesktopTab = false;
      this.currentFilter = filter;
      this.currentSort = sort;
      this.treeData = treeMenuData;
      this.expandAndSelectDefault(viewId, formParams);
      this.currentFormParams = formParams;
    }
    else {
      this.showDesktopTab = true;
      this.currentViewId = undefined;
      var url = ReportApi.ReportsHierarchy;
      this.reportingService.getAll(url)
        .subscribe((res: any) => {
          this.treeData = <Array<TreeItem>>res.body;
        });
    }

  }

  /**
   * این متد نود مربوط به گزارش فوری را به درخت اضافه میکند
   * @param viewId
   * @param formParams
   */
  public addQReportToDefaultFolder(viewId: string, formParams: Array<ReportParamComponent>) {
    var expandKeysArray: string[];

    var defaltReportUrl = String.Format(ReportApi.ReportsByViewQuickReportUrl, viewId);
    if (!this.qReport)
      defaltReportUrl = String.Format(ReportApi.ReportsByViewDefault, viewId);

    this.reportingService.getAll(defaltReportUrl)
      .subscribe((res: any) => {
        var report = <ReportSummary>res.body;

        expandKeysArray = new Array<any>();
        this.selectedKeys = new Array<any>();

        var nodeData = this.treeData.filter((p: any) => p.id == report.id)[0];
        this.selectedKeys.push(nodeData.id);
        this.currentReportName = nodeData.caption;

        while (nodeData.parentId != null) {
          expandKeysArray.push(nodeData.parentId);
          var parentNode = this.treeData.filter((p: any) => p.id == nodeData.parentId);
          nodeData = parentNode[0];
        }

        this.qReport = true;
        this.expandedKeys = expandKeysArray;
        this.disEnAllButtons(false);
        this.currentReportId = report.id;
        this.currentDefaultReportId = report.id;

        this.prepareReport(formParams);
      });

  }

  //select and expand tree node baseon report baseId
  public expandAndSelectDefault(viewId: string, formParams: Array<ReportParamComponent>) {
    var expandKeysArray: string[];

    var defaltReportUrl = String.Format(ReportApi.ReportsByViewQuickReportUrl, viewId);
    if (!this.qReport)
      defaltReportUrl = String.Format(ReportApi.ReportsByViewDefault, viewId);

    this.reportingService.getAll(defaltReportUrl)
      .subscribe((res: any) => {
        var report = <ReportSummary>res.body;

        expandKeysArray = new Array<any>();
        this.selectedKeys = new Array<any>();

        var nodeData = this.treeData.filter((p: any) => p.id == report.id)[0];
        this.selectedKeys.push(nodeData.id);
        this.currentReportName = nodeData.caption;
        this.deleteConfirmMsg = String.Format(this.getText("Report.DeleteReportConfirm"), nodeData.caption);

        while (nodeData.parentId != null) {
          expandKeysArray.push(nodeData.parentId);
          var parentNode = this.treeData.filter((p: any) => p.id == nodeData.parentId);
          nodeData = parentNode[0];
        }

        this.qReport = false;
        this.expandedKeys = expandKeysArray;
        this.disEnAllButtons(false);
        this.currentReportId = report.id;
        this.currentDefaultReportId = report.id;


        this.prepareReport(formParams);
      });

  }

  public showReport() {
    if (this.currentDefaultReportId == this.currentReportId || this.currentViewId) {
      this.prepareReport(this.currentFormParams);
    }
    else {
      var formParams = new Array<ReportParamComponent>();
      this.prepareReport(formParams);
    }
  }

  public setDefaultForAll() {
    var defaltReportUrl = String.Format(ReportApi.ReportDefault, this.currentReportId);
    this.reportingService.setDefaultForAll(defaltReportUrl)
      .subscribe((res: any) => {
      },
        (error) => {
        },
        () => {
          this.showMessage(this.getText('Report.ReportSetDefaultForAll'));
        });

  }

  public showParameterForm(printInfo: PrintInfo) {
    this.reportParameter.showDialog(printInfo);
  }

  public onOkParams(event: any) {
    this.previewReport(event.params);
  }

  private initViewer() {
    if (this.CurrentLanguage == "fa")
      Stimulsoft.Base.Localization.StiLocalization.setLocalizationFile("assets/reports/localization/fa.xml");

    if (this.CurrentLanguage == "en")
      Stimulsoft.Base.Localization.StiLocalization.setLocalizationFile("assets/reports/localization/en.xml");

    Stimulsoft.Base.StiLicense.key = "6vJhGtLLLz2GNviWmUTrhSqnOItdDwjBylQzQcAOiHlrzAZzmWmSnQQ4gKFiZ4LJpJv//QjFVXxcHAVbzZfXjyOGPmj/m+BEjr2Z14dWeqLFNGF74GELbTTKs2+Le/9cDIWdGNnOpEK2aGdYllauMPLQsiScC521JIEYSdOspiRHSLcegksxfNedJjyIjGlfI2YrddBRWGiO+uWOHE5oz9hLG8VPBSRo60KmgkscM5X+7+aQ+6vzKKOC2XB+e6BMQC5qNVBUblfGQR2EjNLZKmSJtvek7IbG/OK+XP0j2bwicyJUGC0pyLHqctr3BpcO/gA5LoVfuwqYG3klL//owBkObPPhJV1HD6XsHL0GDryssJFaDCQIyXMrOn7hNQNkEIyx+AJDNgf5XfxPgEgFsRhYCPYq7ccutg2by8duOxbF3xH0gL/uAQN275COXJBV3W62DSLM+o8azChG+Z7y0dF9f4whZ/SKD4DwNPUWK7osEPVwl5BY+0lkdqd67fatlrlc0QU/ZX9f5QcTKfl5ljuNc+kcqxmd9NND6Xzrw9gFsFqIWqqVo++DdoAZFStXMkOp/nTNBQMRA100k3vi2SbbiHq/gVimrQecUhWG0qU5zcemtVGDMs1ruXsoHX8pYX/rMJHH09qCWllVyBykkTLourYEig9g5fhKDYRV05aC0cWsbxR2nj9TH3SLmG4P2Px7uJsq6iOsnIHWuBMwk8oF7xPEugjw+x8lkjVVoV8WWBSdjIxGh4LviZXBEJm9FTJzYcnEHMZRh0uVE1g8crC+TfRVii7dcdZzeQklzyNY+0Q1/hRaIUs+mNPRiqG6YqEv3f+yG4ncxzkCWZDvXPox87y61jbg6Dg73X1RAwwvbIXuJVANbaDOefUELPmpz4SIpHx8zpLSmn1H1u0PolbsimLigcGw2bJQeuU++OBU74vJJde3JdoO6IOfmUJkoxprdszyknLm+zWgnC+jjaCtEZZuOIJqyuVPoqHRiFkqNjbddkvGMmj/4+2D6BdYQot9sEOW7iCgV4SvZ/efC0NlRX+Z+6PODwKJiO+Sen5aAlsJcL2jIUSAjgyS+7im7XTGlYKuRL59EQjA5HArO1ikJ0P/2pk4u91z2J8GRvTPu5BZUI9M0BLGLAVCFMte4JQCOr+f785RgjerSNCSgN4Mfa5+jDQAKTAVAO5tqT/SBEm0M5U1EylQ/fbseKt+dQ1/VzqlQ9SH14jtI0J97ACqk9SBt9xpTgBnJrBSTnnY21l2zWS7/2k5U9LPDJn0Lm32ueoDRFaM4JeK1HoSi2HvOYy1V1hU5pCe893QsBE/HOVp4UWu9lfiEWunHEEdPZOUPgc131KwJrM4K3DYiBbXl442TgbNLfz5IBnAw1NVabMXXyx2LOi6x35xw1YLMRYNWYE9QpocBhoFQtStd2OUZ5CqvxhXf+VaLK3hmm1GvlqpUK6LIDd3eyuQK4f0E7+zVSBaV6eSDI9YJC42Ee+Br8AByGYLRaFISpDculGt2nqwFL6cwltv1Xy11frJR2KqbR8sd6dI0V69XnwBziRzJq1SyAZd9bzClYSpA3ZYPN9ghdaHA+GZak0IYMokWLi6oYquOCRoy8f0sEQM2Uhw2x/E9tgyNoLZhDhrk805/VCsThI5fHn0YWVnmQZTrGkOwnoqLw3VHb7akUmNnjMlk/tD59bR2lgD+fnNuNsBYDDjJpg+fKmgf9araTPEIpuuanp53e6xodRYKIj4o4+39DrPK10eR4CDfSh5UShvnCZz+V0FAkIkoM92U1JTU59P4M4pzc8PswmS1rGTRaZMUrTYrjeGCHC9Hl0CTIR1/rQAx8iIcC3yVNCeiTJAmKMCl830O4GpEfduNHQgDrlsJC4q6RA7J2kUzW2WQvKFKH3bRH1hOc6LZK4DmwMGzXMKDKOxK0dzld2/ImRN6DbPacV/4d0HK06qBOFEgUJqXhMpV1JjsXVvmx/m2LCRgkD5vPEwcuiWtWde7tISLCEg6hjAV9+Hx6zOWpozg7aZMtikT+43uWakRkU/H+ITIGhqxuQhkZkmIddWrjD5lJtdUOSa0FWu969EDp4XB8dmUKSwyrkgOHZu6DutFW5ArtqhNejthWt/sV1FkSbvdd26zn1fSO4pDa4pDmcSo+l/4DChZbEyICc7IQrPjVuRUlVGuAVksZTBX+VYIip8LsJSFLHo7Dnn4QT3qDNIh8aAcY3fnHhph4G5ekbvGOw3+m1qqs8t0m89vdK7k8nJTw==";
  }

  public createFilters(params: ParameterInfo[], cfilter?: FilterExpression) {
    var filters: Filter[] = new Array<Filter>();
    if (params) {
      params.filter(p => p.controlType.toLowerCase() != 'querystring').forEach(function (param) {

        var operator = "";
        switch (param.operator.toLowerCase()) {
          case "eq":
            operator = " == {0}";
            break;
          case "neq":
            operator = " != {0}";
            break;
          case "lte":
            operator = " <= {0}";
            break;
          case "gte":
            operator = " >= {0}";
            break;
          case "lt":
            operator = " < {0}";
            break;
          case "gt":
            operator = " > {0}";
            break;
          case "contains":
            operator = ".Contains({0})";
            break;
          case "doesnotcontain":
            operator = ".IndexOf({0}) == -1";
            break;
          case "startswith":
            operator = ".StartsWith({0})";
            break;
          case "endswith":
            operator = ".EndsWith({0})";
            break;
          default:
            operator = " == {0}";
        }

        var value = param.value ? param.value : "";
        var filter = new Filter(param.fieldName, value, operator, param.dataType);
        filters.push(filter);
      });
    }


    if (cfilter) {
      if (filters.findIndex(f => f.FieldName.toLowerCase() == cfilter.filter.FieldName.toLowerCase()) == -1)
        filters.push(cfilter.filter);

      cfilter.children.forEach(function (f) {
        if (filters.findIndex(f => f.FieldName.toLowerCase() == f.FieldName.toLowerCase()) == -1)
          filters.push(f.filter);
      });
    }

    var filterExpBuilder = new FilterExpressionBuilder();
    var filterExp = filterExpBuilder.And(filters)
      .Build();

    return filterExp;

  }

  saveAsReport() {
    if (this.currentReportId) {
      this.showSaveAsDialog = true;
      this.reportForm.controls.reportName.setValue("");
      this.reportForm.reset();

    }
  }

  okSaveAsClick() {

    var localReport = new LocalReportInfo();
    localReport.template = "";
    localReport.reportId = this.currentReportId;
    var localId = this.CurrentLanguage == 'fa' ? 2 : 1;
    localReport.localeId = localId;
    localReport.caption = this.reportForm.controls.reportName.value;

    var url = ReportApi.Reports;
    this.reportingService.saveAsReport(url, localReport).subscribe((response: any) => {
      this.showMessage(this.getText('Report.SaveAsIsOk'));

      //reload treeview
      var url = ReportApi.ReportsHierarchy;
      if (this.currentViewId) {
        url = String.Format(ReportApi.ReportsByView, this.currentViewId);
      }

      this.reportingService.getAll(url)
        .subscribe((res: any) => {
          this.treeData = <Array<TreeItem>>res.body;
        });
      //reload treeview

      this.showSaveAsDialog = false;
    }, (error => {
        this.errorHandlingService = ServiceLocator.injector.get(ErrorHandlingService);
        this.showMessage(this.errorHandlingService.handleError(error));
    }));
  }

  cancelReportForm() {
    this.showSaveAsDialog = false;
  }

  /**
   * آماده سازی گزارش برای نمایش در نمایشگر یا نمایش فرم پارامترها
   * @param formParams
   */
  public prepareReport(formParams: Array<ReportParamComponent>) {
    var url = String.Format(ReportApi.Report, this.currentReportId);
    this.reportingService.getAll(url).subscribe((res: Response) => {

      var printInfo: PrintInfo = <any>res.body;
      this.currentPrintInfo = printInfo;

      if (printInfo.parameters.length > 0) {
        var formPrameters = this.setParamterFromForm(formParams);
        //if (formParams == undefined || formParams.length == 0)        
        if (formPrameters.length == 0 || formPrameters.findIndex(p=>p.value == null) > -1)
          this.showParameterForm(printInfo);
        else {         
          this.previewReport(formPrameters);
        }
      }
      else {
        this.previewReport();
      }
    });
  }

  setParamterFromForm(formParams: Array<ReportParamComponent>): Array<ParameterInfo> {
    var paramArrays = new Array<ParameterInfo>();

    this.currentPrintInfo.parameters.forEach(function (param) {
      var fparam = formParams.filter(f => f.ParamName == param.name);
      if (fparam.length > 0) {
        var paramInfo: ParameterInfo = new ParameterInfo();
        paramInfo.fieldName = param.fieldName;

        paramInfo.controlType = param.controlType;
        paramInfo.id = param.id;
        paramInfo.defaultValue = param.defaultValue ? param.defaultValue : "";
        paramInfo.captionKey = param.captionKey;
        paramInfo.operator = param.operator;
        paramInfo.dataType = param.dataType;
        paramInfo.descriptionKey = param.descriptionKey;
        paramInfo.name = param.name;
        paramInfo.value = fparam[0].ParamValue;

        paramArrays.push(paramInfo);
      }
    });

    return paramArrays;
  }

  /**
   * نمایش دیالوگ گزارشات
   * @param params
   */
  public previewReport(params: ParameterInfo[] = null) {
    this.showReportViewer = true;
    this.showReportDesigner = false;
    var serviceUrl = environment.BaseUrl + "/";

    var urlIsComplete: boolean = false;
    if (this.DefaultServiceUrl && this.currentDefaultReportId == this.currentPrintInfo.id)
    {
      serviceUrl = this.DefaultServiceUrl;
      urlIsComplete = true;
    }
    else
      serviceUrl += this.currentPrintInfo.serviceUrl;

    var filterExpression: FilterExpression;
    var urlParameters = new Array<ReportParamComponent>();

    //remove parameter that ParamInFilter == false
    if (this.ViewIdentity) {
      this.ViewIdentity.params.forEach(function (p) {
        if (p.ParamType && p.ParamType.toLowerCase() == "urlparameter") {
          urlParameters.push(p);
        }

        if (!p.ParamInFilter && params) {
          var index = params.findIndex(f => f.name === p.ParamName);
          if (index >= 0)
            params.splice(index, 1);
        }        
      });
    }

    filterExpression = this.currentFilter;//this.createFilters(params, this.currentFilter);

    if (!urlIsComplete) {
      if (params) {
        serviceUrl = this.changeServiceUrl(serviceUrl, params);
      }

      if (urlParameters && urlParameters.length > 0) 
        serviceUrl = this.replaceServiceUrlParams(serviceUrl, urlParameters);
      
      if (params && params.length > 0) {
        var routeParameters = new Array<ReportParamComponent>();
        params.filter(p => p.controlType != 'QueryString').forEach(function (p) {          
          var param = new ReportParamComponent();
          param.ParamValue = p.value;
          routeParameters.push(param);          
        });

        serviceUrl = this.replaceServiceUrlParams(serviceUrl, routeParameters);
      }
    }

    if(this.qReport)
    {
      this.updateDateColumnByMetadata()
    }

    var sort = this.currentSort;
    var quickFilter = this.currentQuickFilter;

    if (this.qReport)
      this.currentQuickReportViewInfo.reportViewSetting = this.ViewSettings;

    if (!this.Parameters || this.Parameters.length == 0) {
      this.reportingService.getAllForReport(serviceUrl,
      sort, filterExpression, quickFilter, OperationId.PrintPreview).subscribe((response: any) => {

        var reportData = {
          rows: response.body,
          parameters: params
        };

        var viewerIsCloseable: boolean = false;
        if (this.currentReportId != this.currentDefaultReportId)
          viewerIsCloseable = true;

        var reportTemplate: string;
        if (this.qReport)
          reportTemplate = this.quickReportJsonDesign;
        else
          reportTemplate = this.currentPrintInfo.template;

        this.tabsComponent.openTab(this.currentReportName, reportTemplate,
          reportData, viewerIsCloseable, true, false, this.currentReportId, this.currentPrintInfo.code, this, this.qReport, this.currentQuickReportViewInfo);

      });
    }
    else {
      this.reportingService.getAllByParamsForReport(serviceUrl,this.Parameters,
      sort, filterExpression, quickFilter, OperationId.PrintPreview).subscribe((response: any) => {

        var reportData = {
          rows: response.body.comparativeItems,
          parameters: params
        };

        var viewerIsCloseable: boolean = false;
        if (this.currentReportId != this.currentDefaultReportId)
          viewerIsCloseable = true;

        var reportTemplate: string;
        if (this.qReport)
          reportTemplate = this.quickReportJsonDesign;
        else
          reportTemplate = this.currentPrintInfo.template;

        this.tabsComponent.openTab(this.currentReportName, reportTemplate,
          reportData, viewerIsCloseable, true, false, this.currentReportId, this.currentPrintInfo.code, this, this.qReport, this.currentQuickReportViewInfo);

      });
    }
  }

  updateDateColumnByMetadata() {
    this.metadataKey = String.Format(SessionKeys.MetadataKey, this.currentQuickReportViewInfo.viewId ? this.currentQuickReportViewInfo.viewId.toString() : '', this.currentlang);
    var metadata = this.bStorageService.getMetadata(this.metadataKey);
    var item = JSON.parse(metadata != null ? metadata.toString() : "");
    var columns = <Array<any>>item.columns;
    columns.filter(c => c.dotNetType.toLowerCase() == "system.date" || c.dotNetType.toLowerCase() == "system.datetime").forEach((col) => {
      var index = this.currentQuickReportViewInfo.columns.findIndex(c => c.name.toLowerCase() == col.name.toLowerCase());
      if(index > -1)
        this.currentQuickReportViewInfo.columns[index].type = col.type;
    });    
  }

  /**
   * پارامتر های آدرس روت را در آدرس جایگزین میکند
   * @param url
   * @param params
   */
  replaceServiceUrlParams(url: string, params: ReportParamComponent[]): string {
    
    if (params.length > 0) {
      var args = new Array<any>();
      params.forEach((item) => {
        if(item.ParamValue)
          args.push(item.ParamValue);
      });

      if (args.length > 0)
        url = String.Format(url, args);
    }

    return url;
  }

  /**
   * این تابع آدرس روت مربوط به دیتای گزارش را فرمت دهی میکند
   * @param url
   * @param params
   */
  changeServiceUrl(url: string, params: ParameterInfo[]): string {   

    var queryStringParams = params.filter(p => p.controlType === 'QueryString');
    if (queryStringParams.length > 0)
      url += '?';
    else
      return url;
    var itemCount = 0;
    queryStringParams.forEach(function (item) {
      if (itemCount > 0 && itemCount < queryStringParams.length) url += '&';
      url += item.fieldName + '=' + item.value;
      itemCount++;
    });
    return url;
  }
   
  saveDesignOfReport(id: string) {    
    var designer = new Stimulsoft.Designer.StiDesigner(null, "StiDesigner" + id.replace('designerTab', ''), false);
    designer.invokeSaveReport();
  }

  /**
   * محیط طراحی را در تب باز شده رفرش میکند
   * @param designer
   */
  updateTemplateInTab(designer: any) {
    var tab = this.tabsComponent.dynamicTabs.find(t => t.Id == "designerTab" + this.currentReportId);
    if (tab) {
      var designData = designer.report.saveToJsonString();
      tab.template = designData;
    }
  }

  /** محیط طراحی گزارش را نمایش میدهد */
  designReport() {
    var current = this.currentReportId;
    var currentReportName = this.currentReportName;

    if (this.qReport)
      current = -100;

    var designer = new Stimulsoft.Designer.StiDesigner(null, "StiDesigner" + current, false);

    var tabIsOpen = this.tabsComponent.openTab(this.currentReportName, null, null,
      true, false, true, this.currentReportId, this.currentReportId, designer);

    if (!tabIsOpen) return;

    var url = String.Format(ReportApi.ReportDesign, this.currentReportId);
    this.showReportViewer = false;
    this.showReportDesigner = true;

    this.reportingService.getAll(url).subscribe((res: Response) => {

      var printInfo: PrintInfo = <any>res.body;

      var options = new Stimulsoft.Designer.StiDesignerOptions();
      options.appearance.fullScreenMode = true;
      options.toolbar.showPreviewButton = false;
      options.toolbar.showFileMenu = false;
      options.components.showImage = false;
      options.components.showShape = false;
      options.components.showPanel = false;
      options.components.showCheckBox = false;
      options.components.showSubReport = false;


      var rpt = new Stimulsoft.Report.StiReport();
      var reportTemplate: string;

      reportTemplate = printInfo.template;


      if (this.qReport) {
        reportTemplate = this.quickReportJsonDesign;
        current = -100;
      }

      rpt.load(reportTemplate);
      rpt._reportFile = currentReportName;
      designer.report = rpt;

      designer.renderHtml('designerTab' + current);

      this.updateTemplateInTab(designer);

      document.title = this.getText('App.Name');
    });

    var currentId = this.currentReportId;
    var service = this.reportingService;
    var localId = this.CurrentLanguage == 'fa' ? 2 : 1;
    var thisComponent = this;
    // Assign the onSaveReport event function
    designer.onSaveReport = function (e: any) {      
      var jsonStr = e.report.saveToJsonString();

      var localReport = new LocalReportInfo();
      localReport.template = jsonStr;
      localReport.reportId = currentId;
      localReport.localeId = localId;
      thisComponent.updateTemplateInTab(designer);

      //var url = String.Format(ReportApi.Report, thisComponent.currentReportId);
      var url = String.Format(ReportApi.Report, currentId);
      service.saveReport(url, localReport).subscribe((response: any) => {

        thisComponent.showMessage(thisComponent.getText('Report.SaveIsOk'));
      }, (error => {
          this.errorHandlingService = ServiceLocator.injector.get(ErrorHandlingService);
          thisComponent.showMessage(this.errorHandlingService.handleError(error));
      }));

    }
  }

  /**
   * حذف گزارش
   * @param deleteFlag
   */
  deleteReport(deleteFlag: boolean) {
    this.deleteConfirm = false;
    if (deleteFlag) {
      var reportId = this.currentReportId;
      var url = String.Format(ReportApi.Report, reportId);

      this.reportingService.deleteReport(url).subscribe((response: any) => {
        this.showMessage(this.getText('Report.ReportDeleted'));
        this.tabsComponent.closeTabByReportId(this.currentReportId);
        this.currentReportId = null;
        this.disEnAllButtons(true);

        //reload treeview
        var url = ReportApi.ReportsHierarchy;
        if (this.currentViewId) {
          url = String.Format(ReportApi.ReportsByView, this.currentViewId);
        }

        this.reportingService.getAll(url)
          .subscribe((res: any) => {
            this.treeData = <Array<TreeItem>>res.body;
          });
      }, (error => {
          this.errorHandlingService = ServiceLocator.injector.get(ErrorHandlingService);
          this.showMessage(this.errorHandlingService.handleError(error));
      }));
    }
  }

  showDeleteConfirm() {
    this.deleteConfirm = true;
  }

  closeDialog() {
    this.active = false;
  }

  /**
  * تابعی برای تشخیص کلاس های مربوط به درخت گزارشات برای نمایش آیکن ها
  * @param dataItem
  */
  public iconClass(dataItem: any): any {
    return {
      'k-i-change-manually': !dataItem.isGroup && !dataItem.isSystem,
      'k-i-ascx': dataItem.isGroup == false && dataItem.isSystem,
      'k-i-folder': dataItem.isGroup == true,

    };
  }

  /**
   * تابعی برای ست کردن کلاس های مربوط به درخت گزارشات برای نمایش آیکن ها
   * @param dataItem
   */
  public setClass(dataItem: any): any {

    var cssClass = '';
    if (dataItem.isGroup)
      cssClass = 'rep-folder';
    if (!dataItem.isGroup && dataItem.isSystem)
      cssClass = 'rep-system';
    if (!dataItem.isGroup && !dataItem.isSystem)
      cssClass = 'rep-user';

    if (dataItem.id == this.currentDefaultReportId)
      cssClass += ' def';

    return cssClass;
  }

  /**
   * متد نمایش مستقیم گزارش فوری
   * @param viewInfo
   * @param reportManager
   */
  public directShowReport()  {

    var viewId = this.ViewIdentity.ViewID;
    var userId = this.UserId;       

    var jsonString = this.bStorageService.getQuickReportSetting(viewId, userId.toString());
    if (jsonString) {
      var res = <QuickReportConfigInfo>JSON.parse(jsonString);
      this.showDefaultReport(res);
      return true;
    }
    
    return false;

  }
     
  /**
   * این متد براساس گزارش دیفالت شده از نوع گزارش فوری نمایش میدهد
   * @param viewInfo
   */
  public showDefaultReport(viewInfo: QuickReportConfigInfo = null) {
    var showQReport: boolean = false;
    var treeData: Array<TreeItem> = null;
    var url = String.Format(ReportApi.ReportsByView, this.ViewIdentity.ViewID);

    if (viewInfo) {
      var dpi_x = document.getElementById('dpi').offsetWidth;
      viewInfo.inchValue = dpi_x;
     }

    this.reportingService.getAll(url)
      .subscribe((res: any) => {
        treeData = <Array<TreeItem>>res.body;
        if (treeData.filter((t: any) => t.isDynamic === true).length > 0)
          showQReport = true;
        var defaultReport = treeData.filter((t: any) => t.isDefault === true)[0];
        this.switchReport(showQReport, treeData, defaultReport, viewInfo);
      });
  }

  /**
   * این متد براساس گزارش دیفالت شده طراجی شده را نمایش میدهد
   * @param viewInfo
   */
  public showDefaultDesignedReport() {
    var showQReport: boolean = false;
    var treeData: Array<TreeItem> = null;
    var url = String.Format(ReportApi.ReportsByView, this.ViewIdentity.ViewID);       

    this.reportingService.getAll(url)
      .subscribe((res: any) => {
        treeData = <Array<TreeItem>>res.body;        
        var defaultReport = treeData.filter((t: any) => t.isDefault === true && t.isDynamic === false)[0];

        treeData = treeData.filter((t: any) => t.id !== this.quickReportFolderId && t.isDynamic === false);
        this.switchReport(showQReport, treeData, defaultReport,null);
      });
  }

  /**
   * در این تابع تصمیم برای نمایش گزارش فوری یا گزارش طراحی شده انجام میشود
   * @param showQReport
   * @param treeData
   * @param defReport
   * @param viewInfo
   */
  switchReport(showQReport: boolean, treeData: any, defReport: any, viewInfo: QuickReportConfigInfo) {
    var columnIndex = 0;

    var params: Array<ReportParamComponent> = null;
    if (this.ViewIdentity.params.length > 0)
      params = this.ViewIdentity.params.toArray();

    if (showQReport) {

      viewInfo.title = defReport.caption;
      viewInfo.viewId = Number(this.ViewIdentity.ViewID);
      viewInfo.reportViewSetting = this.ViewSettings;
      this.qReport = true;

      //get parameters for quick report
      var url = String.Format(ReportApi.Report, defReport.id);
      this.reportingService.getAll(url).subscribe((res: Response) => {

        var printInfo: PrintInfo = <any>res.body;
        this.currentPrintInfo = printInfo;
        if (printInfo.parameters.length > 0) {
          var reportParameters = printInfo.parameters;
          params.forEach(function (p) {
            if (p.ParamReportVisible == false || !p.ParamInFilter) {
              var index = reportParameters.findIndex(f => f.name === p.ParamName);
              if (index >= 0)
                reportParameters.splice(index, 1);
            }

          });
          viewInfo.parameters = reportParameters;
        }

        var url = String.Format(ReportApi.EnvironmentQuickReport, viewInfo.inchValue);

        this.reportingService.putEnvironmentUserQuickReport(url, viewInfo)
          .subscribe((response: any) => {

            var design = response.designJson;
            var outOfPage = response.outOfPage;
            if (outOfPage) {
              this.showMessage(this.getText('Report.ReportIsOutOfPage'));
            }
            var id = this.ViewIdentity.ViewID;
            this.showQuickReport(id, params, this.Filter, this.Sort, design, treeData, viewInfo,this.QuickFilter);
          });

      });


    }
    else {
      if (this.ViewIdentity.params.length > 0)
        params = this.ViewIdentity.params.toArray();
      this.showDialog(this.ViewIdentity.ViewID, params, this.Filter, this.Sort, treeData);
    }
  }

 


}


