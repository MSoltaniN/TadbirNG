import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, NgZone, OnInit, Output, Renderer2, ViewChild } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { DialogService } from '@progress/kendo-angular-dialog';
import { GridComponent, SelectableSettings } from '@progress/kendo-angular-grid';
import { SettingService } from '@sppc/config/service';
import { AutoGeneratedGridComponent, FilterExpression, String } from '@sppc/shared/class';
import { QuickSearchConfig } from '@sppc/shared/models';
import { BrowserStorageService, GridService, MetaDataService } from '@sppc/shared/services';
import { UserValueApi } from '@sppc/shared/services/api/userValueApi';
import { UserValueService } from '@sppc/shared/services/userValue.service';
import { ToastrService } from 'ngx-toastr';
import { lastValueFrom } from 'rxjs';
import { SearchItem } from '../selectForm/selectForm.component';

@Component({
  selector: 'user-value-form',
  templateUrl: './user-value-form.component.html',
  styleUrls: ['./user-value-form.component.css']
})
export class UserValueFormComponent extends AutoGeneratedGridComponent implements OnInit {

  @ViewChild(GridComponent, {static: true}) grid: GridComponent;

  constructor(
    public toastrService: ToastrService,
    public translate: TranslateService,
    public gridService: GridService,
    public bStorageService: BrowserStorageService,
    public cdref: ChangeDetectorRef,
    public renderer: Renderer2,
    public metadata: MetaDataService,
    private userValueService: UserValueService,
    public dialogService: DialogService,
    public settingService: SettingService,
    public ngZone: NgZone,
    public elem: ElementRef,
  ) {
    super(
      toastrService,
      translate,
      gridService,
      renderer,
      metadata,
      settingService,
      bStorageService,
      cdref,
      ngZone,
      elem,
      UserValueApi.Categories,
      UserValueApi.CategoryValues
    );
  }

  categoriesList: Array<SearchItem> = [];
  selectedCategory: number;

  tempViewId: number;
  searchValue: string;
  title: string;

  quickSearchFilter: FilterExpression;
  currentSetting: QuickSearchConfig;
  public selectableSettings: SelectableSettings = {
    checkboxOnly: true,
    mode: "single"
  };

  @Input() categoryId: number;

  @Output() result: EventEmitter<any> = new EventEmitter();
  @Output() cancel: EventEmitter<any> = new EventEmitter();
  @Output() selectedKey: EventEmitter<any> = new EventEmitter();
  @Output() setCategoriesList: EventEmitter<any> = new EventEmitter();

  ngOnInit(): void {
    this.getCategories();

    if (this.categoryId)
      this.getDataUrl = String.Format(UserValueApi.CategoryValues,this.categoryId);
    else
      this.getDataUrl = String.Format(UserValueApi.CategoryValues,1);

    this.reloadGrid();
  }

  async getCategories() {
    this.categoriesList = await lastValueFrom(this.userValueService.getCategories());
    this.setCategoriesList.emit(this.categoriesList)
  }

  changeCategory() {}

  rowDoubleClickHandler() {}

  onCancel(): void {
    this.cancel.emit();
  }

  escPress() {
    this.cancel.emit();
  }

  onSelectedKeysChange(e) {
    let item = this.rowData?.data.find(i => i.id == e);
    this.selectedKey.emit(item)
  }

  onSelectRow() {}
}
