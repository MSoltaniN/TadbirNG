import { ChangeDetectorRef, Component, ElementRef,Input,NgZone, OnInit, Renderer2, ViewChild } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { DialogService } from '@progress/kendo-angular-dialog';
import { GridComponent } from '@progress/kendo-angular-grid';
import { SettingService } from '@sppc/config/service';
import { AutoGeneratedGridComponent, Filter} from '@sppc/shared/class';
import { BrowserStorageService, GridService, MetaDataService } from '@sppc/shared/services';
import { UserValueApi } from '@sppc/shared/services/api/userValueApi';
import { UserValueService } from '@sppc/shared/services/userValue.service';
import { ToastrService } from 'ngx-toastr';
import { UserValueComponent } from './user-value.component';

@Component({
  selector: 'user-value-filter',
  template: `
    <div class="form-group userValueFilters">
        <input type="checkbox"
        [(ngModel)]="bankNameFilter"
        (click)="onBankNameFilterClick($event)"
        id="bankNameFilter"
        class="k-checkbox"
        [checked]="bankNameFilter">
        <label for="bankNameFilter" class="control-label">{{ "CheckBook.BankName" | translate }}</label>
        <fieldset [disabled]="!bankNameFilter" [ngClass]="{'disabled': !bankNameFilter}">
            <div class="search-box">
            <input
                class="k-textbox sppc-width-100 prevent-dbclick"
                [(ngModel)]="searchValue"
                (keydown.enter)="openFilterDialog()"
                readonly
            />
            <span class="k-icon k-i-search" (click)="openFilterDialog()"></span>
            </div>
        </fieldset>
    </div>
  `,
  styles: [`
    ::ng-deep .search-box {
        position: relative;
    }
    ::ng-deep .search-block lable{
        align-self: start;
    }
    ::ng-deep .tRtl .search-box span {
        position: absolute;
        top: 4px;
        left: 4px;
        font-size: 22px;
    }
    ::ng-deep .tLtr .search-box span {
        position: absolute;
        top: 4px;
        right: 4px;
        font-size: 22px;
    }
    ::ng-deep .search-box span:hover {
        opacity: 0.5;
    }
    .userValueFilters {
        display: flex;
        margin-inline-end: 25px;
        gap: 5px;
        align-items: center;
    }
    @media screen and (max-width:620px)  {
        .form-group {
            display: flex;
            flex-direction: column;
            align-items: start;
        }
    }
    .disabled{
        pointer-events: none;
        opacity: 0.8;
    }
    
    input{
        vertical-align: middle;
    }
    
    label {
        margin: 5px 0;
    }
  `]
})
export class UserValueFilterComponent extends AutoGeneratedGridComponent implements OnInit {

  constructor(
    public toastrService: ToastrService,
    public translate: TranslateService,
    public gridService: GridService,
    public bStorageService: BrowserStorageService,
    public cdref: ChangeDetectorRef,
    public renderer: Renderer2,
    public metadata: MetaDataService,
    public dialogService: DialogService,
    public settingService: SettingService,
    public ngZone: NgZone,
    public elem: ElementRef,
  ) {
    super(
      toastrService,
      translate,
      gridService,
      renderer,
      metadata,
      settingService,
      bStorageService,
      cdref,
      ngZone,
      elem,
      UserValueApi.Categories,
      UserValueApi.CategoryValues
    );
  }

  @Input() parentComponent;
  bankNameFilter = false;
  userValueFilter: Filter[];
  searchValue: string;

  ngOnInit(): void {
      
  }
  
  // Events
  onBankNameFilterClick(e) {
    setTimeout(() => {
      if (this.bankNameFilter) {
        if (this.userValueFilter?.length) {
          this.parentComponent.defaultFilter = this.userValueFilter;
          this.parentComponent.reloadGrid();
        }
      } else {
        if (this.parentComponent.defaultFilter?.length) {
          this.parentComponent.defaultFilter = [];
          this.parentComponent.reloadGrid();
        }
      }
    }, 0);
  }

  openFilterDialog() {
    this.dialogRef = this.dialogService.open({
      title: this.getText("UserValueFilter.Title"),
      content: UserValueComponent
    });
    this.dialogModel = this.dialogRef.content.instance;
    this.dialogModel.categoryId = '1';
    this.dialogModel.searchValue = this.searchValue;
    this.dialogModel.dialogMode = true;
    this.editDataItem = undefined;

    if (this.reportFilter) {
      this.dialogModel.filter = JSON.parse(JSON.stringify(this.reportFilter));
    }

    if (this.reportQuickFilter) {
      this.dialogModel.quickFilter = JSON.parse(
        JSON.stringify(this.reportQuickFilter)
      );
    }

    this.dialogRef.content.instance.result.subscribe((result) => {
      if (result) {
        this.selectedRows = [];
        this.dialogModel.dialogMode = false;
        this.onUserValueFilter(result)
      }
    });

    this.dialogRef.content.instance.cancel.subscribe((result) => {
      this.dialogModel.dialogMode = false;
      this.dialogRef.close();
    });
  }

  onUserValueFilter(data) {
    if (data.dataItem) {
      this.userValueFilter = [];
      this.userValueFilter.push(
        new Filter("bankName",
            data.dataItem.value,
            "== {0}",
            "System.String"
          )
      );
      this.parentComponent.defaultFilter = this.userValueFilter;
      this.searchValue = data.dataItem.value;
      this.parentComponent.reloadGrid();
      this.dialogRef.close();
    }
  }

}