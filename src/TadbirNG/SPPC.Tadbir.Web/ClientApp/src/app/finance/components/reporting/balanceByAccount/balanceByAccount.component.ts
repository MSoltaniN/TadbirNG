import { Component, OnInit, OnDestroy, ChangeDetectorRef, Renderer2, NgZone, ViewChild, ElementRef } from '@angular/core';
import { String, AutoGeneratedGridComponent, Filter, FilterExpressionOperator, FilterExpression, GridOrderBy } from '@sppc/shared/class';
import { TranslateService } from '@ngx-translate/core';
import { ToastrService } from 'ngx-toastr';
import { MetaDataService, BrowserStorageService, ReportingService, GridService, SessionKeys, LookupService } from '@sppc/shared/services';
import { SettingService } from '@sppc/config/service';
import { FormBuilder, FormGroup } from '@angular/forms';
import { DialogService, DialogRef } from '@progress/kendo-angular-dialog';
import { Entities, MessageType, Layout } from '@sppc/shared/enum/metadata';
import { RTL } from '@progress/kendo-angular-l10n';
import { ViewName, BalanceByAccountPermissions } from '@sppc/shared/security';
import { VoucherApi, BalanceByAccountApi, AccountApi, DetailAccountApi, CostCenterApi, ProjectApi } from '@sppc/finance/service/api';
import { VoucherStatusResource, BranchScopeResource } from '@sppc/finance/enum';
import { Item } from '@sppc/shared/models';
import { LookupApi } from '@sppc/shared/services/api';
import { SelectFormComponent, SppcDateRangeSelector } from '@sppc/shared/controls';
import { DetailAccount, CostCenter, Project, Account } from '@sppc/finance/models';
import { SettingKey, ReloadStatusType } from '@sppc/shared/enum';
import { BalanceOptions } from '@sppc/finance/enum/balance';
import { VoucherService, AccountInfo, DetailAccountInfo, CostCenterInfo, ProjectInfo, AccountService, DetailAccountService, CostCenterService, ProjectService } from '@sppc/finance/service';
import { AccountBookComponent } from '../accountBook/accountBook.component';
import { ReportManagementComponent } from '@sppc/shared/components/reportManagement/reportManagement.component';
import { QuickReportSettingComponent } from '@sppc/shared/components/reportManagement/QuickReport-Setting.component';
import { GridComponent, RowArgs } from '@progress/kendo-angular-grid';
import { ViewIdentifierComponent, ReportViewerComponent } from '@sppc/shared/components';
import { ReloadOption } from '@sppc/shared/class/reload-option';
import { ShareDataService } from '@sppc/shared/services/share-data.service';
import * as moment from 'jalali-moment';
import { OperationId } from '@sppc/shared/enum/operationId';
import { BranchScopeType, VoucherStatusType } from '@sppc/finance/enum/shared';
import { Persist, SavePersist } from '@sppc/shared/decorator/persist.decorator';
import { LoadPersist } from '@sppc/shared/decorator/load-persist.decorator';


export function getLayoutModule(layout: Layout) {
  return layout.getLayout();
}

@LoadPersist()
@Component({
  selector: 'sppc-balance-account',
  templateUrl: './balanceByAccount.component.html',
  styleUrls: ['./balanceByAccount.component.css'],
  providers: [{
    provide: RTL,
    useFactory: getLayoutModule,
    deps: [Layout]
  }]
})

export class BalanceByAccountComponent extends AutoGeneratedGridComponent implements OnInit, OnDestroy  {

  voucherStatus: Array<Item> = [
    { value: VoucherStatusResource.Committed, key: VoucherStatusType.Committed },
    { value: VoucherStatusResource.Finalized, key: VoucherStatusType.Finalized },
    { value: VoucherStatusResource.Confirmed, key: VoucherStatusType.Confirmed },
    { value: VoucherStatusResource.Approved, key: VoucherStatusType.Approved },
    { value: VoucherStatusResource.AllVouchers, key: VoucherStatusType.AllVouchers }
  ]

  branchScope: Array<Item> = [
    { value: BranchScopeResource.CurrentBranch, key: BranchScopeType.CurrentBranch  },
    { value: BranchScopeResource.CurrentBranchAndSubsets, key: BranchScopeType.CurrentBranchAndSubsets},
  ]

  gridColumnsRow: any[] = [];
  fromDate: Date;
  toDate: Date;
  initializeDate: boolean = true;

  fromVoucher: string;
  toVoucher: string;
  isDefaultBtn: boolean = true;
  reportType: string = '1';
  reportBy: Array<Item> = [];

  @Persist() selectedReportBy: string = ViewName.Account.toString();

  @Persist() selectedVoucherStatus: string = VoucherStatusType.Committed;

  @Persist() selectedBranchScope: string = BranchScopeType.CurrentBranch;

  isApplyBranchSeparation: boolean = false;
  @Persist() selectedBranchSeparation: boolean = false;

  @Persist() showZeroBalanceItems: boolean;
  
  @Persist() useClosingVoucher: boolean;

  @Persist() useClosingTempVoucher: boolean;

  @Persist() openingAsFirstVoucher: boolean;

  startTurnoverAsInitBalance: boolean;

  referenceValues: string[];
  @Persist() selectedReferences: string[];


  @Persist() chbAccount: boolean = true;
  @Persist() chbDetailAccount: boolean = false;
  @Persist() chbCCenter: boolean = false;
  @Persist() chbProject: boolean = false;
  accountLevelList: Array<any> = [];
  detailAccountLevelList: Array<any> = [];
  cCenterLevelList: Array<any> = [];
  projectLevelList: Array<any> = [];
  @Persist() selectedAccount: Account;
  @Persist() selectedDetailAccount: DetailAccount;
  @Persist() selectedCCenter: CostCenter;
  @Persist() selectedProject: Project;
  @Persist() selectedAccountName: string;
  @Persist() selectedDetailAccountName: string;
  @Persist() selectedCCenterName: string;
  @Persist() selectedProjectName: string;

  @Persist() selectedAccountLevel: number;
  @Persist() selectedDetailAccountLevel: number;
  @Persist() selectedCCenterLevel: number;
  @Persist() selectedProjectLevel: number;
  
  selectedAccountInit: boolean;

  isTestBalanceParams: boolean;
  dialogRef: DialogRef;
  dialogModel: any;

  param: any;  
  paramChanged: boolean;

  totalRow: any;
  clickedRowItem: any;

  breadCrumbList: Array<any> = [];
  displayTypeName: string;

  breadCrumbAdded: boolean = false;
  typeViewId: number;  

  private docClickSubscription: any;

  @ViewChild(GridComponent) grid: GridComponent;
  @ViewChild(ViewIdentifierComponent) viewIdentity: ViewIdentifierComponent;
  @ViewChild(ReportViewerComponent) viewer: ReportViewerComponent;
  @ViewChild(ReportManagementComponent) reportManager: ReportManagementComponent;
  @ViewChild(QuickReportSettingComponent) reportSetting: QuickReportSettingComponent;
  @ViewChild(SppcDateRangeSelector) dateRange: SppcDateRangeSelector;

  constructor(public toastrService: ToastrService, public translate: TranslateService, public dialogService: DialogService, public gridService: GridService,
    public cdref: ChangeDetectorRef, public renderer: Renderer2, public metadata: MetaDataService, public bStorageService: BrowserStorageService, public voucherService: VoucherService,
    public settingService: SettingService, public reportingService: ReportingService, public ngZone: NgZone, public formBuilder: FormBuilder, public lookupService: LookupService,
    public accountService: AccountService, private shareDataService: ShareDataService,public elem:ElementRef,
    public detailAccountService:DetailAccountService,public costCenterService:CostCenterService,public projectService:ProjectService) {
    super(toastrService, translate, gridService, renderer, metadata, settingService, bStorageService, cdref, ngZone,elem);

    if (this.shareDataService.sharingData)
      this.initializeDate = false;
  }

  ngOnInit() {
    this.entityName = Entities.BalanceByAccount;
    this.viewId = ViewName[this.entityTypeName];
    debugger;
    this.fillByDefaultValues();

    var balanceAccountParam = this.shareDataService.sharingData;  
    this.isTestBalanceParams = balanceAccountParam &&
      (balanceAccountParam.viewId == ViewName[Entities.TestBalance6Column] ||
        balanceAccountParam.viewId == ViewName[Entities.TestBalance2Column] ||
        balanceAccountParam.viewId == ViewName[Entities.TestBalance4Column] ||
        balanceAccountParam.viewId == ViewName[Entities.TestBalance8Column]);
    

    var promise = new Promise((resolve) => {
      this.showloadingMessage = false;
      this.useReloadParameter = true;
      this.getFirstAndLastVoucherNo();
      this.getReportByItems();
      this.getAccountItemLevels(true, ViewName.Account);

      if (this.isTestBalanceParams) {
        
        this.getAccountItemLevels(true, ViewName.DetailAccount);
        this.getAccountItemLevels(true, ViewName.CostCenter);
        this.getAccountItemLevels(true, ViewName.Project);
      }

    this.settingService.getSettingById(SettingKey.FinanceReportConfig).subscribe((res) => {
      if (res) {
        this.openingAsFirstVoucher = res.values.openingAsFirstVoucher;
        this.startTurnoverAsInitBalance = res.values.startTurnoverAsInitBalance;
      }
    });

      this.fillReferences();
      resolve(true);
    });       

    promise.then(() => {     

      this.fromDate = this.FiscalPeriodStartDate;
      this.toDate = this.FiscalPeriodEndDate;     
        
      if (this.isTestBalanceParams) {
        debugger;
        this.fillInputParameters(balanceAccountParam);  

        this.accountService.getAccountById(balanceAccountParam.account.accountId).subscribe((account) => {
          
          this.selectedAccount = account;
          
          setTimeout(() => {
            this.updateBreadCrumb(this.accountLevelList,account,this.selectedAccountLevel);
            this.getReportData();
          }
            , 100)
        });

        this.shareDataService.sharingData = null;
      }      
     
    })   
    
    if(this.selectedAccount)
    {
      this.selectedAccountInit = true;
    }

    this.cdref.detectChanges();
    
  }

  fillByDefaultValues()
  {
    if(this.chbAccount)
      this.getAccountItemLevels(true,ViewName.Account);

    if(this.chbCCenter)
      this.getAccountItemLevels(true,ViewName.CostCenter);

    if(this.chbDetailAccount)
      this.getAccountItemLevels(true,ViewName.DetailAccount);

    if(this.chbProject)
      this.getAccountItemLevels(true,ViewName.Project);
  }

  fillInputParameters(balanceAccountParam) {
    if (this.dateRange) {
      if (balanceAccountParam.filterType == "1") {
        this.dateRange.InitializeDate = false;
        this.dateRange.fromDatePicker.isDisplayDate = false;
        this.dateRange.toDatePicker.isDisplayDate = false;

        var from = new Date(balanceAccountParam.fromDate);
        var to = new Date(balanceAccountParam.toDate);

        this.dateRange.fromDatePicker.dateObject = moment(from);
        this.dateRange.toDatePicker.dateObject = moment(to);
        this.fromDate = from;
        this.toDate = to;
        this.dateRange.setInitialDates(from, to);
      }
      else {
        this.fromVoucher = balanceAccountParam.fromVoucher;
        this.fromVoucher = balanceAccountParam.toVoucher;
      }

    }

    this.chbAccount = true;
    this.selectedAccountInit = true;
    this.selectedAccountLevel = balanceAccountParam.levelId;    
    this.selectedAccountName = balanceAccountParam.account.accountName;
    this.selectedBranchSeparation = balanceAccountParam.selectedBranchSeparation;
    this.selectedVoucherStatus = balanceAccountParam.voucherStatusSelected;
    this.selectedBranchScope = balanceAccountParam.branchScopeSelected;
    this.useClosingVoucher = balanceAccountParam.useClosingVoucher;
    this.selectedReferences = balanceAccountParam.selectedReferences;
    this.useClosingTempVoucher = balanceAccountParam.useClosingTempVoucher;
    this.reportType = balanceAccountParam.filterType;
    
  }

  ngAfterViewInit()
  {
    if (this.dateRange) {
      this.dateRange.InitializeDate = false;
    }

    super.ngAfterViewInit();
  }


  ngOnDestroy() {
    this.bStorageService.removeSessionStorage("BalanceAccountParam");

    super.ngOnDestroy();
  }

  getReportByItems() {
    this.settingService.getAll(LookupApi.TreeViews).subscribe(res => {
      this.reportBy = res.body;
    })
  }

  onChangeReportBy() {
    var viewId = parseInt(this.selectedReportBy);

    this.getAccountItemLevels(true, viewId);

    this.sortingGridColumns();

    this.breadCrumbList = new Array<any>();
  }

  fillReferences() {
    this.lookupService.getAll(LookupApi.VoucherReferences).subscribe(res => {
      var refs = <string[]>res.body;
      this.referenceValues = refs;
    })
  }

  onBeforeQuickReportSetting() {
    //clear local sotrage state for prev comparative report
    if ((this.param && this.parameters != this.param.items) || this.paramChanged) {
      this.reportSetting.clearCurrentState(this.viewId);
      this.paramChanged = false;
    }
  }

  sortingGridColumns() {   
    this.showColumn(parseInt(this.selectedReportBy));

    let columnList: Array<any> = Object.assign(this.gridColumns);

    columnList.forEach(item => {
      var column = this.gridColumnsRow.find(f => f.name == item.name);
      if (column) {
        var columnIndex = columnList.findIndex(f => f.name == item.name);
        if (columnIndex > -1)
          column.displayIndex = columnIndex;
      }
    })

    var fullCodeColumn;
    var nameColumn;

    switch (parseInt(this.selectedReportBy)) {
      case ViewName.Account: {
        fullCodeColumn = this.gridColumnsRow.find(f => f.name.toLowerCase() == "accountfullcode")
        nameColumn = this.gridColumnsRow.find(f => f.name.toLowerCase() == "accountname");
        break;
      }
      case ViewName.DetailAccount: {
        fullCodeColumn = this.gridColumnsRow.find(f => f.name.toLowerCase() == "detailaccountfullcode")
        nameColumn = this.gridColumnsRow.find(f => f.name.toLowerCase() == "detailaccountname");
        break;
      }
      case ViewName.CostCenter: {
        fullCodeColumn = this.gridColumnsRow.find(f => f.name.toLowerCase() == "costcenterfullcode")
        nameColumn = this.gridColumnsRow.find(f => f.name.toLowerCase() == "costcentername");
        break;
      }
      case ViewName.Project: {
        fullCodeColumn = this.gridColumnsRow.find(f => f.name.toLowerCase() == "projectfullcode")
        nameColumn = this.gridColumnsRow.find(f => f.name.toLowerCase() == "projectname");
        break;
      }
      default:
    }

    fullCodeColumn.displayIndex = 0.5;
    nameColumn.displayIndex = 0.6;

    this.gridColumnsRow.sort((a, b) => a.displayIndex > b.displayIndex ? 1 : -1);
  }

  openSelectForm(viewId: number) {
    this.dialogRef = this.dialogService.open({
      content: SelectFormComponent,
    });

    debugger;

    this.dialogModel = this.dialogRef.content.instance;

    this.dialogModel.viewID = viewId;
    this.dialogModel.isDisableEntities = true;

    this.dialogRef.content.instance.cancel.subscribe((res) => {
      switch (viewId) {
        case ViewName.Account: {
          this.selectedAccount = undefined;
          this.selectedAccountName = this.getText('BalanceByAccount.AllAccount');
          break;
        }
        case ViewName.DetailAccount: {
          this.selectedDetailAccount = undefined;
          this.selectedDetailAccountName = this.getText('BalanceByAccount.AllDetailAccount');
          break;
        }
        case ViewName.CostCenter: {
          this.selectedCCenter = undefined;
          this.selectedCCenterName = this.getText('BalanceByAccount.AllCostCenter');
          break;
        }
        case ViewName.Project: {
          this.selectedProject = undefined;
          this.selectedProjectName = this.getText('BalanceByAccount.AllProject');
          break;
        }
        default:
      }
      this.changeParam();
      this.dialogRef.close();
    });

    this.dialogRef.content.instance.result.subscribe((res) => {
      switch (res.viewId) {
        case ViewName.Account: {
          this.selectedAccount = res.dataItem;          
          this.selectedAccountLevel = res.dataItem.level;
          this.selectedAccountName = this.selectedAccount.name;
          break;
        }
        case ViewName.DetailAccount: {
          this.selectedDetailAccount = res.dataItem;
          this.selectedDetailAccountLevel = res.dataItem.level;
          this.selectedDetailAccountName = this.selectedDetailAccount.name;
          break;
        }
        case ViewName.CostCenter: {
          this.selectedCCenter = res.dataItem;
          this.selectedCCenterLevel = res.dataItem.level;
          this.selectedCCenterName = this.selectedCCenter.name;
          break;
        }
        case ViewName.Project: {
          this.selectedProject = res.dataItem;
          this.selectedProjectLevel = res.dataItem.level;
          this.selectedProjectName = this.selectedProject.name;
          break;
        }
        default:
      }
      this.changeParam();
      this.dialogRef.close();
    });

  }

  getAccountItemLevels(isChecked: boolean, viewId: number) {
    if (isChecked) {
      this.gridService.getModels(String.Format(LookupApi.AccountBookLevels, viewId)).subscribe(res => {
        switch (viewId) {
          case ViewName.Account: {
            this.accountLevelList = res;
            this.chbAccount = true;
            
            if (!this.selectedAccountInit) {
              this.selectedAccountLevel = this.accountLevelList[0].level;
              this.selectedAccountName = this.getText('BalanceByAccount.AllAccount');              
              this.selectedAccount = undefined;
            }
            else
            {
              this.displayTypeName = this.accountLevelList[this.selectedAccountLevel].title;              
            }
            break;
          }
          case ViewName.DetailAccount: {
            this.detailAccountLevelList = res;
            this.chbDetailAccount = true;            
            this.selectedDetailAccountLevel = this.detailAccountLevelList[this.detailAccountLevelList.length - 1].level;
            this.selectedDetailAccountName = this.getText('BalanceByAccount.AllDetailAccount');
            break;
          }
          case ViewName.CostCenter: {
            this.cCenterLevelList = res;
            this.chbCCenter = true;
            this.selectedCCenterLevel = this.cCenterLevelList[this.cCenterLevelList.length - 1].level;
            this.selectedCCenterName = this.getText('BalanceByAccount.AllCostCenter');
            break;
          }
          case ViewName.Project: {
            this.projectLevelList = res;
            this.chbProject = true;
            this.selectedProjectLevel = this.projectLevelList[this.projectLevelList.length - 1].level;
            this.selectedProjectName = this.getText('BalanceByAccount.AllProject');
            break;
          }
          default:
        }

        this.showColumn(viewId);
      })
    }
    else {
      switch (viewId) {
        case ViewName.Account: {
          this.accountLevelList = [];
          this.selectedAccount = undefined;
          this.selectedAccountLevel = undefined;
          this.selectedAccountName = undefined;
          break;
        }
        case ViewName.DetailAccount: {
          this.detailAccountLevelList = [];
          this.selectedDetailAccount = undefined;
          this.selectedDetailAccountLevel = undefined;
          this.selectedDetailAccountName = undefined;
          break;
        }
        case ViewName.CostCenter: {
          this.cCenterLevelList = [];
          this.selectedCCenter = undefined;
          this.selectedCCenterLevel = undefined;
          this.selectedCCenterName = undefined;
          break;
        }
        case ViewName.Project: {
          this.projectLevelList = [];
          this.selectedProject = undefined;
          this.selectedProjectLevel = undefined;
          this.selectedProjectName = undefined;
          break;
        }
        default:
      }

      this.hideColumn(viewId);
    }
  }

  getColumns(e: any) {
    this.gridColumns = e;
    if (!this.selectedBranchSeparation) {
      this.gridColumnsRow = this.gridColumns.filter(f => f.name != "BranchName" &&
        f.name != "AccountFullCode" &&
        f.name != "AccountName" &&
        f.name != "DetailAccountFullCode" &&
        f.name != "DetailAccountName" &&
        f.name != "CostCenterFullCode" &&
        f.name != "CostCenterName" &&
        f.name != "ProjectFullCode" &&
        f.name != "ProjectName");
    }
    else {
      this.gridColumnsRow = this.gridColumns;
    }

    this.showColumn(parseInt(this.selectedReportBy));
  }

  dateValueChange(event: any) {
    this.fromDate = event.fromDate;
    this.toDate = event.toDate;
    this.isDefaultBtn = false;
  }

  getFirstAndLastVoucherNo() {
    this.gridService.getModels(VoucherApi.EnvironmentItemRange).subscribe(res => {
      this.fromVoucher = res.firstNo.toString();
      this.toVoucher = res.lastNo.toString();
    })
  }

  changeBranchSeparation() {
    if (this.isAccess(Entities.BalanceByAccount, BalanceByAccountPermissions.ViewByBranch)) {
      this.isApplyBranchSeparation = true;
      if (!this.selectedBranchSeparation) {
        this.gridColumnsRow = this.gridColumnsRow.filter(f => f.name != "BranchName");
      }
      else {
        var branchColumn = this.gridColumns.find(f => f.name == "BranchName");
        this.gridColumnsRow.push(branchColumn);
        this.gridColumnsRow.sort((a, b) => a.displayIndex > b.displayIndex ? 1 : -1);
      }
      this.changeParam();
    }
    else {
      this.isApplyBranchSeparation = false;
      this.showMessage(this.getText('App.AccessDenied'), MessageType.Warning);
    }
  }

  

  changeParam(clearBreadCrumb: boolean = true) {
    this.isDefaultBtn = false;

    //this.creditSum = 0;
    //this.debitSum = 0;
    this.selectedRows = [];
    this.pageIndex = 0;
    this.showloadingMessage = false;
    this.totalRecords = 0;
    this.rowData = undefined;
    this.isTestBalanceParams = false;
   
    if (clearBreadCrumb && this.breadCrumbList.length) {
      var relatedDisplayType = this.accountLevelList.filter(d => d.key === this.selectedAccountLevel)[0];
      if (this.breadCrumbList.length > 0
        && this.breadCrumbList[this.breadCrumbList.length - 1].displayType.level > relatedDisplayType.level) {
        this.breadCrumbList = new Array<any>();
      }
      this.displayTypeName = relatedDisplayType.name;
    }
  }

  onChangeAccountLevel() {
    this.selectedAccount = undefined;
    this.selectedAccountName = this.getText('BalanceByAccount.AllAccount');
  }

  onChangeDetailAccountLevel() {
    this.selectedDetailAccountName = this.getText('BalanceByAccount.AllDetailAccount');
    this.selectedDetailAccount = undefined;    
  }

  onChangeCCenterLevel() {
    this.selectedCCenterName = this.getText('BalanceByAccount.AllCostCenter');
    this.selectedCCenter = undefined;    
  }

  onChangeProjectLevel() {
    this.selectedProjectName = this.getText('BalanceByAccount.AllProject');
    this.selectedProject = undefined;    
  }

  onChangeFilterByRef(event) {
    if (!this.isAccess(Entities.BalanceByAccount, BalanceByAccountPermissions.FilterByRef)) {
      setTimeout(() => {
        this.selectedReferences = [];
      });
      this.showMessage(this.getText('App.AccessDenied'), MessageType.Warning);
    }
  }


  @SavePersist()
  getReportData(callBreadCrumb:boolean = true) {
    var errorMsg;    
    switch (this.selectedReportBy) {
      case ViewName.Account.toString(): {
        if (this.selectedAccount && this.selectedAccountLevel < this.selectedAccount.level)
          errorMsg = String.Format(this.getText('BalanceByAccount.SelectLevelErrorMsg'), this.getText('Entity.Account'));
        break
      }
      case ViewName.DetailAccount.toString(): {
        if (this.selectedDetailAccount && this.selectedDetailAccountLevel < this.selectedDetailAccount.level)
          errorMsg = String.Format(this.getText('BalanceByAccount.SelectLevelErrorMsg'), this.getText('Entity.DetailAccount'));
        break
      }
      case ViewName.CostCenter.toString(): {
        if (this.selectedCCenter && this.selectedCCenterLevel < this.selectedCCenter.level)
          errorMsg = String.Format(this.getText('BalanceByAccount.SelectLevelErrorMsg'), this.getText('Entity.CostCenter'));
        break
      }
      case ViewName.Project.toString(): {
        if (this.selectedProject && this.selectedProjectLevel < this.selectedProject.level)
          errorMsg = String.Format(this.getText('BalanceByAccount.SelectLevelErrorMsg'), this.getText('Entity.Project'));
        break
      }
      default:
    }

    if (!errorMsg &&
      this.selectedAccount &&
      this.selectedReportBy != ViewName.Account.toString() &&
      this.selectedAccountLevel < this.selectedAccount.level) {
      errorMsg = String.Format(this.getText('BalanceByAccount.SelectLevelErrorMsg'), this.getText('Entity.Account'));
    }

    if (!errorMsg &&
      this.selectedDetailAccount &&
      this.selectedReportBy != ViewName.DetailAccount.toString() &&
      this.selectedDetailAccountLevel < this.selectedDetailAccount.level) {
      errorMsg = String.Format(this.getText('BalanceByAccount.SelectLevelErrorMsg'), this.getText('Entity.DetailAccount'));
    }

    if (!errorMsg &&
      this.selectedCCenter &&
      this.selectedReportBy != ViewName.CostCenter.toString() &&
      this.selectedCCenterLevel < this.selectedCCenter.level) {
      errorMsg = String.Format(this.getText('BalanceByAccount.SelectLevelErrorMsg'), this.getText('Entity.CostCenter'));
    }

    if (!errorMsg &&
      this.selectedProject &&
      this.selectedReportBy != ViewName.Project.toString() &&
      this.selectedProjectLevel < this.selectedProject.level) {
      errorMsg = String.Format(this.getText('BalanceByAccount.SelectLevelErrorMsg'), this.getText('Entity.Project'));
    }
   
    debugger;
    if (errorMsg) {
      this.showMessage(errorMsg, MessageType.Warning);
    }
    else {
      this.param = {
        viewId: this.selectedReportBy,
        //isByDate: this.reportType == "1" ? true : false,
        fromDate: this.reportType == "1" ? this.fromDate : null,
        toDate: this.reportType == "1" ? this.toDate : null,
        fromNo: this.reportType == "2" ? this.fromVoucher : null,
        toNo: this.reportType == "2" ? this.toVoucher : null,
        isByBranch: this.selectedBranchSeparation,
        accountLevel: this.selectedAccountLevel,
        accountId: this.selectedAccount ? this.selectedAccount.id : null,
        detailAccountLevel: this.selectedDetailAccountLevel,
        detailAccountId: this.selectedDetailAccount ? this.selectedDetailAccount.id : null,
        costCenterLevel: this.selectedCCenterLevel,
        costCenterId: this.selectedCCenter ? this.selectedCCenter.id : null,
        projectLevel: this.selectedProjectLevel,
        projectId: this.selectedProject ? this.selectedProject.id : null,
        IsSelectedAccount: this.chbAccount,
        IsSelectedDetailAccount: this.chbDetailAccount,
        IsSelectedCostCenter: this.chbCCenter,
        IsSelectedProject: this.chbProject,
        options: this.generateOptionNumber()
      }

      //added by nouri
      this.getDataUrl = BalanceByAccountApi.BalanceByAccount;
      this.generateGridOptions();
      //added by nouri

      this.paramChanged = true;
      var options = new ReloadOption();
      options.Parameter = this.param;

      this.parameters = this.param;

      this.reloadGrid(options);

      var levelList = undefined;
      var selectedLevel = undefined;
      var account = undefined;

      switch (this.selectedReportBy) {
        case ViewName.Account.toString(): {
          levelList = this.accountLevelList;
          selectedLevel = this.selectedAccountLevel;
          account = this.selectedAccount;
          break
        }
        case ViewName.DetailAccount.toString(): {
          levelList = this.detailAccountLevelList;
          selectedLevel = this.selectedDetailAccountLevel;
          account = this.selectedDetailAccount;
          break
        }
        case ViewName.CostCenter.toString(): {
          levelList = this.cCenterLevelList;
          selectedLevel = this.selectedCCenterLevel;
          account = this.selectedCCenter;
          break
        }
        case ViewName.Project.toString(): {
          levelList = this.projectLevelList;
          selectedLevel = this.selectedProjectLevel;
          account = this.selectedProject;
          break
        }
        default:
      }

      if(callBreadCrumb)
        this.updateBreadCrumb(levelList,selectedLevel,account);
    }
  }

  generateGridOptions() {
    this.defaultFilter = [];
    this.quickFilter = [];

    switch (this.selectedVoucherStatus) {
      case "2": {
        this.quickFilter.push(new Filter("VoucherStatusId", this.selectedVoucherStatus, " >= {0}", "System.Int32"));
        break;
      }
      case "3": {
        this.quickFilter.push(new Filter("VoucherStatusId", this.selectedVoucherStatus, " == {0}", "System.Int32"));
        break;
      }
      case "4": {
        this.quickFilter.push(new Filter("VoucherConfirmedById", "", " != null", ""));
        break;
      }
      case "5": {
        this.quickFilter.push(new Filter("VoucherApprovedById", "", " != null", ""));
        break;
      }
      default:
    }

    
    if (this.selectedReferences && this.selectedReferences.length > 0) {
      var referencesFilter: FilterExpression = null;
      var lastItem = this.selectedReferences[this.selectedReferences.length - 1];
      var i = 1;
      this.selectedReferences.forEach((item) => {
        var refFilter = new Filter("VoucherReference", item, " == {0}", "System.String");
        refFilter.id = i.toString();
        referencesFilter = this.addFilterExpressionWithBrace(referencesFilter, refFilter, item === lastItem, this.selectedReferences.length > 1);
      });

      this.customQuickFilter = referencesFilter;
      this.useCustomQuickFilterExpression = true;
    }
    else {
      this.customQuickFilter = undefined;
      this.useCustomQuickFilterExpression = false;
    }

    if (this.selectedBranchScope == "1") {
      this.quickFilter.push(new Filter("BranchId", this.BranchId.toString(), " == {0}", "System.Int32"));
    }    

  }

  generateOptionNumber() {
    var options = (this.useClosingTempVoucher ? BalanceOptions.UseClosingTempVoucher : 0) |
      (this.useClosingVoucher ? BalanceOptions.UseClosingVoucher : 0) |
      (this.showZeroBalanceItems ? BalanceOptions.ShowZeroBalanceItems : 0) |
      (this.startTurnoverAsInitBalance ? BalanceOptions.StartTurnoverAsInitBalance : 0) |
      (this.openingAsFirstVoucher ? BalanceOptions.OpeningAsFirstVoucher : 0);

    return options;
  }

  onCellClick(e: any) {
    this.clickedRowItem = e.dataItem;
  }

  selectBreadCrumb(item) {
    
    switch (this.selectedReportBy) {
      case ViewName.Account.toString(): {
        this.selectedAccountLevel = item.displayType.key;
        if (item.account) {
          this.selectedAccount = item.account;
          this.selectedAccountName = item.account.name;
        }
        else {
          this.selectedAccount = undefined;
          this.selectedAccountName = this.getText('BalanceByAccount.AllAccount');
        }
        break
      }
      case ViewName.DetailAccount.toString(): {
        this.selectedDetailAccountLevel = item.displayType.key;
        if (item.account) {
          this.selectedDetailAccount = item.account;
          this.selectedDetailAccountName  = item.account.name;
        }
        else {
          this.selectedDetailAccount = undefined;
          this.selectedDetailAccountName = this.getText('BalanceByAccount.AllAccount');
        }
        break
      }
      case ViewName.CostCenter.toString(): {
        this.selectedCCenterLevel = item.displayType.key;
        if (item.account) {
          this.selectedCCenter = item.account;
          this.selectedCCenterName  = item.account.name;
        }
        else {
          this.selectedCCenter = undefined;
          this.selectedAccountName = this.getText('BalanceByAccount.AllAccount');
        }
        break
      }
      case ViewName.Project.toString(): {
        this.selectedProjectLevel = item.displayType.key;
        if (item.account) {
          this.selectedProject = item.account;
          this.selectedProjectName  = item.account.name;
        }
        else {
          this.selectedProject = undefined;
          this.selectedProjectName = this.getText('BalanceByAccount.AllAccount');
        }
        break
      }
      default:
    }

    debugger;

    this.getReportData(false);
    this.displayTypeName = item.displayType.title;
    
    var i = 0;
    var index = -1;
    this.breadCrumbList.forEach((br: any) => {
      if (index == -1 && br.displayType.level > item.displayType.level) {
        index = i;
      }
      i++;
    });

    if (index > -1) {
      this.breadCrumbList.splice(index);
    }
  }

  updateBreadCrumb(accountLevelList?:any,selectedAccountLevel?:any,acc?: any):boolean {
    if (!this.breadCrumbList)
      this.breadCrumbList = new Array<any>();
    
    var data = null;

    debugger;
    if(accountLevelList && selectedAccountLevel)
    {
      var relatedDisplayType = accountLevelList.filter(d => d.key === selectedAccountLevel)[0];

      data = {
        displayType: relatedDisplayType,
        account: (acc) ? acc : undefined      
      };
      
      if (this.breadCrumbList.findIndex(b => b.displayType.key === relatedDisplayType.key) == -1) {
        this.displayTypeName = relatedDisplayType.title;
        if (this.breadCrumbList.length == 0)
        {
          this.breadCrumbList = new Array<any>();
          this.breadCrumbList.push(data);
          return true;
        }
        else {
          this.breadCrumbList.push(data);
          return true;
        }
      }   
    }  
    

    return false;
  }

  getAccountId()
  {
    var accountId : number = 0;
    switch (parseInt(this.selectedReportBy)) {
      case ViewName.Account: {

        accountId = this.clickedRowItem.accountId;
        break;
      }
      case ViewName.DetailAccount: {
        accountId = this.clickedRowItem.detailAccountId;
        break;
      }
      case ViewName.CostCenter: {
        accountId = this.clickedRowItem.costCenterId;
        break;
      }
      case ViewName.Project: {
        accountId = this.clickedRowItem.projectId;
        break;
      }
      default:
    }

    return accountId;
  }

  rowDoubleClickHandler() {    
    if (this.clickedRowItem) {           
      
      switch (parseInt(this.selectedReportBy)) {
        case ViewName.Account: {
          var url = String.Format(AccountApi.Account,this.clickedRowItem.accountId);
          this.accountService.getById(url).subscribe((account) => {                    
            this.prapareBreadCrumb(account,this.accountLevelList,ViewName.Account);
          });               
          break;
        }
        case ViewName.DetailAccount: {          
          var url = String.Format(DetailAccountApi.DetailAccount,this.clickedRowItem.detailAccountId);
          this.detailAccountService.getById(url).subscribe((account) => {                    
            this.prapareBreadCrumb(account,this.detailAccountLevelList,ViewName.DetailAccount);
          });  
          break;
        }
        case ViewName.CostCenter: {         
          var url = String.Format(CostCenterApi.CostCenter,this.clickedRowItem.costCenterId);
          this.costCenterService.getById(url).subscribe((account) => {                    
            this.prapareBreadCrumb(account,this.cCenterLevelList,ViewName.CostCenter);
          }); 
          break;
        }
        case ViewName.Project: {          
          var url = String.Format(ProjectApi.Project,this.clickedRowItem.projectId);
          this.projectService.getById(url).subscribe((account) => {                    
            this.prapareBreadCrumb(account,this.projectLevelList,ViewName.Project);
          }); 
          break;          
        }
        default:
      }

      
    }
  }

  prapareBreadCrumb(account,accountLevelList,viewId)
  {
    if (accountLevelList.findIndex(f => f.level === account.level + 1) > 0 && !this.isTestBalanceParams) {
      if(viewId == ViewName.Account)
      {
        this.selectedAccountLevel = accountLevelList.filter(f => f.level === account.level + 1)[0].key;
        this.selectedAccount = account;
        this.selectedAccountName = account.name;
        this.breadCrumbAdded = this.updateBreadCrumb(accountLevelList,this.selectedAccountLevel,account);
      }

      if(viewId == ViewName.DetailAccount)
      {
        this.selectedDetailAccountLevel = accountLevelList.filter(f => f.level === account.level + 1)[0].key;
        this.selectedDetailAccount = account;
        this.selectedDetailAccountName = account.name;
        this.breadCrumbAdded = this.updateBreadCrumb(accountLevelList,this.selectedDetailAccountLevel,account);
      }

      if(viewId == ViewName.CostCenter)
      {
        this.selectedCCenterLevel = accountLevelList.filter(f => f.level === account.level + 1)[0].key;
        this.selectedCCenter = account;
        this.selectedCCenterName = account.name;
        this.breadCrumbAdded = this.updateBreadCrumb(accountLevelList,this.selectedCCenterLevel,account);
      }

      if(viewId == ViewName.Project)
      {
        this.selectedProjectLevel = accountLevelList.filter(f => f.level === account.level + 1)[0].key;
        this.selectedProject = account;
        this.selectedProjectName = account.name;
        this.breadCrumbAdded = this.updateBreadCrumb(accountLevelList,this.selectedProjectLevel,account);
      }

      

      setTimeout(() => {
        this.getReportData(false);
      }
        , 200);
    }
    else {
      this.showAccountBook(this.clickedRowItem);
      this.clickedRowItem = undefined;
    }
  }

  public onGenerateParameters(): any {     
      return this.param;
  }

  onAdvanceFilterOk(): any {
    //this.enableViewListChanged(this.viewId);
    
    this.enableViewListChanged(this.typeViewId);
    this.operationId = OperationId.Filter;
    this.getReportData();
  }

  public onDataBind(res: any) {
    this.totalRow = res.total;
    
    var levels = null;
    var selectedLevel = null;
    switch (this.selectedReportBy) {
      case ViewName.Account.toString(): {
        levels = this.accountLevelList;
        selectedLevel = this.selectedAccountLevel;       
        break
      }
      case ViewName.DetailAccount.toString(): {
        levels = this.detailAccountLevelList;
        selectedLevel = this.selectedDetailAccountLevel;        
        break
      }
      case ViewName.CostCenter.toString(): {
        levels = this.cCenterLevelList;
        selectedLevel = this.selectedCCenterLevel;        
        break
      }
      case ViewName.Project.toString(): {
        levels = this.projectLevelList;
        selectedLevel = this.selectedProjectLevel;
        break
      }
      default:
    }

    if (this.clickedRowItem && res.items.length == 0) {      
      //if (this.breadCrumbAdded)
        //this.selectBreadCrumb(this.breadCrumbList[this.breadCrumbList.length - 2]);
      
      this.showAccountBook(this.clickedRowItem);
      this.clickedRowItem = undefined;     
    }

    this.breadCrumbAdded = false;
  }

  onChangeVoucherStatus() {
    this.changeParam();
    let statusFilterExp: FilterExpression = undefined;
    var statusFilter = this.voucherService.getStatusFilter(this.selectedVoucherStatus, this.selectedBranchScope == "1" ? this.BranchId.toString() : undefined);

    if (statusFilter.filter.length > 0) {
      statusFilter.filter.forEach(item => {
        statusFilterExp = this.addFilterToFilterExpression(statusFilterExp,
          item, FilterExpressionOperator.And);
      })

      this.voucherService.getVoucherNumberByStatus(VoucherApi.VoucherCountByStatus, statusFilterExp).subscribe(res => {
        if (res > 0)
          this.showMessage(String.Format(this.getText('Messages.VoucherNumberByStatus'), res.toString(), this.getText(statusFilter.key),statusFilter.url), MessageType.Info);
      })
    }

  }

  showColumn(viewId: number) {

    this.typeViewId = viewId;
    if (this.gridColumns.length) {
      var fullCodeColumn;
      var nameColumn;

      switch (viewId) {
        case ViewName.Account: {
          fullCodeColumn = this.gridColumns.find(f => f.name.toLowerCase() == "accountfullcode");
          nameColumn = this.gridColumns.find(f => f.name.toLowerCase() == "accountname");
          break;
        }
        case ViewName.DetailAccount: {
          fullCodeColumn = this.gridColumns.find(f => f.name.toLowerCase() == "detailaccountfullcode");
          nameColumn = this.gridColumns.find(f => f.name.toLowerCase() == "detailaccountname");
          break;
        }
        case ViewName.CostCenter: {
          fullCodeColumn = this.gridColumns.find(f => f.name.toLowerCase() == "costcenterfullcode");
          nameColumn = this.gridColumns.find(f => f.name.toLowerCase() == "costcentername");
          break;
        }
        case ViewName.Project: {
          fullCodeColumn = this.gridColumns.find(f => f.name.toLowerCase() == "projectfullcode");
          nameColumn = this.gridColumns.find(f => f.name.toLowerCase() == "projectname");
          break;
        }
        default:
      }

      if (!this.gridColumnsRow.find(f => f.name == fullCodeColumn.name)) {
        this.gridColumnsRow.push(fullCodeColumn);
      }

      if (!this.gridColumnsRow.find(f => f.name == nameColumn.name)) {
        this.gridColumnsRow.push(nameColumn);
      }

      this.gridColumnsRow.sort((a, b) => a.displayIndex > b.displayIndex ? 1 : -1);
    }

    
  }

  hideColumn(viewId) {

    var fullCodeColumn;
    var nameColumn;

    switch (viewId) {
      case ViewName.Account: {
        fullCodeColumn = "accountfullcode";
        nameColumn = "accountname";
        break;
      }
      case ViewName.DetailAccount: {
        fullCodeColumn = "detailaccountfullcode";
        nameColumn = "detailaccountname";
        break;
      }
      case ViewName.CostCenter: {
        fullCodeColumn = "costcenterfullcode";
        nameColumn = "costcentername";
        break;
      }
      case ViewName.Project: {
        fullCodeColumn = "projectfullcode";
        nameColumn = "projectname";
        break;
      }
      default:
    }

    this.gridColumnsRow = this.gridColumnsRow.filter(f => f.name.toLowerCase() != fullCodeColumn && f.name.toLowerCase() != nameColumn);

    this.gridColumnsRow.sort((a, b) => a.displayIndex > b.displayIndex ? 1 : -1);

  }

  fillSelectedRow()
  {
    if(this.selectedRows.length > 0)
      {
        var selectedIndex = this.rowData.data.findIndex(r=> r.rowNo.toString() == this.selectedRows[0].toString());
        if(selectedIndex >= 0)
        {
          this.clickedRowItem = this.rowData.data[selectedIndex];          
        }
      }     
  }

  showAccountBook(selectedAccount) {    
    
    
    if(selectedAccount)
    {
      this.clickedRowItem = selectedAccount
    }
    else
    {
      this.fillSelectedRow();    
    }

    if (this.clickedRowItem) {
      this.dialogRef = this.dialogService.open({
        content: AccountBookComponent,
        title: this.getText('Entity.AccountBook'),
        height: screen.availHeight
      });

      let item: any;
      let selectedLevel: number;

      switch (parseInt(this.selectedReportBy)) {
        case ViewName.Account: {

          var account = new AccountInfo();
          account.fullCode = this.clickedRowItem.accountFullCode;
          account.name = this.clickedRowItem.accountName;
          account.id = this.clickedRowItem.accountId;
          item = account;

          //selectedLevel = selectedRow.accountLevel;
          selectedLevel = this.selectedAccountLevel;
          break;
        }
        case ViewName.DetailAccount: {
          var detailAccount = new DetailAccountInfo();
          detailAccount.fullCode = this.clickedRowItem.detailAccountFullCode;
          detailAccount.name = this.clickedRowItem.detailAccountName;
          detailAccount.id = this.clickedRowItem.detailAccountId;
          item = detailAccount;

          selectedLevel = this.clickedRowItem.detailAccountLevel;
          break;
        }
        case ViewName.CostCenter: {
          var costCenter = new CostCenterInfo();
          costCenter.fullCode = this.clickedRowItem.costCenterFullCode;
          costCenter.name = this.clickedRowItem.costCenterName;
          costCenter.id = this.clickedRowItem.costCenterId;
          item = costCenter;

          selectedLevel = this.clickedRowItem.costCenterLevel;
          break;
        }
        case ViewName.Project: {
          var project = new ProjectInfo();
          project.fullCode = this.clickedRowItem.projectFullCode;
          project.name = this.clickedRowItem.projectName;
          project.id = this.clickedRowItem.projectId;
          item = project;
          selectedLevel = this.clickedRowItem.projectLevel;
          break;
        }
        default:
      }
            

      this.dialogModel = this.dialogRef.content.instance;
      this.dialogModel.selectedModel = item;
      this.dialogModel.disableAccountLookup = true;
      this.dialogModel.fromDate = this.fromDate;
      this.dialogModel.toDate = this.toDate;
      this.dialogModel.selectedBookType = selectedLevel;
      this.dialogModel.selectedEntityId = this.selectedReportBy;
      this.dialogModel.selectedViewId = parseInt(this.selectedReportBy);
      this.dialogModel.voucherStatusSelected = this.selectedVoucherStatus;
      this.dialogModel.branchScopeSelected = this.selectedBranchScope;
      this.dialogModel.selectedBranchSeparation = this.selectedBranchSeparation;
      this.dialogModel.isApplyBranchSeparation = this.isApplyBranchSeparation;

      this.dialogModel.getReportData();

    }
    else {
      this.showMessage(this.getText('Balance.PleaseSelectAccount'), MessageType.Warning);
    }
  }

  selectionKey(context: RowArgs): any {
    return context.dataItem.rowNo;
  }

}




