import {
  ChangeDetectorRef,
  Component,
  ElementRef,
  HostListener,
  NgZone,
  OnInit,
  Renderer2,
  ViewChild,
} from "@angular/core";
import { ActivatedRoute } from "@angular/router";
import { TranslateService } from "@ngx-translate/core";
import {
  DialogCloseResult,
  DialogService,
} from "@progress/kendo-angular-dialog";
import { RTL } from "@progress/kendo-angular-l10n";
import { SettingService } from "@sppc/config/service";
import { AuthenticationService } from "@sppc/core";
import { BranchScopeResource, DocumentStatusValue } from "@sppc/finance/enum";
import { Voucher } from "@sppc/finance/models";
import { VoucherService } from "@sppc/finance/service";
import { VoucherApi } from "@sppc/finance/service/api";
import { AutoGeneratedGridComponent, Filter, String } from "@sppc/shared/class";
import { ReloadOption } from "@sppc/shared/class/reload-option";
import { ErrorListComponent } from "@sppc/shared/components/errorList/errorList.component";
import { QuickReportSettingComponent } from "@sppc/shared/components/reportManagement/QuickReport-Setting.component";
import { ReportManagementComponent } from "@sppc/shared/components/reportManagement/reportManagement.component";
import { ReportViewerComponent } from "@sppc/shared/components/reportViewer/reportViewer.component";
import { ViewIdentifierComponent } from "@sppc/shared/components/viewIdentifier/view-identifier.component";
import { ReloadStatusType } from "@sppc/shared/enum";
import {
  Entities,
  Layout,
  MessageType,
  Metadatas,
} from "@sppc/shared/enum/metadata";
import { Item } from "@sppc/shared/models";
import {
  DraftVoucherPermissions,
  GlobalPermissions,
  ManageDraftVouchersPermissions,
  ManageVouchersPermissions,
  ViewName,
  VoucherPermissions,
} from "@sppc/shared/security";
import {
  BrowserStorageService,
  ErrorHandlingService,
  GridService,
  LookupService,
  MetaDataService,
  ReportingService,
} from "@sppc/shared/services";
import { LookupApi } from "@sppc/shared/services/api";
import { ToastrService } from "ngx-toastr";
import "rxjs/Rx";
import { VoucherEditorComponent } from "./voucher-editor.component";

export function getLayoutModule(layout: Layout) {
  return layout.getLayout();
}

@Component({
  selector: "voucher",
  templateUrl: "./voucher.component.html",
  styles: [
    `
      .ddl-type {
        width: 70%;
      }
      .result-box {
        padding: 10px;
        border-radius: 5px;
      }
      .head-table {
        background-color: #f0f8ff;
      }
      .voucher-top-filter {
        margin-left: 0;
        padding-left: 6px;
        direction: ltr;
        float: left !important;
      }
      .ddl-branch-type {
        width: 100% !important;
      }
    `,
  ],
  providers: [
    {
      provide: RTL,
      useFactory: getLayoutModule,
      deps: [Layout],
    },
  ],
})
export class VoucherComponent
  extends AutoGeneratedGridComponent
  implements OnInit
{
  @ViewChild(ReportViewerComponent) viewer: ReportViewerComponent;
  @ViewChild(ViewIdentifierComponent) viewIdentity: ViewIdentifierComponent;
  @ViewChild(ReportManagementComponent)
  reportManager: ReportManagementComponent;
  @ViewChild(QuickReportSettingComponent)
  reportSetting: QuickReportSettingComponent;

  voucherTypeList: Array<Item> = [];

  firstLoad: boolean = true;
  dateFilter: Array<Filter> = [];
  metadataType: string = Metadatas.Voucher;
  DataArray: Array<any> = [];
  branchScope: Array<Item> = [
    { value: BranchScopeResource.CurrentBranch, key: "1" },
    { value: BranchScopeResource.CurrentBranchAndSubsets, key: "2" },
  ];

  startDate: any;
  endDate: any;

  clickedRowItem: Voucher = undefined;
  //editDataItem?: Voucher = undefined;

  returnFromCommitGroup: boolean = false;
  finalizedGroup: boolean = false;
  commitGroup: boolean = false;
  returnFromFinalizedGroup: boolean = false;

  UnConfirmGroupConfirm: boolean;
  branchSelected: string;
  showGetPasswordModal: boolean = false;
  specialPassword: string = null;
  showErrorMessage: boolean = false;
  showFinancBtns: boolean = false;
  //For Report Modal
  showReportModal: boolean = false;
  resultForReport: any;
  totalItems: number;
  //counter 'E' key
  specialKeyPressCounter: number;
  isGroupUndoConfirm: boolean;

  selectedSubjectType: string = "0";
  selectedItems: any[];

  checkPermission: string;
  entityNamePermission: string;
  unCheckPermission: string;
  finalizePermission: string;
  unFinalizedPermission: string;
  confirmPermission: string;
  undoConfirmPermission: string;
  normalizePermission: string;
  createPermission: string;

  voucherStatusTypeLabel: string;
  voucherStatusTypeSelected: boolean;

  constructor(
    public toastrService: ToastrService,
    public translate: TranslateService,
    public dialogService: DialogService,
    public gridService: GridService,
    public cdref: ChangeDetectorRef,
    public renderer: Renderer2,
    public metadata: MetaDataService,
    private voucherService: VoucherService,
    private authenticationService: AuthenticationService,
    public settingService: SettingService,
    public reporingService: ReportingService,
    public ngZone: NgZone,
    public bStorageService: BrowserStorageService,
    private lookupService: LookupService,
    private activeRoute: ActivatedRoute,
    public errorHandlingService: ErrorHandlingService,
    public elem: ElementRef
  ) {
    super(
      toastrService,
      translate,
      gridService,
      renderer,
      metadata,
      settingService,
      bStorageService,
      cdref,
      ngZone,
      elem
    );
  }

  ngOnInit() {
    this.branchSelected = this.branchScope[0].key;

    this.entityName = Entities.Voucher;
    this.viewId = ViewName[this.entityTypeName];

    if (this.isAccess(Entities.Voucher, VoucherPermissions.View)) {
      this.getDataUrl = VoucherApi.EnvironmentVouchers;
    } else {
      this.getDataUrl = "";
      this.showMessage(
        this.getText("Voucher.NormalVoucherAccessDenied"),
        MessageType.Warning
      );
    }

    this.cdref.detectChanges();

    this.showFinancBtns = false;
    //For Report Modal
    this.showReportModal = false;
    this.resultForReport = [];
    this.totalItems = 0;
    ////counter 'E' key
    this.specialKeyPressCounter = 0;

    this.getVoucherType();
    this.setPermissions();
  }

  @HostListener("document:keydown", [])
  handleKeyboardEvent() {
    var event: KeyboardEvent = <KeyboardEvent>window.event;
    this.handleCtrlE(event);
  }

  //showPasswordModal() {
  //  if (!this.showGetPasswordModal) {
  //    this.showGetPasswordModal = true;
  //    this.dialogRef = this.dialogService.open({
  //      title: this.getText('Voucher.GetPasssordModalTitle'),
  //      content: SuperuserPasswordComponent,
  //      width: 300,
  //      height: 150
  //    });

  //    this.dialogRef.content.instance.cancel.subscribe(() => {
  //      this.showGetPasswordModal = false;
  //      this.dialogRef.close();
  //    });

  //    this.dialogRef.content.instance.result.subscribe(() => {
  //      this.showFinancBtns = true;
  //      this.showGetPasswordModal = false;
  //      this.dialogRef.close();
  //    });
  //  }
  //}

  onSuperAdminOk() {
    this.showFinancBtns = true;
  }

  addVoucherStatusFilter() {
    var isFilterd = false;
    if (!this.voucherStatusTypeSelected) {
      isFilterd = true;
    }

    this.activeRoute.params.subscribe((params) => {
      switch (params["mode"]) {
        case "committed": {
          var statusFilter = this.voucherService.getStatusFilter(
            "2",
            this.branchSelected == "1" ? this.BranchId.toString() : undefined,
            true
          );
          this.quickFilter.push(statusFilter.filter[0]);
          this.voucherStatusTypeLabel = this.getText(statusFilter.key);
          this.voucherStatusTypeSelected = true;
          break;
        }
        case "finalized": {
          var statusFilter = this.voucherService.getStatusFilter(
            "3",
            this.branchSelected == "1" ? this.BranchId.toString() : undefined,
            true
          );
          this.quickFilter.push(statusFilter.filter[0]);
          this.voucherStatusTypeLabel = this.getText(statusFilter.key);
          this.voucherStatusTypeSelected = true;
          break;
        }
        case "confirmed": {
          var statusFilter = this.voucherService.getStatusFilter(
            "4",
            this.branchSelected == "1" ? this.BranchId.toString() : undefined,
            true
          );
          this.quickFilter.push(statusFilter.filter[0]);
          this.voucherStatusTypeLabel = this.getText(statusFilter.key);
          this.voucherStatusTypeSelected = true;
          break;
        }
        case "approved": {
          var statusFilter = this.voucherService.getStatusFilter(
            "5",
            this.branchSelected == "1" ? this.BranchId.toString() : undefined,
            true
          );
          this.quickFilter.push(statusFilter.filter[0]);
          this.voucherStatusTypeLabel = this.getText(statusFilter.key);
          this.voucherStatusTypeSelected = true;
          break;
        }
      }
    });

    if (isFilterd && this.voucherStatusTypeSelected) {
      var branchId = this.activeRoute.snapshot.queryParamMap.get("branchId");
      if (branchId) this.branchSelected = this.branchScope[0].key;
      else this.branchSelected = this.branchScope[1].key;

      this.selectedSubjectType = "0";
    }
  }

  getVoucherType() {
    this.lookupService.getModels(LookupApi.VoucherSysTypes).subscribe((res) => {
      this.voucherTypeList = res;
    });
  }

  async getGlobalPermissions() {
    var exportCode = <number>GlobalPermissions.Export;
    var printCode = <number>GlobalPermissions.Print;
    var filterCode = <number>GlobalPermissions.Filter;
    if (this.selectedSubjectType == "-1") {
      this.exportAccessed =
        this.isAccess(Entities.DraftVouchers, exportCode) &&
        this.isAccess(Entities.Vouchers, exportCode);
      this.printAccessed =
        this.isAccess(Entities.DraftVouchers, printCode) &&
        this.isAccess(Entities.Vouchers, printCode);
      this.filterAccessed =
        this.isAccess(Entities.DraftVouchers, filterCode) &&
        this.isAccess(Entities.Vouchers, filterCode);
    } else if (this.selectedSubjectType == "0") {
      this.exportAccessed = this.isAccess(Entities.Vouchers, exportCode);
      this.printAccessed = this.isAccess(Entities.Vouchers, printCode);
      this.filterAccessed = this.isAccess(Entities.Vouchers, filterCode);
    } else {
      this.exportAccessed = this.isAccess(Entities.DraftVouchers, exportCode);
      this.printAccessed = this.isAccess(Entities.DraftVouchers, printCode);
      this.filterAccessed = this.isAccess(Entities.DraftVouchers, filterCode);
    }
  }

  /**
   * باز کردن و مقداردهی اولیه به فرم ویرایشگر
   */
  openEditorDialog(isNew: boolean) {
    if (this.selectedSubjectType == "-1" && isNew) {
      this.showMessage(this.getText("Voucher.AddNewNotPossible"));
      return;
    } else {
      if (!this.checkEditPermission()) return;
    }

    var subjectType = this.selectedSubjectType;
    if (!isNew) subjectType = this.editDataItem.subjectType;

    this.dialogRef = this.dialogService.open({
      title:
        subjectType == "1"
          ? this.getText("Voucher.DraftVoucherDetail")
          : this.getText("Voucher.VoucherDetail"),
      content: VoucherEditorComponent,
    });

    this.dialogModel = this.dialogRef.content.instance;
    this.dialogModel.voucherItem = this.editDataItem;
    this.dialogModel.isOpenFromList = true;
    this.editDataItem = undefined;
    this.dialogModel.subjectMode = parseInt(this.selectedSubjectType);

    this.dialogModel.filter = JSON.parse(JSON.stringify(this.reportFilter));
    this.dialogModel.quickFilter = JSON.parse(
      JSON.stringify(this.reportQuickFilter)
    );

    this.dialogRef.result.subscribe((result) => {
      if (result instanceof DialogCloseResult) {
        this.selectedRows = [];
        this.DataArray = [];
        this.reloadGrid();
      }
    });

    this.dialogRef.content.instance.cancel.subscribe((result) => {
      this.dialogRef.close();
    });
  }

  onCellClick(e) {
    this.clickedRowItem = e.dataItem;
  }

  rowDoubleClickHandler() {
    if (!this.checkEditPermission()) return;

    if (this.clickedRowItem) {
      this.grid.loading = true;
      this.voucherService
        .getById(String.Format(VoucherApi.Voucher, this.clickedRowItem.id))
        .subscribe((res) => {
          this.editDataItem = res;

          this.openEditorDialog(false);

          this.grid.loading = false;
        });
    }
  }

  checkEditPermission() {
    if (
      this.isDraftsOnlySelected() &&
      !this.isAccess(Entities.DraftVoucher, DraftVoucherPermissions.View)
    ) {
      this.showMessage(this.getText("App.AccessDenied"), MessageType.Warning);
      return false;
    }

    if (
      this.isNormalsOnlySelected() &&
      !this.isAccess(Entities.Voucher, VoucherPermissions.View)
    ) {
      this.showMessage(this.getText("App.AccessDenied"), MessageType.Warning);
      return false;
    }

    return true;
  }

  removeHandler(arg: any) {
    this.deleteConfirm = true;
    if (!this.groupOperation) {
      var recordId = this.selectedRows[0]; //.id;
      var record = this.rowData.data.find((f) => f.id == recordId);

      this.prepareDeleteConfirm(record.name);
      this.deleteModelId = recordId;
    } else {
      this.prepareDeleteConfirm(this.getText("Messages.SelectedItems"));
    }
  }

  beforeDelete() {
    this.deleteMsg = this.getText("Voucher.VoucherDeleted");
  }

  editHandler(arg: any) {
    var recordId = this.selectedRows[0]; //.id;
    this.grid.loading = true;
    this.voucherService
      .getById(String.Format(VoucherApi.Voucher, recordId))
      .subscribe((res) => {
        this.editDataItem = res;
        this.openEditorDialog(false);

        this.grid.loading = false;
      });
  }

  public showReport() {
    this.reportManager.showDefaultReport();
  }

  dateValueChange(event: any) {
    this.startDate = event.fromDate;
    this.endDate = event.toDate;

    if (this.startDate && this.endDate) {
      this.getVouchers();
    }
  }

  voucherTypeListChange() {
    this.selectedRows = [];
    this.DataArray = [];

    switch (this.selectedSubjectType) {
      case "-1":
        if (
          this.isAccess(Entities.Vouchers, ManageVouchersPermissions.View) &&
          this.isAccess(
            Entities.DraftVouchers,
            ManageDraftVouchersPermissions.View
          )
        ) {
          this.getDataUrl = VoucherApi.AllEnvironmentVouchers;
        } else {
          this.clearGridRows();
          this.showMessage(
            this.getText("Voucher.AllVoucherAccessDenied"),
            MessageType.Warning
          );
        }
        break;
      case "0":
        if (this.isAccess(Entities.Vouchers, ManageVouchersPermissions.View)) {
          this.getDataUrl = VoucherApi.EnvironmentVouchers;
        } else {
          this.clearGridRows();
          this.showMessage(
            this.getText("Voucher.NormalVoucherAccessDenied"),
            MessageType.Warning
          );
        }
        break;
      case "1":
        if (
          this.isAccess(
            Entities.DraftVouchers,
            ManageDraftVouchersPermissions.View
          )
        ) {
          this.getDataUrl = VoucherApi.EnvironmentDraftVouchers;
        } else {
          this.clearGridRows();
          this.showMessage(
            this.getText("Voucher.DraftVoucherAccessDenied"),
            MessageType.Warning
          );
        }
        break;
    }

    this.getVouchers();
    this.setPermissions();
    (async () => {
      await this.getGlobalPermissions();
    })();
  }

  clearGridRows() {
    this.getDataUrl = "";
    this.grid.loading = false;
    this.showloadingMessage = false;
    this.rowData.data = [];
    this.rowData.total = 0;
    this.DataArray = [];
    this.selectedRows = [];
  }

  setPermissions() {
    switch (this.selectedSubjectType) {
      case "-1":
        {
          if (
            this.selectedRows.length == 1 &&
            this.DataArray[0].subjectType == 0
          ) {
            this.entityNamePermission = "Voucher";
          }

          if (
            this.selectedRows.length == 1 &&
            this.DataArray[0].subjectType == 1
          ) {
            this.entityNamePermission = "DraftVoucher";
          }

          this.createPermission = "";
          this.checkPermission = "";
          this.unCheckPermission = "";
          this.finalizePermission = "";
          this.unFinalizedPermission = "";
          this.confirmPermission = "";
          this.undoConfirmPermission = "";
        }
        break;
      case "0":
        if (!this.groupOperation) {
          this.checkPermission = "Check";
          this.unCheckPermission = "UndoCheck";
          this.finalizePermission = "Finalize";
          this.unFinalizedPermission = "UnFinalized";
          this.confirmPermission = "Confirm";
          this.undoConfirmPermission = "UndoConfirm";
          this.normalizePermission = "";
          this.createPermission = "Create";

          this.entityNamePermission = "Voucher";
        } else {
          this.checkPermission = "GroupCheck;ManageVouchersPermissions";
          this.unCheckPermission = "GroupUndoCheck;ManageVouchersPermissions";
          this.finalizePermission = "GroupFinalize;ManageVouchersPermissions";
          this.unFinalizedPermission =
            "GroupUnFinalized;ManageVouchersPermissions";
          this.confirmPermission = "GroupConfirm;ManageVouchersPermissions";
          this.undoConfirmPermission =
            "GroupUndoConfirm;ManageVouchersPermissions";
          this.normalizePermission = "";
          this.createPermission = "Create";

          this.entityNamePermission = "Vouchers";
        }

        break;
      case "1":
        if (!this.groupOperation) {
          this.checkPermission = "Check";
          this.unCheckPermission = "UndoCheck";
          this.finalizePermission = "";
          this.unFinalizedPermission = "";
          this.confirmPermission = "";
          this.undoConfirmPermission = "";
          this.normalizePermission = "Normalize";

          this.entityNamePermission = "DraftVoucher";
        } else {
          this.checkPermission = "GroupCheck;ManageDraftVouchersPermissions";
          this.unCheckPermission =
            "GroupUndoCheck;ManageDraftVouchersPermissions";
          this.finalizePermission = "";
          this.unFinalizedPermission = "";
          this.confirmPermission = "";
          this.undoConfirmPermission = "";
          this.normalizePermission = "Normalize";

          this.entityNamePermission = "DraftVouchers";
        }

        break;
    }
  }

  getVouchers() {
    this.quickFilter = [];

    this.addVoucherStatusFilter();

    this.pageIndex = 0;
    if (this.branchSelected == "1") {
      this.quickFilter.push(
        new Filter(
          "BranchId",
          this.BranchId.toString(),
          " == {0}",
          "System.Int32"
        )
      );
    }

    this.quickFilter.push(
      new Filter("Date", this.startDate, " >= {0} ", "System.DateTime"),
      new Filter("Date", this.endDate, " <= {0} ", "System.DateTime")
    );

    if (this.selectedSubjectType == "0") {
      this.quickFilter.push(
        new Filter(
          "SubjectType",
          this.selectedSubjectType,
          " == {0} ",
          "System.Int32"
        )
      );
    }

    if (this.selectedSubjectType == "1") {
      this.quickFilter.push(
        new Filter(
          "SubjectType",
          this.selectedSubjectType,
          " == {0} ",
          "System.Int32"
        )
      );
    }

    this.reloadGrid();
  }

  deleteModel(confirm: boolean) {
    if (confirm) {
      if (this.groupOperation) {
        //حذف گروهی
        this.grid.loading = true;
        let rowsId: Array<number> = [];
        this.selectedRows.forEach((item) => {
          rowsId.push(item);
        });
        if (this.validateMultiTypeSelection()) {
          if (
            this.isNormalsOnlySelected() &&
            !this.checkPermissions(
              false,
              true,
              Entities.Voucher,
              VoucherPermissions.Delete
            )
          )
            return;
          if (
            this.isDraftsOnlySelected() &&
            !this.checkPermissions(
              true,
              false,
              Entities.DraftVoucher,
              DraftVoucherPermissions.Delete
            )
          )
            return;

          this.voucherService
            .groupDelete(VoucherApi.EnvironmentVouchers, rowsId)
            .subscribe(
              (res) => {
                var data: any = res;
                if (data && data.length > 0) {
                  //show errorlist component
                  this.openErrorListDialog(data, rowsId.length);
                } else {
                  this.showMessage(
                    this.getText("Voucher.VouchersDeleted"),
                    MessageType.Info
                  );
                }

                if (
                  this.rowData.data.length == this.selectedRows.length &&
                  this.pageIndex > 1
                )
                  this.pageIndex =
                    (this.pageIndex - 1) * this.pageSize - this.pageSize;

                this.groupOperation = false;

                var options = new ReloadOption();
                options.Status = ReloadStatusType.AfterDelete;
                this.reloadGrid(options);

                this.selectedRows = [];
              },
              (error) => {
                //this.showMessage(error, MessageType.Warning);
                if (error)
                  this.showMessage(
                    this.errorHandlingService.handleError(error),
                    MessageType.Warning
                  );
              }
            );
        }
      } else {
        if (
          this.isNormalsOnlySelected() &&
          !this.checkPermissions(
            false,
            true,
            Entities.Voucher,
            VoucherPermissions.Delete
          )
        )
          return;
        if (
          this.isDraftsOnlySelected() &&
          !this.checkPermissions(
            true,
            false,
            Entities.DraftVoucher,
            DraftVoucherPermissions.Delete
          )
        )
          return;

        this.grid.loading = true;
        this.voucherService
          .delete(String.Format(VoucherApi.Voucher, this.deleteModelId))
          .subscribe(
            (response) => {
              this.deleteModelId = 0;
              this.showMessage(
                this.getText("Voucher.VoucherDeleted"),
                MessageType.Info
              );

              if (this.rowData.data.length == 1 && this.pageIndex > 1)
                this.pageIndex =
                  (this.pageIndex - 1) * this.pageSize - this.pageSize;

              var options = new ReloadOption();
              options.Status = ReloadStatusType.AfterDelete;
              this.reloadGrid(options);

              this.selectedRows = [];
            },
            (error) => {
              this.grid.loading = false;
              //var message = error.message ? error.message : error;
              //this.showMessage(message, MessageType.Warning);
              if (error)
                this.showMessage(
                  this.errorHandlingService.handleError(error),
                  MessageType.Warning
                );
            }
          );
      }
    }

    //hide confirm dialog
    this.deleteConfirm = false;
  }

  checkPermissions(
    draft: boolean,
    normal: boolean,
    entity: string,
    permission: number
  ) {
    if (draft && !normal) {
      if (this.isDraftsOnlySelected()) {
        if (!this.isAccess(entity, permission)) {
          this.showMessage(
            this.getText("App.AccessDenied"),
            MessageType.Warning
          );
          return false;
        }
      }
    }

    if (!draft && normal) {
      if (this.isNormalsOnlySelected()) {
        if (!this.isAccess(entity, permission)) {
          this.showMessage(
            this.getText("App.AccessDenied"),
            MessageType.Warning
          );
          return false;
        }
      }
    }

    return true;
  }

  UnGroupConfirmModel(confirm: boolean) {
    if (confirm) {
      this.grid.loading = true;
      let rowsId: Array<number> = [];
      this.selectedRows.forEach((item) => {
        rowsId.push(item);
      });

      if (this.isGroupUndoConfirm) {
        if (!this.validateMultiTypeSelection()) return;
        if (
          this.isNormalsOnlySelected() &&
          !this.checkPermissions(
            false,
            true,
            Entities.Voucher,
            ManageVouchersPermissions.GroupUndoConfirm
          )
        )
          return;

        this.voucherService
          .changeVouchersStatus(VoucherApi.UndoConfirmVouchers, rowsId)
          .subscribe(
            (res) => {
              var data: any = res;
              if (data.length == null || data.length == 0) {
                var message = this.getText("Voucher.OperationSuccessful");
                this.showMessage(message, MessageType.Succes);
              } else if (data.length > 0) {
                //show errorlist component
                this.openErrorListDialog(data, rowsId.length);
              }

              this.reloadGrid();
              this.selectedRows = [];
              this.DataArray = [];
            },
            (error) => {
              if (error)
                this.showMessage(
                  this.errorHandlingService.handleError(error),
                  MessageType.Warning
                );
            }
          );
      } else {
        if (
          this.isNormalsOnlySelected() &&
          !this.checkPermissions(
            false,
            true,
            Entities.Voucher,
            VoucherPermissions.Confirm
          )
        )
          return;

        this.voucherService
          .changeVoucherStatus(
            String.Format(VoucherApi.UndoConfirmVoucher, rowsId[0])
          )
          .subscribe(
            (res) => {
              var data: any = res;
              if (data == null || data.length == null || data.length == 0) {
                var message = this.getText("Voucher.OperationSuccessful");
                this.showMessage(message, MessageType.Succes);
              } else if (data.length > 0) {
                //show errorlist component
                this.openErrorListDialog(data, rowsId.length);
              }

              this.reloadGrid();
              this.selectedRows = [];
              this.DataArray = [];
            },
            (error) => {
              if (error)
                this.showMessage(
                  this.errorHandlingService.handleError(error),
                  MessageType.Warning
                );
            }
          );
      }
    }
    //hide confirm modal
    this.UnConfirmGroupConfirm = false;
  }

  openErrorListDialog(rowData: any[], total: number) {
    this.dialogRef = this.dialogService.open({
      title: this.getText("ErrorList.GroupOperationReport"),
      content: ErrorListComponent,
    });

    this.dialogModel = this.dialogRef.content.instance;
    this.dialogModel.rowData = rowData;
    this.dialogModel.totalItems = total;

    const closeForm = this.dialogRef.content.instance.cancel.subscribe(
      (res) => {
        this.dialogRef.close();
      }
    );
  }

  addNew() {
    this.openEditorDialog(true);
  }

  isDisabledCheckBtn = () => {
    if (this.selectedRows.length == 0) return true;
    else if (this.selectedRows.length == 1) {
      var index = this.DataArray.findIndex(
        (rd) => rd.id === this.selectedRows[0]
      );
      if (
        index >= 0 &&
        this.DataArray[index].statusId == DocumentStatusValue.NotChecked
      )
        return false;
      else return true;
    } else {
      let conflit: boolean = false;
      for (var i = 0; i < this.selectedRows.length; i++) {
        var index = this.DataArray.findIndex(
          (rd) => rd.id === this.selectedRows[i]
        );
        if (
          index >= 0 &&
          this.DataArray[index].statusId != DocumentStatusValue.NotChecked
        ) {
          conflit = true;
          break;
        }
      }
      if (conflit) {
        this.commitGroup = false;
        return true;
      } else {
        this.commitGroup = true;
        return false;
      }
    }
  };

  isDisabledUnCheckBtn = () => {
    if (this.selectedRows.length == 0) return true;
    else if (this.selectedRows.length == 1) {
      var index = this.DataArray.findIndex(
        (rd) => rd.id === this.selectedRows[0]
      );
      if (
        index >= 0 &&
        this.DataArray[index].statusId == DocumentStatusValue.Checked
      )
        return false;
      else return true;
    } else {
      let conflit: boolean = false;
      for (var i = 0; i < this.selectedRows.length; i++) {
        var index = this.DataArray.findIndex(
          (rd) => rd.id === this.selectedRows[i]
        );
        if (
          index >= 0 &&
          this.DataArray[index].statusId != DocumentStatusValue.Checked
        ) {
          conflit = true;
          break;
        }
      }
      if (conflit) {
        this.returnFromCommitGroup = false;
        return true;
      } else {
        this.returnFromCommitGroup = true;
        return false;
      }
    }
  };

  isDisabledFinalizeBtn = () => {
    if (this.selectedRows.length == 0) return true;
    else if (this.selectedRows.length == 1) {
      var index = this.DataArray.findIndex(
        (rd) => rd.id === this.selectedRows[0]
      );
      if (
        index >= 0 &&
        this.DataArray[index].statusId == DocumentStatusValue.Checked
      )
        return false;
      else return true;
    } else {
      let conflit: boolean = false;
      for (var i = 0; i < this.selectedRows.length; i++) {
        var index = this.DataArray.findIndex(
          (rd) => rd.id === this.selectedRows[i]
        );
        if (
          index >= 0 &&
          this.DataArray[index].statusId != DocumentStatusValue.Checked
        ) {
          conflit = true;
          break;
        }
      }

      if (conflit) {
        this.finalizedGroup = false;
        return true;
      } else {
        this.finalizedGroup = true;
        return false;
      }
    }
  };

  isDisabledUnFinalizedBtn = () => {
    if (this.selectedRows.length == 0) return true;
    else if (this.selectedRows.length == 1) {
      var index = this.DataArray.findIndex(
        (rd) => rd.id === this.selectedRows[0]
      );
      if (
        index >= 0 &&
        this.DataArray[index].statusId == DocumentStatusValue.Finalized
      )
        return false;
      else return true;
    } else {
      let conflit: boolean = false;
      for (var i = 0; i < this.selectedRows.length; i++) {
        var index = this.DataArray.findIndex(
          (rd) => rd.id === this.selectedRows[i]
        );
        if (
          index >= 0 &&
          this.DataArray[index].statusId != DocumentStatusValue.Finalized
        ) {
          conflit = true;
          break;
        }
      }

      if (conflit) {
        this.returnFromFinalizedGroup = false;
        return true;
      } else {
        this.returnFromFinalizedGroup = true;
        return false;
      }
    }
  };

  isDisabledConfirmGroupBtn = () => {
    if (this.selectedRows.length == 1 || this.selectedRows.length == 0) {
      return true;
    } else {
      let conflit: boolean = false;

      for (var i = 0; i < this.selectedRows.length; i++) {
        var index = this.DataArray.findIndex(
          (rd) => rd.id === this.selectedRows[i]
        );
        if (
          index >= 0 &&
          this.DataArray[index].statusId == DocumentStatusValue.Checked
        ) {
          if (
            !(
              (this.DataArray[index].confirmedById == null &&
                this.DataArray[index].confirmerName != null) ||
              (this.DataArray[index].approvedById == null &&
                this.DataArray[index].approverName != null)
            )
          ) {
            conflit = true;
            break;
          }
        }
        if (
          index >= 0 &&
          this.DataArray[index].statusId != DocumentStatusValue.Checked
        ) {
          conflit = true;
          break;
        }
      }
      if (conflit) {
        return true;
      } else {
        return false;
      }
    }
  };
  isDisabledUnConfirmGroupBtn = () => {
    if (this.selectedRows.length == 1 || this.selectedRows.length == 0) {
      return true;
    } else {
      let conflit: boolean = false;

      for (var i = 0; i < this.selectedRows.length; i++) {
        var index = this.DataArray.findIndex(
          (rd) => rd.id === this.selectedRows[i]
        );
        if (
          index >= 0 &&
          this.DataArray[index].statusId == DocumentStatusValue.Checked
        ) {
          if (
            this.DataArray[index].approvedById == null &&
            this.DataArray[index].confirmedById == null
          ) {
            conflit = true;
            break;
          }
        }
        if (
          index >= 0 &&
          this.DataArray[index].statusId != DocumentStatusValue.Checked
        ) {
          conflit = true;
          break;
        }
      }
      if (conflit) {
        return true;
      } else {
        return false;
      }
    }
  };

  onCheckHandler() {
    if (this.validateVoucherSelection() && this.validateMultiTypeSelection()) {
      if (this.groupOperation) {
        //ثبت گروهی
        if (!this.validateMultiTypeSelection()) return;
        if (
          this.isNormalsOnlySelected() &&
          !this.checkPermissions(
            false,
            true,
            Entities.Vouchers,
            ManageVouchersPermissions.GroupCheck
          )
        )
          return;
        if (
          this.isDraftsOnlySelected() &&
          !this.checkPermissions(
            true,
            false,
            Entities.DraftVouchers,
            ManageDraftVouchersPermissions.GroupCheck
          )
        )
          return;

        this.grid.loading = true;
        let rowsId: Array<number> = [];
        this.selectedRows.forEach((item) => {
          rowsId.push(item);
        });
        var url = VoucherApi.CheckVouchers;
        if (this.selectedSubjectType == "1") {
          url = VoucherApi.CheckDraftVouchers;
        }

        this.voucherService.changeVouchersStatus(url, rowsId).subscribe(
          (res) => {
            var data: any = res;
            if (data.length == null || data.length == 0) {
              var message = this.getText("Voucher.OperationSuccessful");
              this.showMessage(message, MessageType.Succes);
            } else if (data.length > 0) {
              //show errorlist component
              this.openErrorListDialog(data, rowsId.length);
            }
            this.reloadGrid();
            this.selectedRows = [];
            this.DataArray = [];
          },
          (error) => {
            if (error)
              this.showMessage(
                this.errorHandlingService.handleError(error),
                MessageType.Warning
              );
          }
        );
      } else {
        //ثبت تکی
        if (
          this.isNormalsOnlySelected() &&
          !this.checkPermissions(
            false,
            true,
            Entities.Voucher,
            VoucherPermissions.Check
          )
        )
          return;
        if (
          this.isDraftsOnlySelected() &&
          !this.checkPermissions(
            true,
            false,
            Entities.DraftVoucher,
            DraftVoucherPermissions.Check
          )
        )
          return;

        var url = VoucherApi.CheckVoucher;
        if (this.selectedSubjectType == "1") {
          url = VoucherApi.CheckDraftVoucher;
        }

        this.voucherService
          .changeVoucherStatus(String.Format(url, this.selectedRows[0]))
          .subscribe(
            (res) => {
              this.reloadGrid();
              this.selectedRows = [];
              this.DataArray = [];
            },
            (error) => {
              //this.grid.loading = false;
              if (error)
                this.showMessage(
                  this.errorHandlingService.handleError(error),
                  MessageType.Warning
                );
            }
          );
      }
    }
  }

  onNormalizeHandler() {
    if (this.validateVoucherSelection()) {
      if (this.groupOperation) {
        //نرمال سازی گروهی
        if (!this.validateMultiTypeSelection()) {
          var message = this.getText("Voucher.PleaseSelectDraftVouchers");
          this.showMessage(message, MessageType.Warning);
          this.grid.loading = false;
          return;
        }
        if (this.isNormalsOnlySelected()) return;
        if (
          this.isDraftsOnlySelected() &&
          !this.checkPermissions(
            true,
            false,
            Entities.DraftVoucher,
            DraftVoucherPermissions.Normalize
          )
        )
          return;

        this.grid.loading = true;
        let rowsId: Array<number> = [];
        this.selectedRows.forEach((item) => {
          rowsId.push(item);
        });

        this.voucherService
          .changeVouchersStatus(VoucherApi.NormalizeVouchers, rowsId)
          .subscribe(
            (res) => {
              var data: any = res;
              if ((data != null && data.length == null) || data.length == 0) {
                var message = this.getText("Voucher.OperationSuccessful");
                this.showMessage(message, MessageType.Succes);
              } else if (data != null && data.length > 0) {
                //show errorlist component
                this.openErrorListDialog(data, rowsId.length);
              }
              this.reloadGrid();
              this.selectedRows = [];
              this.DataArray = [];
            },
            (error) => {
              //var message = error.message ? error.message : error;
              //this.grid.loading = false;
              //this.showMessage(message, MessageType.Warning);
              if (error)
                this.showMessage(
                  this.errorHandlingService.handleError(error),
                  MessageType.Warning
                );
            }
          );
      } else {
        //ثبت تکی
        if (this.isNormalsOnlySelected()) {
          var message = this.getText("Voucher.PleaseSelectDraftVouchers");
          this.showMessage(message, MessageType.Warning);
          this.grid.loading = false;
          return;
        }
        if (
          this.isDraftsOnlySelected() &&
          !this.checkPermissions(
            true,
            false,
            Entities.DraftVoucher,
            DraftVoucherPermissions.Normalize
          )
        )
          return;

        this.voucherService
          .changeVoucherStatus(
            String.Format(VoucherApi.NormalizeVoucher, this.selectedRows[0])
          )
          .subscribe(
            (res) => {
              this.reloadGrid();
              this.selectedRows = [];
              this.DataArray = [];
            },
            (error) => {
              //var message = error.message ? error.message : error;
              //this.showMessage(message, MessageType.Warning);
              if (error)
                this.showMessage(
                  this.errorHandlingService.handleError(error),
                  MessageType.Warning
                );
            }
          );
      }
    }
  }

  onUnCheckHandler() {
    if (this.validateVoucherSelection() && this.validateMultiTypeSelection()) {
      if (this.groupOperation) {
        //برگشت سند گروهی
        if (!this.validateMultiTypeSelection()) return;
        if (
          this.isNormalsOnlySelected() &&
          !this.checkPermissions(
            false,
            true,
            Entities.Vouchers,
            ManageVouchersPermissions.GroupUndoCheck
          )
        )
          return;
        if (
          this.isDraftsOnlySelected() &&
          !this.checkPermissions(
            true,
            false,
            Entities.DraftVouchers,
            ManageDraftVouchersPermissions.GroupUndoCheck
          )
        )
          return;

        this.grid.loading = true;
        let rowsId: Array<number> = [];
        this.selectedRows.forEach((item) => {
          rowsId.push(item);
        });

        var url = VoucherApi.UndoCheckVouchers;
        if (this.selectedSubjectType == "1") {
          url = VoucherApi.UndoCheckDraftVouchers;
        }

        this.voucherService.changeVouchersStatus(url, rowsId).subscribe(
          (res) => {
            var data: any = res;
            if (data.length == null || data.length == 0) {
              var message = this.getText("Voucher.OperationSuccessful");
              this.showMessage(message, MessageType.Succes);
            } else if (data.length > 0) {
              //show errorlist component
              this.openErrorListDialog(data, rowsId.length);
            }

            this.reloadGrid();
            this.selectedRows = [];
            this.DataArray = [];
          },
          (error) => {
            //var message = error.message ? error.message : error;
            //this.grid.loading = false;
            //this.showMessage(message, MessageType.Warning);
            if (error)
              this.showMessage(
                this.errorHandlingService.handleError(error),
                MessageType.Warning
              );
          }
        );
      } else {
        //برگشت سند تکی
        if (
          this.isNormalsOnlySelected() &&
          !this.checkPermissions(
            false,
            true,
            Entities.Voucher,
            VoucherPermissions.UndoCheck
          )
        )
          return;
        if (
          this.isDraftsOnlySelected() &&
          !this.checkPermissions(
            true,
            false,
            Entities.DraftVoucher,
            DraftVoucherPermissions.UndoCheck
          )
        )
          return;

        var url = VoucherApi.UndoCheckVoucher;
        if (this.selectedSubjectType == "1") {
          url = VoucherApi.UndoCheckDraftVoucher;
        }

        this.voucherService
          .changeVoucherStatus(String.Format(url, this.selectedRows[0]))
          .subscribe(
            (res) => {
              this.reloadGrid();
              this.selectedRows = [];
              this.DataArray = [];
            },
            (error) => {
              //var message = error.message ? error.message : error;
              //this.showMessage(message, MessageType.Warning);
              if (error)
                this.showMessage(
                  this.errorHandlingService.handleError(error),
                  MessageType.Warning
                );
            }
          );
      }
    }
  }

  onFinalizeHandler() {
    if (this.validateVoucherSelection()) {
      if (this.groupOperation) {
        //ثبت قطعی گروهی
        if (!this.validateMultiTypeSelection()) return;
        if (this.IsDraftVouchersSelected()) return;
        if (!this.validateDraftVouchersRowsSelected()) return;

        if (
          this.isNormalsOnlySelected() &&
          !this.checkPermissions(
            false,
            true,
            Entities.Voucher,
            ManageVouchersPermissions.GroupFinalize
          )
        )
          return;
        this.grid.loading = true;
        let rowsId: Array<number> = [];
        this.selectedRows.forEach((item) => {
          rowsId.push(item);
        });

        this.voucherService
          .changeVouchersStatus(VoucherApi.FinalizeVouchers, rowsId)
          .subscribe(
            (res) => {
              var data: any = res;
              if (data.length == null || data.length == 0) {
                var message = this.getText("Voucher.OperationSuccessful");
                this.showMessage(message, MessageType.Succes);
              } else if (data.length > 0) {
                //show errorlist component
                this.openErrorListDialog(data, rowsId.length);
              }

              this.reloadGrid();
              this.selectedRows = [];
              this.DataArray = [];
            },
            (error) => {
              //var message = error.message ? error.message : error;
              //this.grid.loading = false;
              //this.showMessage(message, MessageType.Warning);
              if (error)
                this.showMessage(
                  this.errorHandlingService.handleError(error),
                  MessageType.Warning
                );
            }
          );
      } else {
        //ثبت قطعی تکی

        if (
          this.isNormalsOnlySelected() &&
          !this.checkPermissions(
            false,
            true,
            Entities.Voucher,
            VoucherPermissions.Finalize
          )
        )
          return;

        if (this.validateVoucherTypeSelection()) {
          if (this.IsDraftVouchersSelected()) return;
          if (!this.validateDraftVouchersRowsSelected()) return;

          this.voucherService
            .changeVoucherStatus(
              String.Format(VoucherApi.FinalizeVoucher, this.selectedRows[0])
            )
            .subscribe(
              (res) => {
                this.reloadGrid();
                this.selectedRows = [];
                this.DataArray = [];
              },
              (error) => {
                //var message = error.message ? error.message : error;
                //this.showMessage(message, MessageType.Warning);
                if (error)
                  this.showMessage(
                    this.errorHandlingService.handleError(error),
                    MessageType.Warning
                  );
              }
            );
        }
      }
    }
  }

  onUnFinalizedHandler() {
    if (this.validateVoucherSelection()) {
      if (this.groupOperation) {
        //برگشت از ثبت قطعی گروهی
        if (!this.validateMultiTypeSelection()) return;
        if (this.IsDraftVouchersSelected()) return;
        if (!this.validateDraftVouchersRowsSelected()) return;

        this.grid.loading = true;
        let rowsId: Array<number> = [];
        this.selectedRows.forEach((item) => {
          rowsId.push(item);
        });

        this.voucherService
          .changeVouchersStatus(VoucherApi.UndoFinalizeVouchers, rowsId)
          .subscribe(
            (res) => {
              var data: any = res;
              if (data.length == null || data.length == 0) {
                var message = this.getText("Voucher.OperationSuccessful");
                this.showMessage(message, MessageType.Succes);
              } else if (data.length > 0) {
                //show errorlist component
                this.openErrorListDialog(data, rowsId.length);
              }

              this.reloadGrid();
              this.selectedRows = [];
              this.DataArray = [];
            },
            (error) => {
              //var message = error.message ? error.message : error;
              this.grid.loading = false;
              //this.showMessage(message, MessageType.Warning);
              if (error)
                this.showMessage(
                  this.errorHandlingService.handleError(error),
                  MessageType.Warning
                );
            }
          );
      } else {
        //ثبت قطعی تکی
        if (this.validateVoucherTypeSelection()) {
          if (this.IsDraftVouchersSelected()) return;
          if (!this.validateDraftVouchersRowsSelected()) return;

          this.voucherService
            .changeVoucherStatus(
              String.Format(
                VoucherApi.UndoFinalizeVoucher,
                this.selectedRows[0]
              )
            )
            .subscribe(
              (res) => {
                this.reloadGrid();
                this.selectedRows = [];
                this.DataArray = [];
              },
              (error) => {
                //var message = error.message ? error.message : error;
                //this.showMessage(message, MessageType.Warning);
                if (error)
                  this.showMessage(
                    this.errorHandlingService.handleError(error),
                    MessageType.Warning
                  );
              }
            );
        }
      }
    }
  }

  onConfirmGroupHandler() {
    if (this.validateVoucherSelection()) {
      // تایید گروهی
      if (!this.validateMultiTypeSelection()) return;
      if (this.IsDraftVouchersSelected()) return;
      if (!this.validateDraftVouchersRowsSelected()) return;

      if (
        this.isNormalsOnlySelected() &&
        !this.checkPermissions(
          false,
          true,
          Entities.Voucher,
          ManageVouchersPermissions.GroupConfirm
        )
      )
        return;

      this.grid.loading = true;
      let rowsId: Array<number> = [];
      this.selectedRows.forEach((item) => {
        rowsId.push(item);
      });

      this.voucherService
        .changeVouchersStatus(VoucherApi.ConfirmVouchers, rowsId)
        .subscribe(
          (res) => {
            var data: any = res;
            if (data.length == null || data.length == 0) {
              var message = this.getText("Voucher.OperationSuccessful");
              this.showMessage(message, MessageType.Succes);
            } else if (data.length > 0) {
              //show errorlist component
              this.openErrorListDialog(data, rowsId.length);
            }

            this.reloadGrid();
            this.selectedRows = [];
            this.DataArray = [];
          },
          (error) => {
            if (error)
              this.showMessage(
                this.errorHandlingService.handleError(error),
                MessageType.Warning
              );
          }
        );
    }
  }

  onConfirmHandler() {
    if (this.validateVoucherSelection()) {
      if (!this.validateMultiTypeSelection()) return;
      if (this.IsDraftVouchersSelected()) return;
      if (!this.validateDraftVouchersRowsSelected()) return;
      if (
        this.isNormalsOnlySelected() &&
        !this.checkPermissions(
          false,
          true,
          Entities.Voucher,
          VoucherPermissions.Confirm
        )
      )
        return;
      // تایید تکی
      this.grid.loading = true;
      let rowsId: Array<number> = [];
      this.selectedRows.forEach((item) => {
        rowsId.push(item);
      });

      this.voucherService
        .changeVoucherStatus(
          String.Format(VoucherApi.ConfirmVoucher, rowsId[0])
        )
        .subscribe(
          (res) => {
            var data: any = res;
            if (data == null || data.length == null || data.length == 0) {
              var message = this.getText("Voucher.OperationSuccessful");
              this.showMessage(message, MessageType.Succes);
            } else if (data.length > 0) {
              //show errorlist component
              this.openErrorListDialog(data, rowsId.length);
            }

            this.reloadGrid();
            this.selectedRows = [];
            this.DataArray = [];
          },
          (error) => {
            if (error)
              this.showMessage(
                this.errorHandlingService.handleError(error),
                MessageType.Warning
              );
          }
        );
    }
  }

  onUnConfirmGroupHandler(isGroup: boolean) {
    if (this.validateVoucherSelection() && this.validateMultiTypeSelection()) {
      if (this.IsDraftVouchersSelected()) return;
      if (!this.validateDraftVouchersRowsSelected()) return;

      this.UnConfirmGroupConfirm = true;
      this.isGroupUndoConfirm = isGroup;
    }
  }

  onSelectedKeysChange(e: any) {
    this.fillSelectedRowsData(e);
    if (this.selectedRows.length <= 1) {
      this.returnFromCommitGroup = false;
      this.finalizedGroup = false;
      this.commitGroup = false;
      this.returnFromFinalizedGroup = false;
      this.groupOperation = false;
    } else {
      this.groupOperation = true;
    }

    this.setPermissions();
  }
  fillSelectedRowsData(e: any) {
    for (var i = 0; i < e.length; i++) {
      var result = this.DataArray.findIndex(
        (rd) => rd.id === this.selectedRows[i]
      );
      if (result == -1) {
        var indexRecord = this.rowData.data.findIndex(
          (rd) => rd.id === this.selectedRows[i]
        );
        var selectedRow = this.rowData.data[indexRecord];
        var voucherModel = {
          id: selectedRow.id,
          statusId: selectedRow.statusId,
          approvedById: selectedRow.approvedById,
          approverName: selectedRow.approverName,
          confirmedById: selectedRow.confirmedById,
          confirmerName: selectedRow.confirmerName,
          isApproved: selectedRow.isApproved,
          isConfirmed: selectedRow.isConfirmed,
          subjectType: selectedRow.subjectType,
        };
        this.DataArray.push(voucherModel);
      }
    }
    for (var i = 0; i < this.DataArray.length; i++) {
      var findIndex = e.findIndex((rd) => rd === this.DataArray[i].id);

      if (findIndex == -1) {
        this.DataArray.splice(i, 1);
      }
    }
  }
  getBalanceValue(columnName: string, dataItem: any, dataType: string): any {
    var colName = columnName.charAt(0).toLowerCase() + columnName.slice(1);
    var res = dataItem[colName];
    var result = res;
    if (res == true) {
      result = this.getText("Voucher.Balanced");
    } else {
      result = this.getText("Voucher.Unbalanced");
    }
    return result;
  }

  getVerifidAndapproveValue(
    columnName: string,
    dataItem: any,
    dataType: string
  ): any {
    var colName = columnName.charAt(0).toLowerCase() + columnName.slice(1);
    var res = dataItem[colName];

    var result = res;
    if (res == true) {
      result = this.getText("Voucher.Yes");
    } else {
      result = this.getText("Voucher.Not");
    }
    return result;
  }

  validateVoucherSelection() {
    if (this.selectedRows.length == 0) {
      var message = this.getText("Voucher.PleaseSelectVouchers");
      this.showMessage(message, MessageType.Warning);
      return false;
    }
    return true;
  }

  validateVoucherTypeSelection() {
    if (this.selectedRows.length > 0 && this.DataArray[0].subjectType == 1) {
      var message = this.getText("Voucher.PleaseSelectNormalVouchers");
      this.showMessage(message, MessageType.Warning);
      this.grid.loading = false;
      return false;
    }
    return true;
  }

  IsNormalVouchersSelected() {
    if (this.selectedSubjectType == "0") {
      var message = this.getText("Voucher.PleaseSelectDraftVouchers");
      this.showMessage(message, MessageType.Warning);
      this.grid.loading = false;
      return true;
    }
    return false;
  }

  IsDraftVouchersSelected() {
    if (this.selectedSubjectType == "1") {
      var message = this.getText("Voucher.PleaseSelectNormalVouchers");
      this.showMessage(message, MessageType.Warning);
      this.grid.loading = false;
      return true;
    }
    return false;
  }

  validateDraftVouchersRowsSelected() {
    if (this.isDraftsOnlySelected()) {
      var message = this.getText("Voucher.PleaseSelectNormalVouchers");
      this.showMessage(message, MessageType.Warning);
      this.grid.loading = false;
      return false;
    }

    return true;
  }

  validateMultiTypeSelection() {
    if (this.isMultiTypeOfVoucher()) {
      this.showMessage(this.getText("Voucher.PleaseSelectOneTypeOfVouchers"));
      this.grid.loading = false;
      return false;
    } else return true;
  }

  isMultiTypeOfVoucher() {
    var isNormal: boolean;
    var isDraft: boolean;

    if (this.selectedRows.length > 0) {
      for (var i = 0; i < this.DataArray.length; i++) {
        if (this.DataArray[i].subjectType == 0) isNormal = true;

        if (this.DataArray[i].subjectType == 1) isDraft = true;
      }
      if (isDraft && isNormal) {
        return true;
      }
    }

    return false;
  }

  isDraftsOnlySelected() {
    var isNormal: boolean;
    var isDraft: boolean;

    if (this.selectedRows.length > 0) {
      for (var i = 0; i < this.DataArray.length; i++) {
        if (this.DataArray[i].subjectType == 0) isNormal = true;

        if (this.DataArray[i].subjectType == 1) isDraft = true;
      }
      if (isDraft && !isNormal) {
        return true;
      }
    }

    return false;
  }

  isNormalsOnlySelected() {
    var isNormal: boolean;
    var isDraft: boolean;

    if (this.selectedRows.length > 0) {
      for (var i = 0; i < this.DataArray.length; i++) {
        if (this.DataArray[i].subjectType == 0) isNormal = true;

        if (this.DataArray[i].subjectType == 1) isDraft = true;
      }
      if (!isDraft && isNormal) {
        return true;
      }
    }

    return false;
  }

  onAdvanceFilterOk() {
    this.getVouchers();
  }

  changeParam() {}
}
