import {
  ChangeDetectorRef,
  Component,
  ElementRef,
  NgZone,
  OnDestroy,
  OnInit,
  Renderer2,
  ViewChild,
} from "@angular/core";
import { TranslateService } from "@ngx-translate/core";
import { GridComponent } from "@progress/kendo-angular-grid";
import { RTL } from "@progress/kendo-angular-l10n";
import { User } from "@sppc/admin/models";
import { RelatedItemsInfo, UserInfo, UserService } from "@sppc/admin/service";
import { UserApi } from "@sppc/admin/service/api";
import { SettingService } from "@sppc/config/service";
import { ServiceLocator } from "@sppc/service.locator";
import { AutoGeneratedGridComponent } from "@sppc/shared/class";
import { ResultOption } from "@sppc/shared/class/result.option";
import { String } from "@sppc/shared/class/source";
import { ReportViewerComponent, ViewIdentifierComponent } from "@sppc/shared/components";
import { QuickReportSettingComponent } from "@sppc/shared/components/reportManagement/QuickReport-Setting.component";
import { ReportManagementComponent } from "@sppc/shared/components/reportManagement/reportManagement.component";
import { Entities, Layout, MessageType } from "@sppc/shared/enum/metadata";
import { OperationId } from "@sppc/shared/enum/operationId";
import { RelatedItems } from "@sppc/shared/models";
import { ViewName } from "@sppc/shared/security";
import {
  BrowserStorageService,
  GridService,
  MetaDataService,
} from "@sppc/shared/services";
import { ShareDataService } from "@sppc/shared/services/share-data.service";
import { ToastrService } from "ngx-toastr";
// import "rxjs/Rx";

export function getLayoutModule(layout: Layout) {
  return layout.getLayout();
}

@Component({
  selector: "user",
  templateUrl: "./user.component.html",
  providers: [
    {
      provide: RTL,
      useFactory: getLayoutModule,
      deps: [Layout],
    },
  ],
})
export class UserComponent
  extends AutoGeneratedGridComponent
  implements OnInit,OnDestroy
{

  scopes = ["UserComponent","AutoGeneratedGridComponent"];


  rolesList: boolean = false;
  isNew: boolean;
  isActive: boolean;

  // Report
  @ViewChild(GridComponent, {static: true}) grid: GridComponent;
  @ViewChild(ViewIdentifierComponent, {static: true}) viewIdentity: ViewIdentifierComponent;
  @ViewChild(ReportViewerComponent, {static: true}) viewer: ReportViewerComponent;
  @ViewChild(ReportManagementComponent, {static: true}) reportManager: ReportManagementComponent;
  @ViewChild(QuickReportSettingComponent, {static: true}) reportSetting: QuickReportSettingComponent;

  //editDataItem?: User = undefined;
  userRolesData: RelatedItemsInfo;

  constructor(
    public toastrService: ToastrService,
    public translate: TranslateService,
    public gridService: GridService,
    public bStorageService: BrowserStorageService,
    public cdref: ChangeDetectorRef,
    public renderer: Renderer2,
    public metadata: MetaDataService,
    private userService: UserService,
    public settingService: SettingService,
    public ngZone: NgZone,
    public elem: ElementRef
  ) {
    super(
      toastrService,
      translate,
      gridService,
      renderer,
      metadata,
      settingService,
      bStorageService,
      cdref,
      ngZone,
      elem
    );

    this.scopeService = ServiceLocator.injector.get(ShareDataService);    
    this.scopeService.setScope(this);
  }

  ngOnInit() {
    this.entityName = Entities.User;
    this.viewId = ViewName[this.entityTypeName];

    this.getDataUrl = String.Format(
      UserApi.Users,
      this.FiscalPeriodId,
      this.BranchId
    );
    this.reloadGrid();
    this.cdref.detectChanges();
  }

  ngOnDestroy(): void {    
    this.scopeService = ServiceLocator.injector.get(ShareDataService);    
    this.scopeService.clearScope(this);
  }

  public editHandler(arg: any) {
    var recordId = this.selectedRows[0]; //.id;
    this.grid.loading = true;
    this.userService
      .getById(String.Format(UserApi.User, recordId))
      .subscribe((res) => {
        this.editDataItem = res;
        this.grid.loading = false;
      });
    this.isNew = false;
  }

  public cancelHandler() {
    this.editDataItem = undefined;
    this.isNew = false;
  }

  public saveUserRolesHandler(userRoles: RelatedItems) {
    this.grid.loading = true;
    this.gridService.submitted.next(true)
    this.userService.modifiedUserRoles(userRoles).subscribe(
      (response) => {
        this.rolesList = false;
        this.showMessage(this.getText("User.UpdateRoles"), MessageType.Succes);
        this.grid.loading = false;
        this.gridService.submitted.next(false)
      },
      (error) => {
        this.grid.loading = false;
        this.gridService.submitted.next(false)
        this.errorMessages = this.errorHandlingService.handleError(error);
      }
    );
  }

  public saveUser(model: User) {
    var serviceUrl = this.isNew
      ? UserApi.Users
      : String.Format(UserApi.User, model.id);
    this.saveHandler(model, this.isNew, this.userService, serviceUrl)
      .then((success: ResultOption) => {
        this.isActive = false;
        this.highLightNewRow(model.userName)
      })
      .catch((error: ResultOption) => {
        // error handler is called
        this.isActive = true;
        this.errorMessages = this.errorHandlingService.handleError(error.error);
      });
  }

  // Filter
  onAdvanceFilterOk() {
    this.enableViewListChanged(this.viewId);
    this.operationId = OperationId.Filter;
    this.reloadGrid();
  }

  public rolesHandler() {
    var userId = this.selectedRows[0]; //.id;
    this.rolesList = true;
    this.grid.loading = true;
    this.userService.getUserRoles(userId).subscribe((res: any) => {
      this.userRolesData = res;
      this.grid.loading = false;
    });

    this.errorMessages = [];
  }

  public cancelUserRolesHandler() {
    this.rolesList = false;
    this.errorMessages = [];
  }

  public addNew() {
    this.isNew = true;
    this.isActive = true;
    this.editDataItem = new UserInfo();
    this.errorMessages = [];
  }
}
