// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.0.0
//     Template Version: 1.0
//     Generation Date: 2017-02-18 1:18:17 PM
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Net;
using System.Web.Http;
using SPPC.Framework.Values;
using SPPC.Tadbir.Api;
using SPPC.Tadbir.NHibernate;
using SPPC.Tadbir.Security;
using SPPC.Tadbir.Values;
using SPPC.Tadbir.ViewModel.Finance;
using SPPC.Tadbir.ViewModel.UI;
using SPPC.Tadbir.Web.Api.Filters;

namespace SPPC.Tadbir.Web.Api.Controllers
{
    public partial class AccountsController : ApiController
    {
        public AccountsController(IAccountRepository repository)
        {
            _repository = repository;
        }

        // GET: api/accounts/fp/{fpId:int}/branch/{branchId:int}
        [Route(AccountApi.FiscalPeriodBranchAccountsUrl)]
        [AuthorizeRequest(SecureEntity.Account, (int)AccountPermissions.View)]
        public IHttpActionResult GetAccounts(int fpId, int branchId, [FromBody] GridOptions options = null)
        {
            if (fpId <= 0 || branchId <= 0)
            {
                return NotFound();
            }

            var accounts = _repository.GetAccounts(fpId, branchId);
            return Json(accounts);
        }

        // GET: api/accounts/{accountId:int}
        [Route(AccountApi.AccountUrl)]
        [AuthorizeRequest(SecureEntity.Account, (int)AccountPermissions.View)]
        public IHttpActionResult GetAccount(int accountId)
        {
            if (accountId <= 0)
            {
                return NotFound();
            }

            var account = _repository.GetAccount(accountId);
            var result = (account != null)
                ? Json(account)
                : NotFound() as IHttpActionResult;

            return result;
        }

        // POST: api/accounts
        [Route(AccountApi.AccountsUrl)]
        [AuthorizeRequest(SecureEntity.Account, (int)AccountPermissions.Create)]
        public IHttpActionResult PostNewAccount([FromBody] AccountViewModel account)
        {
            if (account == null)
            {
                return BadRequest("Could not post new account because a 'null' value was provided.");
            }

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (_repository.IsDuplicateAccount(account))
            {
                var message = String.Format(ValidationMessages.DuplicateFieldValue, FieldNames.AccountCodeField);
                return BadRequest(message);
            }

            _repository.SaveAccount(account);
            return StatusCode(HttpStatusCode.Created);
        }

        // PUT: api/accounts/{accountId:int}
        [Route(AccountApi.AccountUrl)]
        [AuthorizeRequest(SecureEntity.Account, (int)AccountPermissions.Edit)]
        public IHttpActionResult PutModifiedAccount(int accountId, [FromBody] AccountViewModel account)
        {
            if (account == null)
            {
                return BadRequest("Could not put modified account because a 'null' value was provided.");
            }

            if (accountId <= 0 || account.Id <= 0)
            {
                return BadRequest("Could not put modified account because original account does not exist.");
            }

            if (accountId != account.Id)
            {
                return BadRequest("Could not put modified account because of an identity conflict in the request.");
            }

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (_repository.IsDuplicateAccount(account))
            {
                var message = String.Format(ValidationMessages.DuplicateFieldValue, FieldNames.AccountCodeField);
                return BadRequest(message);
            }

            _repository.SaveAccount(account);
            return Ok();
        }

        private IAccountRepository _repository;
    }
}
