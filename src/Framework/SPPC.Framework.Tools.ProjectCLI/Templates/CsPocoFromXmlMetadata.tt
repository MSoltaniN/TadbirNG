<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="BabakSoft.Platform.Metadata" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: <#= _version #>
//     Template Version: 1.0
//     Generation Date: <#= DateTime.Now.ToString() #>
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using SPPC.Framework.Domain;

<# var codeNamespace = NamespaceUtil.GetNamespace(_entity.Repository, "Model", _entity.Area); #>
namespace <#= codeNamespace #>
{
<#  if(!String.IsNullOrWhiteSpace(_entity.Description))
    { #>
    /// <summary>
    /// <#= _entity.Description #>
    /// </summary>
<#  } #>
    public partial class <#= _entity.Name #> : IEntity
    {
        /// <summary>
        /// نمونه جدیدی از این کلاس می سازد
        /// </summary>
        public <#= _entity.Name #>()
        {
<#
var textProps = _entity.Properties.Where(prop => prop.Type.ToString() == "String");
foreach(var textProp in textProps)
{ #>
            <#= textProp.Name #> = String.Empty;
<# } #>
            ModifiedDate = DateTime.Now;
            InitReferences();
        }

<#
foreach(var property in _entity.Properties)
{
    if(property.Name == "Id")
    { #>
        /// <summary>
        /// شناسه دیتابیسی این موجودیت که به صورت خودکار توسط دیتابیس تولید می شود
        /// </summary>
        public virtual int Id { get; set; }
<#  }
    else if(property.Name == "RowGuid")
    { #>

        /// <summary>
        /// شناسه یکتای ردیف دیتابیسی که به صورت خودکار توسط دیتابیس مقداردهی می شود
        /// </summary>
        public virtual Guid RowGuid { get; set; }
<#  }
    else if(property.Name == "ModifiedDate")
    { #>

        /// <summary>
        /// تاریخ آخرین تغییر رکورد دیتابیس که به صورت خودکار توسط ابزار دسترسی به داده مقداردهی می شود
        /// </summary>
        public virtual DateTime ModifiedDate { get; set; }
<#  }
    else
    {
        if(!String.IsNullOrWhiteSpace(property.Description))
        { #>

        /// <summary>
        /// <#= property.Description #>
        /// </summary>
<#      } #>
        public virtual <#= this.GetTypeAlias(property) #> <#= property.Name #> { get; set; }
<#  }
}
foreach (var relation in _entity.Relations)
{ #>

<#  if (!String.IsNullOrEmpty(relation.Description))
    { #>
        /// <summary>
        /// <#= relation.Description #>
        /// </summary>
<#  }
    if (relation.Multiplicity == RelationMultiplicity.OneToOne || relation.Multiplicity == RelationMultiplicity.ManyToOne)
    { #>
        public virtual <#= relation.EntityName #> <#= relation.Name #> { get; set; }
<#  }
    else if (relation.Multiplicity == RelationMultiplicity.OneToMany)
    { #>
        public virtual IList<<#= relation.EntityName #>> <#= relation.Name #> { get; protected set; }
<#  }
    else if (relation.Multiplicity == RelationMultiplicity.ManyToMany)
    { #>
        public virtual IList<<#= relation.JoinTable #>> <#= relation.JoinTable #>s { get; protected set; }
<#  }
} #>

        private void InitReferences()
        {
<#
foreach (var relation in _entity.Relations)
{
    if (relation.Multiplicity == RelationMultiplicity.OneToMany)
    { #>
            <#= relation.Name #> = new List<<#= relation.EntityName #>>();
<#  }
    if (relation.Multiplicity == RelationMultiplicity.ManyToMany)
    { #>
            <#= relation.JoinTable #>s = new List<<#= relation.JoinTable #>>();
<#  }
    if (relation.Multiplicity == RelationMultiplicity.ManyToOne)
    { #>
            <#= relation.Name #> = new <#= relation.EntityName #>();
<#  }
} #>
        }
    }
}
