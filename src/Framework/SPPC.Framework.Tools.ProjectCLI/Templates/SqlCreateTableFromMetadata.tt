<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
string dbName = "ApplicationDb";
if (_entities.Length > 0)
{
    dbName = _entities[0].Repository.Database;
}
#>
USE [<#= dbName #>]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

<#
foreach (var entity in _entities)
{
    SetupTokenPadding(entity);
    var tableName = String.Format("[{0}].[{1}]", entity.Area, entity.Name);
    var idProperty = entity.Properties.Where(prop => prop.Name == entity.Identifier).FirstOrDefault();
#>
/****** Object: Table <#= tableName #> Script Date: <#= DateTime.Now.ToString() #> ******/
CREATE TABLE <#= tableName #> (
    <#= PadFieldName(idProperty.Storage.Name) #><#= PadTypeName("INT") #>IDENTITY (1, 1) NOT NULL,
<# foreach (var relation in entity.Relations.Where(rel => rel.HasKey))
   {
      string fieldName = String.Format("{0}ID", relation.EndpointName); #>
    <#= PadFieldName(fieldName) #><#= PadTypeName("INT") #>NOT NULL,
<# }

   var nonIdProps = entity.Properties.Where(prop => prop.Name != entity.Identifier).ToList();
   for (int i = 0; i < nonIdProps.Count; i++)
   {
       var property = nonIdProps.ElementAt(i);
       var nullable = property.Storage.Nullable ? "NULL" : "NOT NULL";
       if (i < nonIdProps.Count - 1)
       {
           if (property.Storage.Name == "rowguid")
           { #>
    <#= PadFieldName(property.Storage.Name) #><#= PadTypeName(property.Storage.Type.ToUpper()) #>CONSTRAINT [DF_<#= entity.Area #>_<#= entity.Name #>_rowguid] DEFAULT (newid()) ROWGUIDCOL <#= nullable #>,
<#         }
           else if (property.Name == "ModifiedDate")
           {#>
    <#= PadFieldName(property.Storage.Name) #><#= PadTypeName(property.Storage.Type.ToUpper()) #>CONSTRAINT [DF_<#= entity.Area #>_<#= entity.Name #>_ModifiedDate] DEFAULT (getdate()) <#= nullable #>,
<#         }
           else
           {#>
    <#= PadFieldName(property.Storage.Name) #><#= PadTypeName(property.Storage.Type.ToUpper()) #><#= nullable #>,
<#         }
       }
       else
	   {
           if (property.Storage.Name == "rowguid")
           { #>
    <#= PadFieldName(property.Storage.Name) #><#= PadTypeName(property.Storage.Type.ToUpper()) #>CONSTRAINT [DF_<#= entity.Area #>_<#= entity.Name #>_rowguid] DEFAULT (newid()) ROWGUIDCOL <#= nullable #>
<#         }
           else if (property.Name == "ModifiedDate")
           {#>
    <#= PadFieldName(property.Storage.Name) #><#= PadTypeName(property.Storage.Type.ToUpper()) #>CONSTRAINT [DF_<#= entity.Area #>_<#= entity.Name #>_ModifiedDate] DEFAULT (getdate()) <#= nullable #>
<#         }
           else
           {#>
    <#= PadFieldName(property.Storage.Name) #><#= PadTypeName(property.Storage.Type.ToUpper()) #><#= nullable #>
<#         }
       }
   }

   if (idProperty != null)
   {
#>
    , CONSTRAINT [PK_<#= entity.Area #>_<#= entity.Name #>] PRIMARY KEY CLUSTERED ([<#= idProperty.Storage.Name #>] ASC)
<# }
   foreach (var relation in entity.Relations.Where(rel => rel.HasKey))
   {#>
    , CONSTRAINT [FK_<#= entity.Area #>_<#= entity.Name #>_<#= GetRelationArea(entity, relation) #>_<#= relation.EndpointName #>] FOREIGN KEY ([<#= relation.EndpointName #>ID]) REFERENCES [<#= entity.Area #>].[<#= relation.EntityName #>]([<#= relation.EntityName #>ID])
<# }
#>
)
GO

<#
}
#>
SET QUOTED_IDENTIFIER OFF
GO

SET ANSI_NULLS OFF
GO
