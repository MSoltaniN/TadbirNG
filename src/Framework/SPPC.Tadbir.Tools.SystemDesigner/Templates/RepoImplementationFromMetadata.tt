<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
var entityInfo = _model;
var entity = entityInfo.Entity;
var plural = GetPluralName(entity.Name);
var camelCase = entity.Name.CamelCase();
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using SPPC.Framework.Common;
using SPPC.Framework.Mapper;
using SPPC.Framework.Presentation;
using SPPC.Tadbir.Domain;
using SPPC.Tadbir.Model.<#= entity.Area #>;
using SPPC.Tadbir.ViewModel.Auth;
<# if(entity.Area != "Auth")
{ #>
using SPPC.Tadbir.ViewModel.<#= entity.Area #>;
<# } #>

namespace SPPC.Tadbir.Persistence
{
    /// <summary>
    /// عملیات مورد نیاز برای مدیریت <#= entityInfo.PluralName #> را پیاده سازی میکند
    /// </summary>
    public class <#= entity.Name #>Repository : LoggingRepository<<#= entity.Name #>, <#= entity.Name #>ViewModel>, I<#= entity.Name #>Repository
    {
        /// <summary>
        /// نمونه جدیدی از این کلاس می سازد
        /// </summary>
        /// <param name="context">امکانات مشترک مورد نیاز را برای عملیات دیتابیسی فراهم می کند</param>
        /// <param name="system">امکانات مورد نیاز در دیتابیس های سیستمی را فراهم می کند</param>
        public <#= entity.Name #>Repository(IRepositoryContext context, ISystemRepository system)
            : base(context, system.Logger)
        {
            _system = system;
        }

        /// <summary>
        /// به روش آسنکرون، کلیه <#= entityInfo.PluralName #> را خوانده و برمی گرداند
        /// </summary>
        /// <param name="gridOptions">گزینه های مورد نظر برای نمایش رکوردها در نمای لیستی</param>
        /// <returns>مجموعه ای از <#= entityInfo.PluralName #> تعریف شده</returns>
        public async Task<IList<<#= entity.Name #>ViewModel>> Get<#= plural #>Async(GridOptions gridOptions = null)
        {
<# if(entityInfo.IsFiscalEntity)
   { #>
            var <#= plural.CamelCase() #> = await Repository.GetAllAsync<<#= entity.Name #>>(ViewName.<#= entity.Name #>);
            return <#= plural.CamelCase() #>
                .Select(item => Mapper.Map<<#= entity.Name #>ViewModel>(item))
                .Apply(gridOptions)
                .ToList();
<# }
   else
   { #>
            var repository = UnitOfWork.GetAsyncRepository<<#= entity.Name #>>();
            var <#= plural.CamelCase() #> = await repository
                .GetEntityQuery()
                .Select(item => Mapper.Map<<#= entity.Name #>ViewModel>(item))
                .ToListAsync();
            return <#= plural.CamelCase() #>
                .Apply(gridOptions)
                .ToList();
<# } #>
        }

        /// <summary>
        /// به روش آسنکرون، تعداد <#= entityInfo.PluralName #> را خوانده و برمی گرداند
        /// </summary>
        /// <param name="gridOptions">گزینه های مورد نظر برای نمایش رکوردها در نمای لیستی</param>
        /// <returns>تعداد <#= entityInfo.PluralName #></returns>
        public async Task<int> GetCountAsync(GridOptions gridOptions = null)
        {
<# if(entityInfo.IsFiscalEntity)
   { #>
            return await Repository.GetCountAsync<<#= entity.Name #>, <#= entity.Name #>ViewModel>(
                ViewName.<#= entity.Name #>, gridOptions);
<# }
   else
   { #>
            var repository = UnitOfWork.GetAsyncRepository<<#= entity.Name #>>();
            var items = await repository
                .GetEntityQuery()
                .Select(item => Mapper.Map<<#= entity.Name #>ViewModel>(item))
                .ToListAsync();
            return items
                .Apply(gridOptions, false)
                .Count();
<# } #>
        }

        /// <summary>
        /// به روش آسنکرون، <#= entityInfo.SingularName #> با شناسه عددی مشخص شده را خوانده و برمی گرداند
        /// </summary>
        /// <param name="<#= camelCase #>Id">شناسه عددی یکی از <#= entityInfo.PluralName #> موجود</param>
        /// <returns><#= entityInfo.SingularName #> مشخص شده با شناسه عددی</returns>
        public async Task<<#= entity.Name #>ViewModel> Get<#= entity.Name #>Async(int <#= camelCase #>Id)
        {
            <#= entity.Name #>ViewModel item = null;
            var repository = UnitOfWork.GetAsyncRepository<<#= entity.Name #>>();
            var <#= camelCase #> = await repository.GetByIDAsync(<#= camelCase #>Id);
            if (<#= camelCase #> != null)
            {
                item = Mapper.Map<<#= entity.Name #>ViewModel>(<#= camelCase #>);
            }

            return item;
        }

        /// <summary>
        /// به روش آسنکرون، اطلاعات یک <#= entityInfo.SingularName #> را ایجاد یا اصلاح می کند
        /// </summary>
        /// <param name="<#= camelCase #>"><#= entityInfo.SingularName #> مورد نظر برای ایجاد یا اصلاح</param>
        /// <returns>اطلاعات نمایشی <#= entityInfo.SingularName #> ایجاد یا اصلاح شده</returns>
        public async Task<<#= entity.Name #>ViewModel> Save<#= entity.Name #>Async(<#= entity.Name #>ViewModel <#= camelCase #>)
        {
            Verify.ArgumentNotNull(<#= camelCase #>, nameof(<#= camelCase #>));
            <#= entity.Name #> <#= camelCase #>Model = default(<#= entity.Name #>);
            var repository = UnitOfWork.GetAsyncRepository<<#= entity.Name #>>();
            if (<#= camelCase #>.Id == 0)
            {
                <#= camelCase #>Model = Mapper.Map<<#= entity.Name #>>(<#= camelCase #>);
                await InsertAsync(repository, <#= camelCase #>Model);
            }
            else
            {
                <#= camelCase #>Model = await repository.GetByIDAsync(<#= camelCase #>.Id);
                if (<#= camelCase #>Model != null)
                {
                    await UpdateAsync(repository, <#= camelCase #>Model, <#= camelCase #>);
                }
            }

            return Mapper.Map<<#= entity.Name #>ViewModel>(<#= camelCase #>Model);
        }

        /// <summary>
        /// به روش آسنکرون، <#= entityInfo.SingularName #> مشخص شده با شناسه عددی را حذف می کند
        /// </summary>
        /// <param name="<#= entity.Name.ToLower() #>Id">شناسه عددی <#= entityInfo.SingularName #> مورد نظر برای حذف</param>
        public async Task Delete<#= entity.Name #>Async(int <#= entity.Name.ToLower() #>Id)
        {
            var repository = UnitOfWork.GetAsyncRepository<<#= entity.Name #>>();
            var <#= camelCase #> = await repository.GetByIDAsync(<#= camelCase #>Id);
            if (<#= camelCase #> != null)
            {
                await DeleteAsync(repository, <#= camelCase #>);
            }
        }

        /// <summary>
        /// آخرین تغییرات موجودیت را از مدل نمایشی به سطر اطلاعاتی موجود کپی می کند
        /// </summary>
        /// <param name="<#= camelCase #>ViewModel">مدل نمایشی شامل آخرین تغییرات</param>
        /// <param name="<#= camelCase #>">سطر اطلاعاتی موجود</param>
        protected override void UpdateExisting(<#= entity.Name #>ViewModel <#= camelCase #>ViewModel, <#= entity.Name #> <#= camelCase #>)
        {
<#
var doNotCopy = new string[] { "ModifiedDate", "RowGuid" };
foreach(var property in entity.Properties
    .Where(prop => !doNotCopy.Contains(prop.Name) && prop.Name.IndexOf("Id") == -1))
{ #>
            <#= camelCase #>.<#= property.Name #> = <#= camelCase #>ViewModel.<#= property.Name #>;
<# } #>
        }

        /// <summary>
        /// اطلاعات خلاصه سطر اطلاعاتی داده شده را به صورت یک رشته متنی برمی گرداند
        /// </summary>
        /// <param name="entity">یکی از سطرهای اطلاعاتی موجود</param>
        /// <returns>اطلاعات خلاصه سطر اطلاعاتی داده شده به صورت رشته متنی</returns>
        protected override string GetState(<#= entity.Name #> entity)
        {
            throw new NotImplementedException();
        }

        private ISecureRepository Repository
        {
            get { return _system.Repository; }
        }

        private readonly ISystemRepository _system;
    }
}
