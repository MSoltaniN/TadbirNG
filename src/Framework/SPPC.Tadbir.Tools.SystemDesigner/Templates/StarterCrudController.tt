<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Localization;
using SPPC.Tadbir.Api;
using SPPC.Tadbir.Persistence;
using SPPC.Tadbir.Security;
using SPPC.Tadbir.ViewModel.<#= _model.EntityArea #>;
using SPPC.Tadbir.Web.Api.Extensions;
using SPPC.Tadbir.Web.Api.Filters;
using SPPC.Tadbir.Web.Api.Resources.Types;

<#
var plural = GetPluralName(_model.EntityName);
var name = String.Format("{0}Controller", plural);
#>
namespace SPPC.Tadbir.Web.Api.Controllers
{
    [Produces("application/json")]
    public class <#= name #> : ValidatingController<<#= _model.EntityName #>ViewModel>
    {
        public <#= name #>(I<#= _model.EntityName #>Repository repository, IStringLocalizer<AppStrings> strings = null)
            : base(strings)
        {
            _repository = repository;
        }

        protected override string EntityNameKey
        {
            get { return AppStrings.<#= _model.EntityName #>; }
        }

        // GET: api/<#= plural.ToLower() #>
        [Route(<#= _model.EntityName #>Api.<#= _model.IsFiscalEntity ? "Environment" : String.Empty #><#= plural #>Url)]
        [AuthorizeRequest(SecureEntity.<#= _model.EntityName #>, (int)<#= _model.EntityName #>Permissions.View)]
        public async Task<IActionResult> Get<#= _model.IsFiscalEntity ? "Environment" : String.Empty #><#= plural #>Async()
        {
            int itemCount = await _repository.GetCountAsync(GridOptions);
            SetItemCount(itemCount);
            var <#= plural.ToLower() #> = await _repository.Get<#= plural #>Async(GridOptions);
            return Json(<#= plural.ToLower() #>);
        }

        // GET: api/<#= plural.ToLower() #>/{<#= _model.EntityName.ToLower() #>Id:min(1)}
        [Route(<#= _model.EntityName #>Api.<#= _model.EntityName #>Url)]
        [AuthorizeRequest(SecureEntity.<#= _model.EntityName #>, (int)<#= _model.EntityName #>Permissions.View)]
        public async Task<IActionResult> Get<#= _model.EntityName #>Async(int <#= _model.EntityName.ToLower() #>Id)
        {
            var <#= _model.EntityName.ToLower() #> = await _repository.Get<#= _model.EntityName #>Async(<#= _model.EntityName.ToLower() #>Id);
            return JsonReadResult(<#= _model.EntityName.ToLower() #>);
        }

        // POST: api/<#= plural.ToLower() #>
        [HttpPost]
        [Route(<#= _model.EntityName #>Api.<#= _model.IsFiscalEntity ? "Environment" : String.Empty #><#= plural #>Url)]
        [AuthorizeRequest(SecureEntity.<#= _model.EntityName #>, (int)<#= _model.EntityName #>Permissions.Create)]
        public async Task<IActionResult> PostNew<#= _model.EntityName #>Async([FromBody] <#= _model.EntityName #>ViewModel <#= _model.EntityName.ToLower() #>)
        {
            var result = BasicValidationResult(<#= _model.EntityName.ToLower() #>);
            if (result is BadRequestObjectResult)
            {
                return result;
            }

            var outputItem = await _repository.Save<#= _model.EntityName #>Async(<#= _model.EntityName.ToLower() #>);
            return StatusCode(StatusCodes.Status201Created, outputItem);
        }

        // PUT: api/<#= plural.ToLower() #>/{<#= _model.EntityName.ToLower() #>Id:min(1)}
        [HttpPut]
        [Route(<#= _model.EntityName #>Api.<#= _model.EntityName #>Url)]
        [AuthorizeRequest(SecureEntity.<#= _model.EntityName #>, (int)<#= _model.EntityName #>Permissions.Edit)]
        public async Task<IActionResult> PutModified<#= _model.EntityName #>Async(int <#= _model.EntityName.ToLower() #>Id, [FromBody] <#= _model.EntityName #>ViewModel <#= _model.EntityName.ToLower() #>)
        {
            var result = BasicValidationResult(<#= _model.EntityName.ToLower() #>, <#= _model.EntityName.ToLower() #>Id);
            if (result is BadRequestObjectResult)
            {
                return result;
            }

            var outputItem = await _repository.Save<#= _model.EntityName #>Async(<#= _model.EntityName.ToLower() #>);
            return OkReadResult(outputItem);
        }

        // DELETE: api/<#= plural.ToLower() #>/{<#= _model.EntityName.ToLower() #>Id:min(1)}
        [HttpDelete]
        [Route(<#= _model.EntityName #>Api.<#= _model.EntityName #>Url)]
        [AuthorizeRequest(SecureEntity.<#= _model.EntityName #>, (int)<#= _model.EntityName #>Permissions.Delete)]
        public async Task<IActionResult> DeleteExisting<#= _model.EntityName #>Async(int <#= _model.EntityName.ToLower() #>Id)
        {
            string message = await ValidateDeleteAsync(<#= _model.EntityName.ToLower() #>Id);
            if (!String.IsNullOrEmpty(message))
            {
                return BadRequest(message);
            }

            await _repository.Delete<#= _model.EntityName #>Async(<#= _model.EntityName.ToLower() #>Id);
            return StatusCode(StatusCodes.Status204NoContent);
        }

        private async Task<string> ValidateDeleteAsync(int item)
        {
            string message = String.Empty;
            var <#= _model.EntityName.ToLower() #> = await _repository.Get<#= _model.EntityName #>Async(item);
            if (<#= _model.EntityName.ToLower() #> == null)
            {
                message = _strings.Format(AppStrings.ItemByIdNotFound, AppStrings.<#= _model.EntityName #>, item.ToString());
            }

            return message;
        }

        private readonly I<#= _model.EntityName #>Repository _repository;
    }
}