// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.0.0
//     Template Version: 1.0
//     Generation Date: 2017-04-01 3:24:07 PM
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using SPPC.Tadbir.Model.Corporate;
using SPPC.Framework.Domain;

namespace SPPC.Tadbir.Model.Auth
{
    /// <summary>
    /// Represents a logical authority used in a role-based security subsystem.
    /// </summary>
    public partial class Role : IEntity
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Role"/> class.
        /// </summary>
        public Role()
        {
            this.Name = String.Empty;
            this.Description = String.Empty;
            this.ModifiedDate = DateTime.Now;
            InitReferences();
        }

        /// <summary>
        /// Gets or sets the unique identifier for this entity. This property is auto-generated.
        /// </summary>
        public virtual int Id { get; set; }

        /// <summary>
        /// Gets or sets the name of this application role
        /// </summary>
        public virtual string Name { get; set; }

        /// <summary>
        /// Gets or sets the detail information related to this role
        /// </summary>
        public virtual string Description { get; set; }

        /// <summary>
        /// Gets or sets the unique identifier for the database row for this entity. This property is auto-generated.
        /// </summary>
        public virtual Guid RowGuid { get; set; }

        /// <summary>
        /// Gets or sets the date when database row for this entity was last modified. This property is auto-generated.
        /// </summary>
        public virtual DateTime ModifiedDate { get; set; }

        /// <summary>
        /// Gets or sets the collection of all application users that this role is assigned to them
        /// </summary>
        public virtual IList<User> Users { get; protected set; }

        /// <summary>
        /// Gets or sets the collection of all operational permissions that are enabled for this role
        /// </summary>
        public virtual IList<Permission> Permissions { get; protected set; }

        /// <summary>
        /// Gets or sets the collection of all branches that this role can access
        /// </summary>
        public virtual IList<Branch> Branches { get; protected set; }

        private void InitReferences()
        {
            this.Users = new List<User>();
            this.Permissions = new List<Permission>();
            this.Branches = new List<Branch>();

            //// IMPORTANT NOTE: DO NOT add initialization statements for one-to-one and many-to-one relationships.
            //// 1. Initializing one-to-one associations causes StackOverflowException (A initializes B and B initializes A)
            //// 2. Initializing many-to-one associations causes most mapping tests to fail, because they will trigger many
            //// unnecessary operations (INSERT and UPDATE) by in-memory SQLite database.
        }
    }
}
