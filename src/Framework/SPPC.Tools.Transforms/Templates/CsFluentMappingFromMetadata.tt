<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SPPC.Tools.Model" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: <#= _version #>
//     Template Version: 1.0
//     Generation Date: <#= DateTime.Now.ToString() #>
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
<#
var usingNamespace = NamespaceUtil.GetNamespace(_entity.Repository, "Model", _entity.Area);
var codeNamespace = NamespaceUtil.GetNamespace(_entity.Repository, "Persistence", "Mapping");
var idProperty = _entity.Properties.Where(prop => prop.Name == "Id").First();
var propNames = new string[] { "Id", "RowGuid", "ModifiedDate" };
var customProperties = _entity.Properties.Where(prop => !propNames.Contains(prop.Name)).ToArray();
bool needsRelationMapping = _entity.Relations
    .Where(rel => rel.Multiplicity == RelationMultiplicity.ManyToOne
	    || rel.Multiplicity == RelationMultiplicity.OneToOne)
    .Count() > 0;
#>
using <#= usingNamespace #>;

namespace <#= codeNamespace #>
{
    internal static class <#= _entity.Name #>Map
    {
        internal static void BuildMapping(EntityTypeBuilder<<#= _entity.Name #>> builder)
        {
            builder.ToTable("<#= _entity.Name #>", "<#= _entity.Area #>");
            builder.HasKey(e => e.Id);
            builder.Property(e => e.Id)
                .HasColumnName("<#= idProperty.Storage.Name #>");
<#
    foreach (var property in customProperties)
    { #>
            builder.Property(e => e.<#= property.Name #>)<#
        if (property.ValidationRule.Required)
        { #>

                .IsRequired()<#
        }
        if (property.ValidationRule.Type == ValidationRuleType.Length && !String.IsNullOrEmpty(property.ValidationRule.Maximum))
        { #>

                .HasMaxLength(<#= property.ValidationRule.Maximum #>)<#
        } #>;
<#  }
#>
            builder.Property(e => e.RowGuid)
                .HasColumnName("rowguid")
                .HasDefaultValueSql("(newid())");
            builder.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasDefaultValueSql("(getdate())");
<#
    if (needsRelationMapping)
    { #>

<#  }

    foreach (var relation in _entity.Relations)
    {
        if (relation.Multiplicity == RelationMultiplicity.ManyToOne)
        { #>
            builder.HasOne(e => e.<#= relation.EndpointName #>)
                .WithMany()
<#
            string idPropName = String.Format("{0}Id", relation.EndpointName);
			string idColName = String.Format("{0}ID", relation.EndpointName);
            idProperty = _entity.Properties.Where(prop => prop.Name == idPropName).FirstOrDefault();
            if (idProperty != null)
            { #>
                .HasForeignKey(e => e.<#= idPropName #>)
<#          }
            else
            { #>
                .HasForeignKey("<#= idColName #>")
<#          } #>
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_<#= _entity.Area #>_<#= _entity.Name #>_<#= GetRelationArea(relation) #>_<#= relation.EndpointName #>");
<#      }
        else if (relation.Multiplicity == RelationMultiplicity.OneToOne)
        { #>
            builder.HasOne(e => e.<#= relation.EndpointName #>)
                .WithOne(p => p.<#= _entity.Name #>)
<#
            if (relation.HasKey)
            { #>
                .HasForeignKey<<#= _entity.Name #>>("<#= relation.EntityName #>ID")
<#          }
            else
            { #>
                .HasForeignKey<<#= relation.EntityName #>>("<#= _entity.Name #>ID")
<#          }
#>
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_<#= _entity.Area #>_<#= _entity.Name #>_<#= GetRelationArea(relation) #>_<#= relation.EndpointName #>");
<#      }
#>
<#  }
#>
        }
    }
}
