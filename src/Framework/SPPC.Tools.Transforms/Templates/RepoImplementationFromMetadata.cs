// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SPPC.Tools.Transforms.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class RepoImplementationFromMetadata : RepoImplementationFromMetadataBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 6 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"

var entityInfo = _model;
var entity = entityInfo.Entity;
var plural = GetPluralName(entity.Name);
var camelCase = entity.Name.CamelCase();

            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsoft" +
                    ".EntityFrameworkCore;\r\nusing SPPC.Framework.Common;\r\nusing SPPC.Framework.Presen" +
                    "tation;\r\nusing SPPC.Tadbir.Helpers;\r\nusing SPPC.Tadbir.Model.");
            
            #line 19 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Area));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 20 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
 if(entity.Area != "Auth")
{ 
            
            #line default
            #line hidden
            this.Write("using SPPC.Tadbir.ViewModel.");
            
            #line 22 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Area));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 23 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\nnamespace SPPC.Tadbir.Persistence\r\n{\r\n    /// <summary>\r\n    /// عملیات مورد نی" +
                    "از برای مدیریت ");
            
            #line 28 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entityInfo.PluralName));
            
            #line default
            #line hidden
            this.Write(" را پیاده سازی میکند\r\n    /// </summary>\r\n    public class ");
            
            #line 30 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write("Repository : LoggingRepository<");
            
            #line 30 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 30 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write("ViewModel>, I");
            
            #line 30 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write(@"Repository
    {
        /// <summary>
        /// نمونه جدیدی از این کلاس می سازد
        /// </summary>
        /// <param name=""context"">امکانات مشترک مورد نیاز را برای عملیات دیتابیسی فراهم می کند</param>
        /// <param name=""system"">امکانات مورد نیاز در دیتابیس های سیستمی را فراهم می کند</param>
        public ");
            
            #line 37 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write("Repository(IRepositoryContext context, ISystemRepository system)\r\n            : b" +
                    "ase(context, system.Logger)\r\n        {\r\n            _system = system;\r\n        }" +
                    "\r\n\r\n        /// <summary>\r\n        /// به روش آسنکرون، کلیه ");
            
            #line 44 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entityInfo.PluralName));
            
            #line default
            #line hidden
            this.Write(" را خوانده و برمی گرداند\r\n        /// </summary>\r\n        /// <param name=\"gridOp" +
                    "tions\">گزینه های مورد نظر برای نمایش رکوردها در نمای لیستی</param>\r\n        /// " +
                    "<returns>مجموعه ای از ");
            
            #line 47 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entityInfo.PluralName));
            
            #line default
            #line hidden
            this.Write(" تعریف شده</returns>\r\n        public async Task<PagedList<");
            
            #line 48 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write("ViewModel>> Get");
            
            #line 48 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(plural));
            
            #line default
            #line hidden
            this.Write("Async(GridOptions gridOptions = null)\r\n        {\r\n");
            
            #line 50 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
 if(entityInfo.IsFiscalEntity)
   { 
            
            #line default
            #line hidden
            this.Write("            var query = Repository.GetAllQuery");
            
            #line 52 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write("(ViewName.");
            
            #line 52 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write(");\r\n            var ");
            
            #line 53 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(plural.CamelCase()));
            
            #line default
            #line hidden
            this.Write(" = await query\r\n                .Select(item => Mapper.Map<");
            
            #line 54 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write("ViewModel>(item))\r\n                .ToListAsync();\r\n");
            
            #line 56 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
 }
   else
   { 
            
            #line default
            #line hidden
            this.Write("            var repository = UnitOfWork.GetAsyncRepository<");
            
            #line 59 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write(">();\r\n            var ");
            
            #line 60 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(plural.CamelCase()));
            
            #line default
            #line hidden
            this.Write(" = await repository\r\n                .GetEntityQuery()\r\n                .Select(i" +
                    "tem => Mapper.Map<");
            
            #line 62 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write("ViewModel>(item))\r\n                .ToListAsync();\r\n");
            
            #line 64 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            await ReadAsync(gridOptions);\r\n            return new PagedList<");
            
            #line 66 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write("ViewModel>(");
            
            #line 66 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(plural.CamelCase()));
            
            #line default
            #line hidden
            this.Write(", gridOptions);\r\n        }\r\n\r\n        /// <summary>\r\n        /// به روش آسنکرون، " +
                    "");
            
            #line 70 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entityInfo.SingularName));
            
            #line default
            #line hidden
            this.Write(" با شناسه عددی مشخص شده را خوانده و برمی گرداند\r\n        /// </summary>\r\n        " +
                    "/// <param name=\"");
            
            #line 72 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write("Id\">شناسه عددی یکی از ");
            
            #line 72 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entityInfo.PluralName));
            
            #line default
            #line hidden
            this.Write(" موجود</param>\r\n        /// <returns>");
            
            #line 73 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entityInfo.SingularName));
            
            #line default
            #line hidden
            this.Write(" مشخص شده با شناسه عددی</returns>\r\n        public async Task<");
            
            #line 74 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write("ViewModel> Get");
            
            #line 74 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write("Async(int ");
            
            #line 74 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write("Id)\r\n        {\r\n            ");
            
            #line 76 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write("ViewModel item = null;\r\n            var repository = UnitOfWork.GetAsyncRepositor" +
                    "y<");
            
            #line 77 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write(">();\r\n            var ");
            
            #line 78 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write(" = await repository.GetByIDAsync(");
            
            #line 78 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write("Id);\r\n            if (");
            
            #line 79 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write(" != null)\r\n            {\r\n                item = Mapper.Map<");
            
            #line 81 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write("ViewModel>(");
            
            #line 81 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write(");\r\n            }\r\n\r\n            return item;\r\n        }\r\n\r\n        /// <summary>" +
                    "\r\n        /// به روش آسنکرون، اطلاعات یک ");
            
            #line 88 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entityInfo.SingularName));
            
            #line default
            #line hidden
            this.Write(" را ایجاد یا اصلاح می کند\r\n        /// </summary>\r\n        /// <param name=\"");
            
            #line 90 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 90 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entityInfo.SingularName));
            
            #line default
            #line hidden
            this.Write(" مورد نظر برای ایجاد یا اصلاح</param>\r\n        /// <returns>اطلاعات نمایشی ");
            
            #line 91 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entityInfo.SingularName));
            
            #line default
            #line hidden
            this.Write(" ایجاد یا اصلاح شده</returns>\r\n        public async Task<");
            
            #line 92 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write("ViewModel> Save");
            
            #line 92 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write("Async(");
            
            #line 92 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write("ViewModel ");
            
            #line 92 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            Verify.ArgumentNotNull(");
            
            #line 94 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write(", nameof(");
            
            #line 94 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write("));\r\n            ");
            
            #line 95 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 95 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write("Model = default(");
            
            #line 95 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write(");\r\n            var repository = UnitOfWork.GetAsyncRepository<");
            
            #line 96 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write(">();\r\n            if (");
            
            #line 97 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write(".Id == 0)\r\n            {\r\n                ");
            
            #line 99 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write("Model = Mapper.Map<");
            
            #line 99 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write(">(");
            
            #line 99 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write(");\r\n                await InsertAsync(repository, ");
            
            #line 100 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write("Model);\r\n            }\r\n            else\r\n            {\r\n                ");
            
            #line 104 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write("Model = await repository.GetByIDAsync(");
            
            #line 104 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write(".Id);\r\n                if (");
            
            #line 105 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write("Model != null)\r\n                {\r\n                    await UpdateAsync(reposito" +
                    "ry, ");
            
            #line 107 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write("Model, ");
            
            #line 107 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write(");\r\n                }\r\n            }\r\n\r\n            return Mapper.Map<");
            
            #line 111 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write("ViewModel>(");
            
            #line 111 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write("Model);\r\n        }\r\n\r\n        /// <summary>\r\n        /// به روش آسنکرون، ");
            
            #line 115 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entityInfo.SingularName));
            
            #line default
            #line hidden
            this.Write(" مشخص شده با شناسه عددی را حذف می کند\r\n        /// </summary>\r\n        /// <param" +
                    " name=\"");
            
            #line 117 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name.ToLower()));
            
            #line default
            #line hidden
            this.Write("Id\">شناسه عددی ");
            
            #line 117 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entityInfo.SingularName));
            
            #line default
            #line hidden
            this.Write(" مورد نظر برای حذف</param>\r\n        public async Task Delete");
            
            #line 118 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write("Async(int ");
            
            #line 118 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name.ToLower()));
            
            #line default
            #line hidden
            this.Write("Id)\r\n        {\r\n            var repository = UnitOfWork.GetAsyncRepository<");
            
            #line 120 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write(">();\r\n            var ");
            
            #line 121 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write(" = await repository.GetByIDAsync(");
            
            #line 121 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write("Id);\r\n            if (");
            
            #line 122 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write(" != null)\r\n            {\r\n                await DeleteAsync(repository, ");
            
            #line 124 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write(");\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// آخرین تغییرات " +
                    "موجودیت را از مدل نمایشی به سطر اطلاعاتی موجود کپی می کند\r\n        /// </summary" +
                    ">\r\n        /// <param name=\"");
            
            #line 131 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write("ViewModel\">مدل نمایشی شامل آخرین تغییرات</param>\r\n        /// <param name=\"");
            
            #line 132 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write("\">سطر اطلاعاتی موجود</param>\r\n        protected override void UpdateExisting(");
            
            #line 133 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write("ViewModel ");
            
            #line 133 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write("ViewModel, ");
            
            #line 133 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 133 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n");
            
            #line 135 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"

var doNotCopy = new string[] { "ModifiedDate", "RowGuid" };
foreach(var property in entity.Properties
    .Where(prop => !doNotCopy.Contains(prop.Name) && prop.Name.IndexOf("Id") == -1))
{ 
            
            #line default
            #line hidden
            this.Write("            ");
            
            #line 140 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 140 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 140 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(camelCase));
            
            #line default
            #line hidden
            this.Write("ViewModel.");
            
            #line 140 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 141 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"        }

        /// <summary>
        /// اطلاعات خلاصه سطر اطلاعاتی داده شده را به صورت یک رشته متنی برمی گرداند
        /// </summary>
        /// <param name=""entity"">یکی از سطرهای اطلاعاتی موجود</param>
        /// <returns>اطلاعات خلاصه سطر اطلاعاتی داده شده به صورت رشته متنی</returns>
        protected override string GetState(");
            
            #line 149 "D:\GitHub\babaksoft\Projects\SPPC\framework\src\Framework\SPPC.Tools.Transforms\Templates\RepoImplementationFromMetadata.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write(@" entity)
        {
            throw new NotImplementedException();
        }

        private ISecureRepository Repository
        {
            get { return _system.Repository; }
        }

        private readonly ISystemRepository _system;
    }
}
");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class RepoImplementationFromMetadataBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
