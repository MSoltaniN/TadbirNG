<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Account" xml:space="preserve">
    <value>Account</value>
  </data>
  <data name="AccountCode" xml:space="preserve">
    <value>Account code</value>
  </data>
  <data name="AccountId" xml:space="preserve">
    <value>Account</value>
  </data>
  <data name="Accounting" xml:space="preserve">
    <value>Accounting</value>
  </data>
  <data name="Accounts" xml:space="preserve">
    <value>Accounts</value>
  </data>
  <data name="Administration" xml:space="preserve">
    <value>Administration</value>
  </data>
  <data name="AdminRoleIsReadonly" xml:space="preserve">
    <value>System Administrator role cannot be modified or deleted.</value>
  </data>
  <data name="AdminUserIsReadOnly" xml:space="preserve">
    <value>Administrator user cannot be modified or deleted.</value>
  </data>
  <data name="CannotDeleteAssignedRole" xml:space="preserve">
    <value>The role {0} is currently assigned to one or more users and cannot be deleted.</value>
  </data>
  <data name="CannotDeleteNonLeafItem" xml:space="preserve">
    <value>The {0} {1} has one or more subitems and cannot be deleted.</value>
  </data>
  <data name="CannotDeleteUsedItem" xml:space="preserve">
    <value>The {0} {1} is used in one or more vouchers and cannot be deleted.</value>
  </data>
  <data name="CannotUseNonLeafItem" xml:space="preserve">
    <value>The {0} {1} has one or more subitems and cannot be used in operational vouchers.</value>
  </data>
  <data name="ChangePassword" xml:space="preserve">
    <value>Change password</value>
  </data>
  <data name="Code" xml:space="preserve">
    <value>Code</value>
  </data>
  <data name="CostCenter" xml:space="preserve">
    <value>Cost center</value>
  </data>
  <data name="CostCenters" xml:space="preserve">
    <value>Cost centers</value>
  </data>
  <data name="Credit" xml:space="preserve">
    <value>Credit</value>
  </data>
  <data name="CreditSum" xml:space="preserve">
    <value>Credit sum</value>
  </data>
  <data name="CurrencyId" xml:space="preserve">
    <value>Currency</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Debit" xml:space="preserve">
    <value>Debit</value>
  </data>
  <data name="DebitAndCreditNotAllowed" xml:space="preserve">
    <value>Entering values for both Debit and Credit is not allowed.</value>
  </data>
  <data name="DebitSum" xml:space="preserve">
    <value>Debit sum</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="DetailAccount" xml:space="preserve">
    <value>Detail account</value>
  </data>
  <data name="DetailAccounts" xml:space="preserve">
    <value>Detail accounts</value>
  </data>
  <data name="DuplicateCodeValue" xml:space="preserve">
    <value>{0} code is duplicate.</value>
  </data>
  <data name="DuplicateFieldValue" xml:space="preserve">
    <value>{0} is duplicate.</value>
  </data>
  <data name="EndDate" xml:space="preserve">
    <value>End date</value>
  </data>
  <data name="EntityName" xml:space="preserve">
    <value>Entity name</value>
  </data>
  <data name="FieldIsRequired" xml:space="preserve">
    <value>{0} is required.</value>
  </data>
  <data name="FieldsDoNotMatch" xml:space="preserve">
    <value>{0} and {1} do not match.</value>
  </data>
  <data name="FullCode" xml:space="preserve">
    <value>Full code</value>
  </data>
  <data name="GroupAction" xml:space="preserve">
    <value>group action</value>
  </data>
  <data name="IncorrectOldPassword" xml:space="preserve">
    <value>Value entered for old password is incorrect.</value>
  </data>
  <data name="InvalidPassword" xml:space="preserve">
    <value>Password is incorrect.</value>
  </data>
  <data name="InvalidUserName" xml:space="preserve">
    <value>No user with specified user name could be found.</value>
  </data>
  <data name="ItemByIdNotFound" xml:space="preserve">
    <value>No {0} having an identifier of '{1}' could be found.</value>
  </data>
  <data name="ItemNotFound" xml:space="preserve">
    <value>{0} could not be found.</value>
  </data>
  <data name="LogOut" xml:space="preserve">
    <value>Logout</value>
  </data>
  <data name="MissingNewAndRepeatPasswords" xml:space="preserve">
    <value>New password and/or repeat password are missing.</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NewAndRepeatPasswordsDontMatch" xml:space="preserve">
    <value>New password and repeat password do not match.</value>
  </data>
  <data name="NewPassword" xml:space="preserve">
    <value>New password</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>Number</value>
  </data>
  <data name="OldPassword" xml:space="preserve">
    <value>Old password</value>
  </data>
  <data name="OutOfFiscalPeriodDate" xml:space="preserve">
    <value>Entered date is out of range for current fiscal period.</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PersonFirstName" xml:space="preserve">
    <value>First name</value>
  </data>
  <data name="PersonLastName" xml:space="preserve">
    <value>Last name</value>
  </data>
  <data name="Profile" xml:space="preserve">
    <value>Profile</value>
  </data>
  <data name="Project" xml:space="preserve">
    <value>Project</value>
  </data>
  <data name="Projects" xml:space="preserve">
    <value>Projects</value>
  </data>
  <data name="RepeatPassword" xml:space="preserve">
    <value>Repeat password</value>
  </data>
  <data name="RequestFailedConflict" xml:space="preserve">
    <value>Request failed because conflicts were detected in {0} data.</value>
  </data>
  <data name="RequestFailedNoData" xml:space="preserve">
    <value>Request failed because {0} data was not provided.</value>
  </data>
  <data name="Role" xml:space="preserve">
    <value>Role</value>
  </data>
  <data name="Roles" xml:space="preserve">
    <value>Roles</value>
  </data>
  <data name="StartDate" xml:space="preserve">
    <value>Start date</value>
  </data>
  <data name="TextFieldHasRange" xml:space="preserve">
    <value>{0} must have between {1} and {2} characters.</value>
  </data>
  <data name="TextFieldIsTooLong" xml:space="preserve">
    <value>{0} can have a maximum of {1} characters.</value>
  </data>
  <data name="User" xml:space="preserve">
    <value>User</value>
  </data>
  <data name="UserAccount" xml:space="preserve">
    <value>User account</value>
  </data>
  <data name="UserIsDisabled" xml:space="preserve">
    <value>Specified user is disabled.</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>User name</value>
  </data>
  <data name="Users" xml:space="preserve">
    <value>Users</value>
  </data>
  <data name="Voucher" xml:space="preserve">
    <value>Voucher</value>
  </data>
  <data name="VoucherLine" xml:space="preserve">
    <value>Voucher line</value>
  </data>
  <data name="VoucherNo" xml:space="preserve">
    <value>Voucher number</value>
  </data>
  <data name="Vouchers" xml:space="preserve">
    <value>Vouchers</value>
  </data>
  <data name="BizPartners" xml:space="preserve">
    <value>business partners</value>
  </data>
  <data name="BizUnits" xml:space="preserve">
    <value>business units</value>
  </data>
  <data name="Branches" xml:space="preserve">
    <value>branches</value>
  </data>
  <data name="CreateEntity" xml:space="preserve">
    <value>Create {0}</value>
  </data>
  <data name="Currencies" xml:space="preserve">
    <value>currencies</value>
  </data>
  <data name="DeleteEntity" xml:space="preserve">
    <value>Delete {0}</value>
  </data>
  <data name="EditEntity" xml:space="preserve">
    <value>Edit {0}</value>
  </data>
  <data name="Inventories" xml:space="preserve">
    <value>inventories</value>
  </data>
  <data name="IRVouchers" xml:space="preserve">
    <value>issue/receipt vouchers</value>
  </data>
  <data name="ManageEntities" xml:space="preserve">
    <value>Manage {0}</value>
  </data>
  <data name="ReqVouchers" xml:space="preserve">
    <value>requisition vouchers</value>
  </data>
  <data name="SalesInvoices" xml:space="preserve">
    <value>sales invoice</value>
  </data>
  <data name="ViewEntities" xml:space="preserve">
    <value>View {0}</value>
  </data>
  <data name="ApproveEntity" xml:space="preserve">
    <value>Approve {0}</value>
  </data>
  <data name="AssignEntityToRole" xml:space="preserve">
    <value>Assign {0} to role</value>
  </data>
  <data name="BizPartner" xml:space="preserve">
    <value>business partner</value>
  </data>
  <data name="BizUnit" xml:space="preserve">
    <value>business unit</value>
  </data>
  <data name="Branch" xml:space="preserve">
    <value>branch</value>
  </data>
  <data name="ConfirmEntity" xml:space="preserve">
    <value>Confirm {0}</value>
  </data>
  <data name="Currency" xml:space="preserve">
    <value>currency</value>
  </data>
  <data name="ExportEntityToIssueVoucher" xml:space="preserve">
    <value>Export {0} to issue voucher</value>
  </data>
  <data name="ExportEntityToSalesInvoice" xml:space="preserve">
    <value>Export {0} to sales invoice</value>
  </data>
  <data name="FiscalPeriod" xml:space="preserve">
    <value>fiscal period</value>
  </data>
  <data name="Inventory" xml:space="preserve">
    <value>product inventory</value>
  </data>
  <data name="IssueVoucher" xml:space="preserve">
    <value>issue voucher</value>
  </data>
  <data name="MonetizedIssueVoucher" xml:space="preserve">
    <value>monetized issue voucher</value>
  </data>
  <data name="MonetizeEntity" xml:space="preserve">
    <value>Monetize {0}</value>
  </data>
  <data name="PrepareEntity" xml:space="preserve">
    <value>Prepare {0}</value>
  </data>
  <data name="RegisterEntity" xml:space="preserve">
    <value>Register {0}</value>
  </data>
  <data name="RejectReviewEntity" xml:space="preserve">
    <value>Reject reviewed {0}</value>
  </data>
  <data name="ReviewEntity" xml:space="preserve">
    <value>Review {0}</value>
  </data>
  <data name="SalesInvoice" xml:space="preserve">
    <value>sales invoice</value>
  </data>
  <data name="SaveEntity" xml:space="preserve">
    <value>Save {0}</value>
  </data>
  <data name="ValuedIssueVoucher" xml:space="preserve">
    <value>valued issue voucher</value>
  </data>
  <data name="FiscalPeriods" xml:space="preserve">
    <value>fiscal periods</value>
  </data>
  <data name="ReqVoucher" xml:space="preserve">
    <value>requisition voucher</value>
  </data>
  <data name="DateOverlap" xml:space="preserve">
    <value>The date of the fiscal period overlaps with another fiscal period.</value>
  </data>
  <data name="PriorityDate" xml:space="preserve">
    <value>The end date {0} must be after the start date {0}</value>
  </data>
  <data name="Companies" xml:space="preserve">
    <value>Companies</value>
  </data>
  <data name="Company" xml:space="preserve">
    <value>Company</value>
  </data>
</root>