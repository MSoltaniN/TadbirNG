import { Component, OnInit, Renderer2,NgZone,ChangeDetectorRef, ViewChild, AfterViewInit } from '@angular/core';
import { SettingService, GridService } from '../../service/index';
import { ToastrService } from 'ngx-toastr';
import "rxjs/Rx";
import { TranslateService } from '@ngx-translate/core';
import { Layout, Metadatas, Entities, MessageType } from "../../../environments/environment";
import { RTL } from '@progress/kendo-angular-l10n';
import { MetaDataService } from '../../service/metadata/metadata.service';
import { DialogService } from '@progress/kendo-angular-dialog';
import { AutoGeneratedGridComponent } from '../../class/autoGeneratedGrid.component';
import { Filter } from '../../class/filter';
import { FilterExpressionOperator } from '../../class/filterExpressionOperator';
import { ReportApi } from '../../service/api/reportApi';
import { Item } from '../../model/index';
import { String } from '../../class/source';
import { JournalType, JournalDisplayType, JournalDisplayTypeResource, VoucherStatusResource, BranchScopeResource, ArticleTypesResource } from '../../enum/journal';
import { ViewName } from '../../security/viewName';
import { ReportingService } from '../../service/report/reporting.service';
import { ViewIdentifierComponent } from '../viewIdentifier/view-identifier.component';
import { GridComponent, ColumnBase } from '@progress/kendo-angular-grid';
import { ReportViewerComponent } from '../reportViewer/reportViewer.component';
import { ReportManagementComponent } from '../reportManagement/reportManagement.component';


export function getLayoutModule(layout: Layout) {
  return layout.getLayout();
}


@Component({
  selector: 'spps-journal',
  templateUrl: './journal.component.html',
  styles: [`
.section-option { margin-top: 15px; background-color: #f6f6f6; border: solid 1px #dadde2; padding: 15px 15px 0; }
.section-option label,input[type=text] { width:100% } /deep/.section-option kendo-dropdownlist { width:100% }
/deep/ .k-switch-on .k-switch-handle { left: -8px !important; }
/deep/ .k-switch-off .k-switch-handle { left: -4px !important; }
/deep/ .k-switch[dir="rtl"] .k-switch-label-on { right: -22px; }
/deep/ .k-switch[dir="rtl"] .k-switch-label-off { left: 0; }
/deep/ .k-switch-label-on,/deep/ .k-switch-label-off { overflow: initial; }
.journal-type { margin:0 15px 10px; } .journal-type label { margin-top:10px; }
/deep/.k-footer-template { background-color: #b3b3b3; color: #000;}
.btn-compute-default {margin-top: 25px; border: 2px solid #337ab7; color: #337ab7; padding: 5px 25px;}
.btn-compute { color: #337ab7; transition: All 0.3s 0.1s ease-out;}
.btn-compute-selectable{ color: #fff; background-image: linear-gradient(#c1e3ff, #337ab7);}
`],
  providers: [{
    provide: RTL,
    useFactory: getLayoutModule,
    deps: [Layout]
  }]
})


//.btn-compute::before{ transition: box-shadow 0.5s ease-out; border-radius: 50%; display: block; }
//box-shadow:inset 0 0 0 15px #337ab7;


export class JournalComponent extends AutoGeneratedGridComponent implements OnInit {

  displayType: Array<Item> = [
    { value: JournalDisplayTypeResource.VoucherRows, key: "1" },
    { value: JournalDisplayTypeResource.VoucherRowsWithFloatingAccounts, key: "2" },
    { value: JournalDisplayTypeResource.LedgerLevel, key: "3" },
    { value: JournalDisplayTypeResource.SubsidiaryLevel, key: "4" },
    { value: JournalDisplayTypeResource.BriefVoucher, key: "5" },
    { value: JournalDisplayTypeResource.BriefVoucherByDate, key: "6" },
    { value: JournalDisplayTypeResource.BriefVoucherByMonth, key: "7" },
  ]
  voucherStatus: Array<Item> = [
    { value: VoucherStatusResource.Committed, key: "2" },
    { value: VoucherStatusResource.Finalized, key: "3" },
    { value: VoucherStatusResource.Accepted, key: "4" },
    { value: VoucherStatusResource.Approved, key: "5" },
    { value: VoucherStatusResource.AllVouchers, key: "0" }
  ]
  branchScope: Array<Item> = [
    { value: BranchScopeResource.CurrentBranch, key: "1" },
    { value: BranchScopeResource.CurrentBranchAndSubsets, key: "2" },
  ]
  articleType: Array<Item> = [
    { value: ArticleTypesResource.AllVoucherLines, key: "1" },
    { value: ArticleTypesResource.MarkedVoucherLines, key: "2" },
    { value: ArticleTypesResource.UncheckedVoucherLines, key: "3" },
  ]

  displayTypeSelected: string = '1';
  branchScopeSelected: string = '1';
  voucherStatusSelected: string = '2';
  articleTypeSelected: string = '1';
  selectedBranchSeparation: boolean = false;
  gridColumnsRow: any[] = [];

  @ViewChild(GridComponent) grid: GridComponent; 
  @ViewChild(ViewIdentifierComponent) viewIdentity: ViewIdentifierComponent;
  @ViewChild(ReportViewerComponent) viewer: ReportViewerComponent;
  @ViewChild(ReportManagementComponent) reportManager: ReportManagementComponent;

  fromDate: Date;
  toDate: Date;
  fromVoucher: string;
  toVoucher: string;
  journalType: string = '1';

  creditSum: number = 0;
  debitSum: number = 0;

  isDefaultBtn: boolean = true;

  constructor(public toastrService: ToastrService, public translate: TranslateService, public dialogService: DialogService, public gridService: GridService,
    public cdref: ChangeDetectorRef, public renderer: Renderer2, public metadata: MetaDataService,
     public settingService: SettingService,public reporingService: ReportingService,public ngZone: NgZone) {
    super(toastrService, translate, gridService, renderer, metadata, settingService, cdref,ngZone);
  }

  ngOnInit() {
    this.metadataUrlType = 2;
    this.entityTypeName = Entities.JournalByDateByRow;
    this.metadataType = Metadatas.JournalByDateByRow;
    this.viewId = ViewName[this.entityTypeName];

    this.showloadingMessage = false;
    
    this.cdref.detectChanges();
  }

  dateValueChange(event: any) {
    this.fromDate = event.fromDate;
    this.toDate = event.toDate;
    this.isDefaultBtn = false;
  }

  changedVoucherNum() {
    this.isDefaultBtn = false;
  }    

  public onDataStateChange(): void {
    if(this.rowData && this.rowData.total > 0) 
    {
      var fcolumns = new Array<ColumnBase>();
      this.grid.columns.forEach(function(column)
      {
          if(column.width == undefined)
            fcolumns.push(column);
      });
      this.fitColumns(fcolumns);
    }      
  } 

  changeType() {

    if (this.journalType == JournalType.ByDate) {

      switch (parseInt(this.displayTypeSelected)) {
        case JournalDisplayType.ByDateByRow:
          {
            this.viewId = ViewName[Entities.JournalByDateByRow];
            break;
          }
        case JournalDisplayType.ByDateByRowDetail:
          {
            this.viewId = ViewName[Entities.JournalByDateByRowDetail];
            break;
          }
        case JournalDisplayType.ByDateByLedger:
          {
            this.viewId = ViewName[Entities.JournalByDateByLedger];
            break;
          }
        case JournalDisplayType.ByDateBySubsidiary:
          {
            this.viewId = ViewName[Entities.JournalByDateBySubsidiary];
            break;
          }
        case JournalDisplayType.ByDateLedgerSummary:
          {
            this.viewId = ViewName[Entities.JournalByDateSummary];
            break;
          }
        case JournalDisplayType.ByDateLedgerSummaryByDate:
          {
            this.viewId = ViewName[Entities.JournalByDateSummaryByDate];
            break;
          }
        case JournalDisplayType.ByDateLedgerSummaryByMonth:
          {
            this.viewId = ViewName[Entities.JournalByDateSummaryByMonth];
            break;
          }
        default:
      }
    }

    if (this.journalType == JournalType.ByVoucher) {

      switch (parseInt(this.displayTypeSelected)) {
        case JournalDisplayType.ByDateByRow:
          {
            this.viewId = ViewName[Entities.JournalByNoByRow];
            break;
          }
        case JournalDisplayType.ByDateByRowDetail:
          {
            this.viewId = ViewName[Entities.JournalByNoByRowDetail];
            break;
          }
        case JournalDisplayType.ByDateByLedger:
          {
            this.viewId = ViewName[Entities.JournalByNoByLedger];
            break;
          }
        case JournalDisplayType.ByDateBySubsidiary:
          {
            this.viewId = ViewName[Entities.JournalByNoBySubsidiary];
            break;
          }
        case JournalDisplayType.ByDateLedgerSummary:
          {
            this.viewId = ViewName[Entities.JournalByNoSummary];
            break;
          }

        default:
      }
    }

    this.changeParam();
  }

  getReportData() {
    if (this.journalType) {

      this.changeParam();

      this.defaultFilter = [];
      if (this.voucherStatusSelected != "0") {
        this.defaultFilter.push(new Filter("VoucherStatusId", this.voucherStatusSelected, "== {0}", "System.Int32"));
      }

      if (this.branchScopeSelected == "1") {
        this.defaultFilter.push(new Filter("BranchId", this.BranchId.toString(), "== {0}", "System.Int32"));
      }

      if (this.journalType == JournalType.ByDate && this.fromDate && this.toDate) {
        switch (parseInt(this.displayTypeSelected)) {
          case JournalDisplayType.ByDateByRow:
            {
              this.entityTypeName = Entities.JournalByDateByRow;
              this.metadataType = Metadatas.JournalByDateByRow;
              this.getDataUrl = ReportApi.JournalByDateByRow;

              break;
            }
          case JournalDisplayType.ByDateByRowDetail:
            {
              this.entityTypeName = Entities.JournalByDateByRowDetail;
              this.metadataType = Metadatas.JournalByDateByRowDetail;
              this.getDataUrl = ReportApi.JournalByDateByRowDetail;
              break;
            }
          case JournalDisplayType.ByDateByLedger:
            {
              this.entityTypeName = Entities.JournalByDateByLedger;
              this.metadataType = Metadatas.JournalByDateByLedger;
              this.getDataUrl = ReportApi.JournalByDateByLedger;
              break;
            }
          case JournalDisplayType.ByDateBySubsidiary:
            {
              this.entityTypeName = Entities.JournalByDateBySubsidiary;
              this.metadataType = Metadatas.JournalByDateBySubsidiary;
              this.getDataUrl = ReportApi.JournalByDateBySubsidiary;
              break;
            }
          case JournalDisplayType.ByDateLedgerSummary:
            {
              this.entityTypeName = Entities.JournalByDateSummary;
              this.metadataType = Metadatas.JournalByDateSummary;
              this.getDataUrl = ReportApi.JournalByDateLedgerSummary;
              break;
            }
          case JournalDisplayType.ByDateLedgerSummaryByDate:
            {
              this.entityTypeName = Entities.JournalByDateSummaryByDate;
              this.metadataType = Metadatas.JournalByDateSummaryByDate;
              this.getDataUrl = ReportApi.JournalByDateLedgerSummaryByDate;
              break;
            }
          case JournalDisplayType.ByDateLedgerSummaryByMonth:
            {
              this.entityTypeName = Entities.JournalByDateSummaryByMonth;
              this.metadataType = Metadatas.JournalByDateSummaryByMonth;
              this.getDataUrl = ReportApi.JournalByDateMonthlyLedgerSummary;
              break;
            }
          default:
        }

        this.getDataUrl += "?from=" + this.fromDate + "&to=" + this.toDate;
        this.reloadGrid();
      }

      if (this.journalType == JournalType.ByVoucher) {

        if (this.fromVoucher && this.toVoucher) {
          if (parseInt(this.fromVoucher) <= parseInt(this.toVoucher)) {
            switch (parseInt(this.displayTypeSelected)) {
              case JournalDisplayType.ByDateByRow:
                {
                  this.entityTypeName = Entities.JournalByNoByRow;
                  this.metadataType = Metadatas.JournalByNoByRow;
                  this.getDataUrl = ReportApi.JournalByNoByRow;
                  break;
                }
              case JournalDisplayType.ByDateByRowDetail:
                {
                  this.entityTypeName = Entities.JournalByNoByRowDetail;
                  this.metadataType = Metadatas.JournalByNoByRowDetail;
                  this.getDataUrl = ReportApi.JournalByNoByRowDetail;
                  break;
                }
              case JournalDisplayType.ByDateByLedger:
                {
                  this.entityTypeName = Entities.JournalByNoByLedger;
                  this.metadataType = Metadatas.JournalByNoByLedger;
                  this.getDataUrl = ReportApi.JournalByNoByLedger;
                  break;
                }
              case JournalDisplayType.ByDateBySubsidiary:
                {
                  this.entityTypeName = Entities.JournalByNoBySubsidiary;
                  this.metadataType = Metadatas.JournalByNoBySubsidiary;
                  this.getDataUrl = ReportApi.JournalByNoBySubsidiary;
                  break;
                }
              case JournalDisplayType.ByDateLedgerSummary:
                {
                  this.entityTypeName = Entities.JournalByNoSummary;
                  this.metadataType = Metadatas.JournalByNoSummary;
                  this.getDataUrl = ReportApi.JournalByNoLedgerSummary;
                  break;
                }
              case JournalDisplayType.ByDateLedgerSummaryByDate:
                {
                  this.showMessage(String.Format(this.getText('Journal.ChooseByDate'), this.getText(JournalDisplayTypeResource.BriefVoucherByDate)), MessageType.Warning);
                  this.getDataUrl = undefined;
                  break;
                }
              case JournalDisplayType.ByDateLedgerSummaryByMonth:
                {
                  this.showMessage(String.Format(this.getText('Journal.ChooseByDate'), this.getText(JournalDisplayTypeResource.BriefVoucherByMonth)), MessageType.Warning);
                  this.getDataUrl = undefined;
                  break;
                }
              default:
            }

            if (parseInt(this.displayTypeSelected) != JournalDisplayType.ByDateLedgerSummaryByDate && parseInt(this.displayTypeSelected) != JournalDisplayType.ByDateLedgerSummaryByMonth) {
              this.getDataUrl += "?from=" + this.fromVoucher + "&to=" + this.toVoucher;
              this.reloadGrid();
            }
          }
          else {
            this.showMessage(this.getText('Journal.FinalVoucherShouldLarger'), MessageType.Warning);
          }
        }
        else {
          this.showMessage(this.getText('Journal.RequiredVoucherNumber'), MessageType.Warning);
        }
      }
    }

  }

  reloadGrid(insertedModel?: any) {

    if (this.getDataUrl) {
      //if (this.viewAccess) {
      this.grid.loading = true;

      if (this.totalRecords == this.skip && this.totalRecords != 0) {
        this.skip = this.skip - this.pageSize;
      }

      if (insertedModel)
        this.goToLastPage(this.totalRecords);

      var currentFilter = this.currentFilter;
      this.defaultFilter.forEach(item => {
        currentFilter = this.addFilterToFilterExpression(currentFilter,
          item, FilterExpressionOperator.And);
      })
      var filter = currentFilter;

      this.gridService.getAll(this.getDataUrl, this.pageIndex, this.pageSize, this.sort, filter).subscribe((res) => {

        var resData = res.body;
        var totalCount = 0;

        if (res.headers != null) {
          var headers = res.headers != undefined ? res.headers : null;
          if (headers != null) {
            var retheader = headers.get('X-Total-Count');
            if (retheader != null)
              totalCount = parseInt(retheader.toString());
          }
        }
        this.rowData = {
          data: resData.items,
          total: totalCount
        }

        if(this.rowData && this.rowData.total > 0)
        {
          var columnsToFit: Array<ColumnBase> = new Array<ColumnBase>();
          this.grid.leafColumns.forEach(function (item) {                       
            var column = item as ColumnBase;
            if (column.width == undefined) {
              columnsToFit.push(column);
            }
          });
          this.fitColumns(columnsToFit);
        }
        this.isDefaultBtn = true;
        this.creditSum = resData.creditSum;
        this.debitSum = resData.debitSum;

        this.showloadingMessage = !(resData.items.length == 0);
        this.totalRecords = totalCount;
        this.grid.loading = false;
      })
      //}
      //else {
      //  this.rowData = {
      //    data: [],
      //    total: 0
      //  }
      //}

    }
    this.cdref.detectChanges();
  }


  public showReport() { 
    this.reportManager.DecisionMakingForReport();
  }

  changeParam() {
    this.isDefaultBtn = false;

    this.creditSum = 0;
    this.debitSum = 0;
    this.selectedRows = [];
    this.pageIndex = 0;
    this.showloadingMessage = false;
    this.totalRecords = 0;
    this.rowData = undefined;
  }

  changeBranchSeparation() {
    if (!this.selectedBranchSeparation) {
      this.gridColumnsRow = this.gridColumns.filter(f => f.name != "BranchName");
    }
    else {
      this.gridColumnsRow = this.gridColumns;
    }
  }

  getColumns(e: any) {
    this.gridColumns = e;
    if (!this.selectedBranchSeparation) {
      this.gridColumnsRow = this.gridColumns.filter(f => f.name != "BranchName");
    }
    else {
      this.gridColumnsRow = this.gridColumns;
    }

  }

}


