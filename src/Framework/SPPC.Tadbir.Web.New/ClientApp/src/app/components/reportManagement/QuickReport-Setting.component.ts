import { DetailComponent } from "../../class/detail.component";
import { Layout } from "../../../environments/environment";
import { Component, OnInit, Renderer2, NgZone, ChangeDetectorRef, ViewEncapsulation } from '@angular/core';
import { ToastrService } from 'ngx-toastr';
import { RTL } from '@progress/kendo-angular-l10n';
import { AutoGeneratedGridComponent } from "../../class/autoGeneratedGrid.component";
import { GridService, SettingService } from "../../service/index";
import { MetaDataService } from "../../service/metadata/metadata.service";
import { ReportingService } from "../../service/report/reporting.service";
import { TranslateService } from '@ngx-translate/core';
import { forEach } from "@angular/router/src/utils/collection";
import { Property } from "../../class/metadata/property";
import { ReportManagementComponent } from "./reportManagement.component";

export function getLayoutModule(layout: Layout) {
  return layout.getLayout();
}
@Component({
  encapsulation: ViewEncapsulation.None,
  selector: 'report-setting',
  templateUrl: './QuickReport-Setting.component.html',
  styleUrls: ['./QuickReport-Setting.component.css'],
  providers: [{
    provide: RTL,
    useFactory: getLayoutModule,
    deps: [Layout]
  }] 
})

export class QuickReportSettingComponent extends AutoGeneratedGridComponent implements OnInit {

  gridColumnsRow: any[] = [];
  active: boolean;
  dialogWidth: any;
  reportManager: ReportManagementComponent

  constructor(public toastrService: ToastrService, public translate: TranslateService, public gridService: GridService,
    public cdref: ChangeDetectorRef, public renderer: Renderer2, public metadata: MetaDataService, 
    public settingService: SettingService,  public ngZone: NgZone) {
    super(toastrService, translate, gridService, renderer, metadata, settingService, cdref, ngZone);
  }



  ngOnInit() {   
     
  }

  showReportSetting(gridColumns: Property[], entityTypeName: string, viwId: number, rManager: ReportManagementComponent ) {
    this.entityName = entityTypeName;
    this.viewId = viwId;

    this.getAllMetaDataByViewIdAsync(viwId).then(response => {
      if (response) {
        var propeties = response;
        propeties.forEach(function (property) {
          var findex = propeties.findIndex(f => f.id === property.id);
          if (gridColumns.findIndex(f => f.id === property.id) >= 0) {            
            propeties[findex].visibility = "visible";
          }
          else {
            propeties[findex].visibility = "hidden";
          }
        });

        this.gridColumnsRow = propeties;
      }
    });

    this.active = true;
    this.dialogWidth = innerWidth;
    this.reportManager = rManager;
  }

  closeDialog() {
    this.active = false;
  }

  showReport() {
    this.reportManager.DecisionMakingForShowReport();
  }

}
