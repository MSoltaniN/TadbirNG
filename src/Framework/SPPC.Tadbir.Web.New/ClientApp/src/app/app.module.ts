
import { NgModule, NO_ERRORS_SCHEMA, forwardRef, ErrorHandler } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { ButtonsModule } from '@progress/kendo-angular-buttons';
import { Headers, RequestOptions, BaseRequestOptions, Http, HttpModule } from '@angular/http';
import { APP_BASE_HREF, CommonModule, Location, LocationStrategy, HashLocationStrategy, DatePipe } from '@angular/common';
// third party module to display toast 
import { ToastrModule } from 'ngx-toastr';
import { TreeViewModule } from '@progress/kendo-angular-treeview';
import { ReactiveFormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';
import { TextMaskModule } from 'angular2-text-mask';
import { PopupModule } from '@progress/kendo-angular-popup';
import { ContextMenuModule } from '@progress/kendo-angular-menu';

import { AppComponent } from './app.component';
import { AppRoutingModule } from './app-routing.module';

import { DialogComponent } from './class/dialog.component';

import { DpDatePickerModule } from 'ng2-jalali-date-picker';

import { Layout } from '../environments/environment';

import { BrowserModule } from "@angular/platform-browser";
//import { TranslateModule, TranslateLoader, TranslateStaticLoader } from "ng2-translate";
import { TranslateModule, TranslateLoader } from '@ngx-translate/core';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';

import { GridModule } from '@progress/kendo-angular-grid';
import { RTL, MessageService } from '@progress/kendo-angular-l10n';

import { DialogModule } from '@progress/kendo-angular-dialog';
import { DropDownsModule } from '@progress/kendo-angular-dropdowns';
import { InputsModule } from '@progress/kendo-angular-inputs';
import { CalendarModule } from '@progress/kendo-angular-dateinputs';

import { HotkeyModule } from 'angular2-hotkeys';

import {
  AccountService, VoucherLineService, FiscalPeriodService, GridMessageService, CompanyService, UserService, RoleService, DetailAccountService, CostCenterService,
  BranchService, VoucherService, LookupService, FullAccountService, ProjectService, AccountRelationsService, SettingService, ViewRowPermissionService, FullCodeService,
  OperationLogService, DashboardService, AccountGroupsService, AccountCollectionService, GridService, CurrencyService
} from './service/index';

import { SppcGridColumn } from "./directive/grid/sppc-grid-column";
import { SppcAutoGridColumn } from './directive/grid/sppc-auto-grid-column';
import { SppcGridReorder } from "./directive/grid/sppc-grid-reorder";
import { SppcAutoGeneratedGridReorder } from './directive/grid/sppc-auto-generated-grid-reorder';
import { SppcAutoGeneratedGridResize } from './directive/grid/sppc-auto-generated-grid-resize';


import { MetaDataService } from './service/metadata/metadata.service';
import { SppcGridResize } from './directive/grid/sppc-grid-resize';
import { GridSettingComponent } from './directive/grid/component/grid-setting.component';
import { AutoGeneratedGridSettingComponent } from './directive/grid/component/auto-generated-grid-setting.component';
import { SelectFormGridSettingComponent } from './directive/grid/component/selectForm-grid-setting.component';
import { SppcCheckAccess } from './directive/grid/sppc-check-access';
import { SppcViewTreeConfig } from './directive/grid/sppc-viewTree-config';

import { EnviromentComponent } from './class/enviroment.component';
import { GeneralErrorHandler } from './class/error.handler';
import { HttpClientModule, HttpClient } from '@angular/common/http';


import { NgProgressModule } from '@ngx-progressbar/core';
import { NgProgressHttpModule } from '@ngx-progressbar/http';
import { NgProgressRouterModule } from '@ngx-progressbar/router';
import { GridFilterComponent } from './directive/grid/component/grid-filter.component';
import { DefaultComponent } from './class/default.component';
import { AutoGeneratedGridComponent } from './class/autoGeneratedGrid.component';
import { GridExplorerComponent } from './class/gridExplorer.component';
import { ReportingService } from './service/report/reporting.service';
import { LayoutModule } from '@progress/kendo-angular-layout';


//metadata resolver
import { MetaDataResolver } from './class/metadata/metadata.resolver';

//import compress package
import { LZStringModule, LZStringService } from 'ng-lz-string';

import { CoreModule } from './core/core.module';
import { SharedModule } from './shared/shared.module';
import { FinanceModule } from './finance/finance.module';



export function HttpLoaderFactory(http: HttpClient) {
  return new TranslateHttpLoader(http);
}

@NgModule({
  declarations: [
    AppComponent,
    SppcGridColumn,
    SppcAutoGridColumn,
    SppcGridReorder,
    SppcAutoGeneratedGridReorder,
    SppcAutoGeneratedGridResize,
    SppcGridResize,
    GridSettingComponent,
    AutoGeneratedGridSettingComponent,
    SelectFormGridSettingComponent,
    GridFilterComponent,

    SppcCheckAccess,
    SppcViewTreeConfig,
    DialogComponent,
    DialogComponent,
  ],
  imports: [
    CoreModule,
    SharedModule,
    FinanceModule,
    AppRoutingModule,


    BrowserModule.withServerTransition({ appId: 'ng-cli-universal' }),
    ButtonsModule,
    CommonModule,
    HttpModule,
    FormsModule,
    ReactiveFormsModule,
    BrowserAnimationsModule,
    PopupModule,
    ContextMenuModule,
    ToastrModule.forRoot({ preventDuplicates: true }),
    HotkeyModule.forRoot(),
    DialogModule, DropDownsModule, GridModule, InputsModule, CalendarModule,
    DpDatePickerModule,
    TextMaskModule,
    TreeViewModule,
    HttpClientModule,
    LZStringModule,
    NgProgressModule.forRoot({
      direction: 'ltr+',
      spinnerPosition: 'left',
      color: 'white',
      thick: true,
      meteor: false
    }),
    NgProgressRouterModule,
    NgProgressHttpModule,
    TranslateModule.forRoot({
      loader: {
        provide: TranslateLoader,
        useFactory: HttpLoaderFactory,
        deps: [HttpClient]
      }
    }),
    //RouterModule.forRoot([
    //  { path: '', redirectTo: 'login', pathMatch: 'full' },
    //  { path: 'account', component: AccountComponent, canActivate: [AuthGuard] },
    //  { path: 'login', component: LoginContainerComponent },
    //  { path: 'logout', component: LogoutComponent },
    //  { path: 'voucher', component: VoucherComponent, canActivate: [AuthGuard] },
    //  {
    //    path: 'vouchers/:mode', component: VoucherEditorComponent, canActivate: [AuthGuard],
    //    data: { viewId: ViewName.Voucher },
    //    resolve: {
    //      team: MetaDataResolver
    //    }
    //  },
    //  { path: 'users', component: UserComponent, canActivate: [AuthGuard] },
    //  { path: 'roles', component: RoleComponent, canActivate: [AuthGuard] },
    //  { path: 'changePassword', component: ChangePasswordComponent, canActivate: [AuthGuard] },
    //  { path: 'detailAccount', component: DetailAccountComponent, canActivate: [AuthGuard] },
    //  { path: 'costCenter', component: CostCenterComponent, canActivate: [AuthGuard] },
    //  { path: 'projects', component: ProjectComponent, canActivate: [AuthGuard] },
    //  { path: 'fiscalperiod', component: FiscalPeriodComponent, canActivate: [AuthGuard] },
    //  { path: 'branches', component: BranchComponent, canActivate: [AuthGuard] },
    //  { path: 'companies', component: CompanyComponent, canActivate: [AuthGuard] },
    //  { path: 'accountrelations', component: AccountRelationsComponent, canActivate: [AuthGuard] },
    //  { path: 'settings', component: SettingsComponent, canActivate: [AuthGuard] },
    //  { path: 'viewRowPermission', component: ViewRowPermissionComponent, canActivate: [AuthGuard] },
    //  { path: 'operation-log', component: OperationLogsComponent, canActivate: [AuthGuard] },
    //  //{ path: 'dashboard', component: DashboardComponent, canActivate: [AuthGuard] },
    //  { path: 'account-groups', component: AccountGroupsComponent, canActivate: [AuthGuard] },
    //  { path: 'accounts/group/:groupid', component: RelatedAccountsComponent, canActivate: [AuthGuard] },
    //  { path: 'account-collection', component: AccountCollectionComponent, canActivate: [AuthGuard] },
    //  { path: 'journal', component: JournalComponent, canActivate: [AuthGuard] },
    //  { path: 'account-book', component: AccountBookComponent, canActivate: [AuthGuard] },
    //  { path: 'home', component: HomeComponent, canActivate: [AuthGuard] },
    //  { path: 'reports', component: ReportManagementComponent, canActivate: [AuthGuard] },
    //  { path: 'currency', component: CurrencyComponent, canActivate: [AuthGuard] },
    //  //{ path: 'inlinetest', component: InlineTestComponent, canActivate: [AuthGuard] },
    //  { path: '**', redirectTo: 'dashboard' }
    //]),
    LayoutModule
  ],
  providers: [AccountService, VoucherLineService, FiscalPeriodService, BranchService, CompanyService, VoucherService, LookupService, MetaDataService,
    UserService, RoleService, FullAccountService, DetailAccountService, CostCenterService, ProjectService, AccountRelationsService, SettingService, ViewRowPermissionService,
    FullCodeService, OperationLogService, DashboardService, ReportingService, AccountGroupsService, AccountCollectionService, GridService, CurrencyService,
    { provide: LocationStrategy, useClass: HashLocationStrategy },
    { provide: ErrorHandler, useClass: GeneralErrorHandler },
    //{
    //    provide: RTL,
    //    useFactory: function () {
    //        var lang = localStorage.getItem('lang');
    //        if (lang == "en") {
    //            return false;
    //        } 
    //        else 
    //            return true;
    //    }            
    //},
    { provide: MessageService, useClass: GridMessageService },
    DatePipe,
    Layout,
    EnviromentComponent,
    DefaultComponent,
    AutoGeneratedGridComponent,
    GridExplorerComponent,
    LZStringService,
    MetaDataResolver
  ],
  schemas: [NO_ERRORS_SCHEMA],
  bootstrap: [AppComponent]
})
export class AppModule { }
