import { Component, OnInit, Renderer2, ChangeDetectorRef, NgZone  } from '@angular/core';
import { ToastrService } from 'ngx-toastr';
import "rxjs/Rx";
import { TranslateService } from '@ngx-translate/core';
import { RTL } from '@progress/kendo-angular-l10n';
import { String } from '@sppc/shared/class/source';
import { Layout, Entities, MessageType } from '@sppc/env/environment';
import { AutoGeneratedGridComponent } from '@sppc/shared/class';
import { GridService, MetaDataService, BrowserStorageService } from '@sppc/shared/services';
import { SettingService } from '@sppc/config/service';
import { User } from '@sppc/admin/models';
import { RelatedItemsInfo, UserService, UserInfo } from '@sppc/admin/service';
import { UserApi } from '@sppc/admin/service/api';
import { ViewName } from '@sppc/shared/security';
import { RelatedItems } from '@sppc/shared/models';




export function getLayoutModule(layout: Layout) {
  return layout.getLayout();
}

@Component({
  selector: 'user',
  templateUrl: './user.component.html',
  providers: [{
    provide: RTL,
    useFactory: getLayoutModule,
    deps: [Layout]
  }]
})

export class UserComponent extends AutoGeneratedGridComponent implements OnInit {

  rolesList: boolean = false;
  isNew: boolean;
  errorMessage: string;

  editDataItem?: User = undefined;
  userRolesData: RelatedItemsInfo;

  constructor(public toastrService: ToastrService, public translate: TranslateService, public gridService: GridService, public bStorageService: BrowserStorageService,
    public cdref: ChangeDetectorRef, public renderer: Renderer2, public metadata: MetaDataService, private userService: UserService,
    public settingService: SettingService, public ngZone: NgZone, ) {
    super(toastrService, translate, gridService, renderer, metadata, settingService, bStorageService, cdref, ngZone);
  }

  ngOnInit() {
    this.entityName = Entities.User;
    this.viewId = ViewName[this.entityTypeName];

    this.getDataUrl = String.Format(UserApi.Users, this.FiscalPeriodId, this.BranchId);
    this.reloadGrid();
    this.cdref.detectChanges();
  }


  public editHandler(arg: any) {
    var recordId = this.selectedRows[0].id;
    this.grid.loading = true;
    this.userService.getById(String.Format(UserApi.User, recordId)).subscribe(res => {
      this.editDataItem = res;
      this.grid.loading = false;
    })
    this.isNew = false;
    this.errorMessage = '';
  }

  public cancelHandler() {
    this.editDataItem = undefined;
    this.isNew = false;
    this.errorMessage = '';
  }

  public saveUserRolesHandler(userRoles: RelatedItems) {
    this.grid.loading = true;
    this.userService.modifiedUserRoles(userRoles)
      .subscribe(response => {
        this.rolesList = false;
        this.showMessage(this.getText("User.UpdateRoles"), MessageType.Succes);
        this.grid.loading = false;
      }, (error => {
        this.grid.loading = false;
        this.errorMessage = error;
      }));
  }

  public saveHandler(model: User) {
    this.grid.loading = true;
    if (!this.isNew) {
      this.userService.edit<User>(String.Format(UserApi.User, model.id), model)
        .subscribe(response => {
          this.isNew = false;
          this.editDataItem = undefined;
          this.showMessage(this.updateMsg, MessageType.Succes);
          this.reloadGrid();
          this.selectedRows = [];
        }, (error => {
          this.grid.loading = false;
          this.errorMessage = error;
        }));
    }
    else {
      this.userService.insert<User>(UserApi.Users, model)
        .subscribe((response: any) => {
          this.isNew = false;
          this.editDataItem = undefined;
          this.showMessage(this.insertMsg, MessageType.Succes);
          var insertedModel = response;
          this.reloadGrid(insertedModel);
          this.selectedRows = [];

        }, (error => {
          this.isNew = true;
          this.errorMessage = error;
          this.grid.loading = false;
        }));
    }
  }

  public rolesHandler() {
    var userId = this.selectedRows[0].id;
    this.rolesList = true;
    this.grid.loading = true;
    this.userService.getUserRoles(userId).subscribe(res => {
      this.userRolesData = res;
      this.grid.loading = false;
    });

    this.errorMessage = '';
  }

  public cancelUserRolesHandler() {
    this.rolesList = false;
    this.errorMessage = '';
  }


  //reloadGrid(insertedModel?: User) {
  //  this.grid.loading = true;
  //  var filter = this.currentFilter;
  //  this.reportFilter = filter;

  //  if (this.totalRecords == this.skip && this.totalRecords != 0) {
  //    this.skip = this.skip - this.pageSize;
  //  }

  //  if (insertedModel)
  //    this.goToLastPage(this.totalRecords);

  //  this.userService.getAll(String.Format(UserApi.Users, this.FiscalPeriodId, this.BranchId), this.pageIndex, this.pageSize, this.sort, filter).subscribe((res) => {
  //    var resData = res.body;
  //    var totalCount = 0;

  //    if (res.headers != null) {
  //      var headers = res.headers != undefined ? res.headers : null;
  //      if (headers != null) {
  //        var retheader = headers.get('X-Total-Count');
  //        if (retheader != null)
  //          totalCount = parseInt(retheader.toString());
  //      }
  //    }
  //    this.rowData = {
  //      data: resData,
  //      total: totalCount
  //    }
  //    this.showloadingMessage = !(resData.length == 0);
  //    this.totalRecords = totalCount;

  //    this.grid.loading = false;
  //  })

  //}

  public addNew() {
    this.isNew = true;
    this.editDataItem = new UserInfo();
    this.errorMessage = '';
  }

}

