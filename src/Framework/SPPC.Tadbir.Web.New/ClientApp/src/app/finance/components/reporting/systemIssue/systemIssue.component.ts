import { Component, OnInit, Renderer2, forwardRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { ToastrService } from 'ngx-toastr';
import "rxjs/Rx";
import { TranslateService } from '@ngx-translate/core';
import { RTL } from '@progress/kendo-angular-l10n';
import { AutoGeneratedGridComponent, Filter, FilterExpressionOperator, FilterExpression } from '@sppc/shared/class';
import { Layout, environment } from '@sppc/env/environment';
import { BrowserStorageService, MetaDataService, GridService } from '@sppc/shared/services';
import { SettingService } from '@sppc/config/service';
import { Item } from '@sppc/shared/models';
import { BranchScopeResource } from '@sppc/finance/enum';
import { SystemIssueService } from '@sppc/finance/service';
import { SystemIssueApi } from '@sppc/finance/service/api';
import { SystemIssue } from '@sppc/finance/models';
import { TreeItem, TreeItemLookup } from '@progress/kendo-angular-treeview';
import { DialogService } from '@progress/kendo-angular-dialog';
import { ColumnBase } from '@progress/kendo-angular-grid';
import { ViewName } from '@sppc/shared/security';




export function getLayoutModule(layout: Layout) {
  return layout.getLayout();
}


@Component({
  selector: 'system-issue',
  templateUrl: './systemIssue.component.html',
  styleUrls: ['./systemIssue.component.css'],
  providers: [{
    provide: RTL,
    useFactory: getLayoutModule,
    deps: [Layout]
  }]
})


export class SystemIssueComponent extends AutoGeneratedGridComponent implements OnInit {

  fromDate: Date;
  toDate: Date;
  systemIssuesList: Array<SystemIssue> = [];
  selectedBranchScope: string = '1';

  checkedIssues: Array<number> = [];
  selectedIssue: Array<number> = [];
  listTitle: string;
  isShowGrid: boolean = false;

  issuesCountList: Array<{ id: number, count: number }> = [];

  branchScope: Array<Item> = [
    { value: BranchScopeResource.CurrentBranch, key: "1" },
    { value: BranchScopeResource.CurrentBranchAndSubsets, key: "2" },
  ]

  constructor(public toastrService: ToastrService, public translate: TranslateService, public dialogService: DialogService, public gridService: GridService,
    public cdref: ChangeDetectorRef, public renderer: Renderer2, public metadata: MetaDataService, public systemIssueService: SystemIssueService,
    public bStorageService: BrowserStorageService, public settingService: SettingService, public ngZone: NgZone) {
    super(toastrService, translate, gridService, renderer, metadata, settingService, bStorageService, cdref, ngZone);
  }

  ngOnInit(): void {
    this.getSystemIssuesList();
  }

  getSystemIssuesList() {
    this.systemIssueService.getModels(SystemIssueApi.SystemIssues).subscribe(res => {
      this.systemIssuesList = res;
    })
  }

  dateValueChange(event: any) {
    this.fromDate = event.fromDate;
    this.toDate = event.toDate;
    this.changeParam();
  }

  public checkById(item: TreeItem) {
    return item.dataItem.id;
  }

  issueCount = (issueId: number) => {

    var item = this.issuesCountList.find(f => f.id == issueId);

    return item ? item.count : undefined;
  }

  handleSelection(event: any) {
    this.changeParam();
    var item = event.dataItem;

    if (item.viewId && item.apiUrl) {
      var issue = this.systemIssuesList.find(f => f.id == item.id)
      this.listTitle = issue.title;
      this.isShowGrid = true;
      this.viewId = this.tempViewId = issue.viewId;
      this.entityName = ViewName[this.viewId];

      this.getDataUrl = environment.BaseUrl + item.apiUrl + "?from=" + this.fromDate + "&to=" + this.toDate;;
      this.reloadGrid();
    }
    else {
      this.listTitle = undefined;
      this.isShowGrid = false;
    }
  }

  handleChecked(event: any) {

    let missing = this.issuesCountList.filter(item => this.checkedIssues.findIndex(f => f == item.id) < 0);

    missing.forEach(item => {
      var missIndex = this.issuesCountList.findIndex(f => f.id == item.id);
      if (missIndex > -1)
        this.issuesCountList.splice(missIndex, 1);
    })

    this.checkedIssues.forEach(item => {
      var index = this.issuesCountList.findIndex(f => f.id == item);
      if (index == -1) {
        var issue = this.systemIssuesList.find(f => f.id == item);
        if (issue.apiUrl && issue.viewId)
          this.getIssueCount(issue.apiUrl, issue.id);
      }
    })

  }

  getIssueCount(apiUrl: string, issueId: number) {
    apiUrl = environment.BaseUrl + apiUrl + "?from=" + this.fromDate + "&to=" + this.toDate;

    var currentFilter = this.setFilter();

    this.systemIssueService.getAll(apiUrl, this.pageIndex, this.pageSize, this.sort, currentFilter).subscribe(res => {
      if (res.headers != null) {
        var headers = res.headers != undefined ? res.headers : null;
        if (headers != null) {
          var retheader = headers.get('X-Total-Count');
          if (retheader != null) {
            var totalCount = parseInt(retheader.toString());

            var index = this.issuesCountList.findIndex(f => f.id == issueId);
            if (index > -1) {
              this.issuesCountList.splice(index, 1);
            }
            this.issuesCountList.push({ id: issueId, count: totalCount })
          }
        }
      }

    })
  }

  reloadGrid(insertedModel?: any) {
    if (this.getDataUrl) {

      this.grid.loading = true;

      if (this.totalRecords == this.skip && this.totalRecords != 0) {
        this.skip = this.skip - this.pageSize;
      }

      this.reportFilter = null;

      var currentFilter = this.setFilter();


      this.gridService.getAll(this.getDataUrl, this.pageIndex, this.pageSize, this.sort, currentFilter).subscribe((res) => {
        var resData = res.body;
        var totalCount = 0;

        if (res.headers != null) {
          var headers = res.headers != undefined ? res.headers : null;
          if (headers != null) {
            var retheader = headers.get('X-Total-Count');
            if (retheader != null) {
              totalCount = parseInt(retheader.toString());

              //  var index = this.issuesCountList.findIndex(f => f.id == issueId);
              //if (index > -1) {
              //  this.issuesCountList.splice(index, 1);
              //}
              //this.issuesCountList.push({ id: issueId, count: totalCount })
              //}
            }
          }
          this.rowData = {
            data: resData,
            total: totalCount
          }

          this.viewId = this.tempViewId;

          if (this.rowData && this.rowData.total > 0) {
            var columnsToFit: Array<ColumnBase> = new Array<ColumnBase>();
            this.grid.leafColumns.forEach(function (item) {
              var column = item as ColumnBase;
              if (column.width == undefined) {
                columnsToFit.push(column);
              }
            });
            this.fitColumns(columnsToFit);
          }

          this.showloadingMessage = !(resData.length == 0);
          this.totalRecords = totalCount;
          this.grid.loading = false;
        }
      })
    }
    this.cdref.detectChanges();
  }

  setFilter(): FilterExpression {
    this.defaultFilter = [];
    if (this.selectedBranchScope == "1") {
      this.defaultFilter.push(new Filter("BranchId", this.BranchId.toString(), "== {0}", "System.Int32"));
    }

    var currentFilter = this.currentFilter ? JSON.parse(JSON.stringify(this.currentFilter)) : undefined;
    this.defaultFilter.forEach((item) => {
      currentFilter = this.addFilterToFilterExpression(currentFilter,
        item, FilterExpressionOperator.And);
    });

    return currentFilter;
  }

  changeParam() {
    this.checkedIssues = [];
    this.selectedIssue = [];
    this.listTitle = undefined;
    this.isShowGrid = false;
    this.issuesCountList = [];
    this.pageIndex = 0;
  }
}


