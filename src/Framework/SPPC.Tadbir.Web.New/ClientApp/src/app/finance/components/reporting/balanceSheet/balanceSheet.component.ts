import { Layout, Entities, environment, MessageType, CustomForm } from "@sppc/env/environment";
import { Component, OnInit, ChangeDetectorRef, Renderer2, NgZone, ViewChild } from "@angular/core";
import { String,AutoGeneratedGridComponent, Filter, FilterExpression, FilterExpressionOperator } from "@sppc/shared/class";
import { RTL } from "@progress/kendo-angular-l10n";
import { ToastrService } from "ngx-toastr";
import { TranslateService } from "@ngx-translate/core";
import { DialogService } from "@progress/kendo-angular-dialog";
import { GridService, MetaDataService, BrowserStorageService, ReportingService, SessionKeys } from "@sppc/shared/services";
import { ProfitLostService } from "@sppc/finance/service/profitLost.service";
import { SettingService } from "@sppc/config/service";
import { ViewName, ProfitLossPermissions } from "@sppc/shared/security";
import { BranchScopeResource, VoucherStatusResource, ComparativeResource, ComparativeKeys } from "@sppc/finance/enum";
import { Item } from "@sppc/shared/models";
import { SelectFormComponent } from "@sppc/shared/controls";
import { ProfitLossApi, VoucherApi } from "@sppc/finance/service/api";
import { GridComponent } from "@progress/kendo-angular-grid";
import { ViewIdentifierComponent, ReportViewerComponent } from "@sppc/shared/components";
import { ReportManagementComponent } from "@sppc/shared/components/reportManagement/reportManagement.component";
import { QuickReportSettingComponent } from "@sppc/shared/components/reportManagement/QuickReport-Setting.component";
import { VoucherService } from "@sppc/finance/service";
import { QuickReportViewSetting } from "@sppc/shared/components/reportManagement/QuickReportViewSetting";
import { BalanceSheetApi } from "@sppc/finance/service/api/balanceSheetApi";


export function getLayoutModule(layout: Layout) {
  return layout.getLayout();
}

@Component({
  selector: 'sppc-balance-sheet',
  templateUrl: './balanceSheet.component.html',
  styles: [`
.section-option { margin-top: 15px; background-color: #f6f6f6; border: solid 1px #dadde2; padding: 15px 15px 0; }
.section-option label,input[type=text] { width:100% } /deep/.section-option kendo-dropdownlist { width:100% }
/deep/ .k-switch-on .k-switch-handle { left: -8px !important; }
/deep/ .k-switch-off .k-switch-handle { left: -4px !important; }
/deep/ .k-switch[dir="rtl"] .k-switch-label-on { right: -22px; }
/deep/ .k-switch[dir="rtl"] .k-switch-label-off { left: 0; }
/deep/ .k-switch-label-on,/deep/ .k-switch-label-off { overflow: initial; }
/deep/.k-footer-template { background-color: #b3b3b3; color: #000;}
.btn-compute-default {margin-top: 25px; border: 2px solid #337ab7; color: #337ab7; padding: 5px 25px;}
.btn-compute { color: #337ab7; transition: All 0.3s 0.1s ease-out;}
.btn-compute-selectable{ color: #fff; background-image: linear-gradient(#c1e3ff, #337ab7);}
/deep/ sppc-balance-sheet .k-grid tr.k-alt {background-color: rgb(248, 251, 253)!important;}
/deep/ sppc-balance-sheet .k-grid[dir="rtl"] td, .k-rtl .k-grid td { border-width: 0 0px 0 0!important;border: 0!important;}
.section-account button { margin: 0 2px; }
.section-account .acc-name{ width: 88% }
.section-account .acc-code{ width: 57%; position: absolute; top: -5px; }
.section-account .acc-code-rtl { left: 30px; }
.section-account .acc-code-ltr { right: 30px; }
.section-account label {width:35%}
`],
  providers: [{
    provide: RTL,
    useFactory: getLayoutModule,
    deps: [Layout]
  }]
})

export class BalanceSheetComponent extends AutoGeneratedGridComponent implements OnInit {

  toDate: Date;

  selectedCostCenterModel: any;
  selectedProjectModel: any;
  branchScopeSelected: string = '1';
  voucherStatusSelected: string = '2';
  filterByRef: string;
  param: any;
  projectSelected: boolean;
  costCenterSelected: boolean;
  showFilterByRef: boolean;  
  closing: boolean;  
  isDefaultBtn: boolean = true;  

  branchScope: Array<Item> = [
    { value: BranchScopeResource.CurrentBranch, key: "1" },
    { value: BranchScopeResource.CurrentBranchAndSubsets, key: "2" },
  ]

  comparative: Array<Item> = [
    { value: ComparativeResource.Branch, key: "1" },
    { value: ComparativeResource.FiscalPeriod, key: "2" },
    { value: ComparativeResource.CostCenter, key: "3" },
    { value: ComparativeResource.Project, key: "4" },
  ]

  voucherStatus: Array<Item> = [
    { value: VoucherStatusResource.Committed, key: "2" },
    { value: VoucherStatusResource.Finalized, key: "3" },
    { value: VoucherStatusResource.Confirmed, key: "4" },
    { value: VoucherStatusResource.Approved, key: "5" },
    { value: VoucherStatusResource.AllVouchers, key: "0" }
  ]

  viewSetting: QuickReportViewSetting = { hideHorizontalLine : true, hideVerticalLine : true}; 

  @ViewChild(GridComponent) grid: GridComponent;
  @ViewChild(ViewIdentifierComponent) viewIdentity: ViewIdentifierComponent;
  @ViewChild(ReportViewerComponent) viewer: ReportViewerComponent;
  @ViewChild(ReportManagementComponent) reportManager: ReportManagementComponent;
  @ViewChild(QuickReportSettingComponent) reportSetting: QuickReportSettingComponent;

  constructor(public toastrService: ToastrService, public translate: TranslateService, public dialogService: DialogService, public gridService: GridService,
    public cdref: ChangeDetectorRef, public renderer: Renderer2, public metadata: MetaDataService, public profitService: ProfitLostService,
    public bStorageService: BrowserStorageService, public settingService: SettingService, public reporingService: ReportingService, public ngZone: NgZone, public voucherService: VoucherService) {
    super(toastrService, translate, gridService, renderer, metadata, settingService, bStorageService, cdref, ngZone);
  }

  ngOnInit(): void {
    this.entityName = Entities.BalanceSheet;
    this.viewId = ViewName[this.entityTypeName];
    this.showloadingMessage = false;    
    this.isDefaultBtn = true;
    this.toDate = this.FiscalPeriodEndDate;
    this.loadStates();
  }   
  

  setUrlParameters() {
    
    this.getDataUrl += "?";

    if (this.projectSelected)
      this.getDataUrl += "&projectid=" + this.selectedProjectModel.id;

    if (this.costCenterSelected)
      this.getDataUrl += "&ccenterId=" + this.selectedCostCenterModel.id;    

    if (this.closing)
      this.getDataUrl += "&closing=" + this.closing;

  }

  chkCostCenterChange(checked) {
    if (!checked)
      this.selectedCostCenterModel = undefined;
  }

  chkProjectChange(checked) {
    if (!checked)
      this.selectedProjectModel = undefined;
  }

  validateFilters() {
    var isValid: boolean = true;
    if (this.projectSelected) {
      if (!this.selectedProjectModel) {
        this.showMessage(this.getText('ProfitLoss.SelectProject'));
        isValid = false;
      }
    }

    if (this.costCenterSelected) {
      if (!this.selectedCostCenterModel) {
        this.showMessage(this.getText('ProfitLoss.SelectCostCenter'));
        isValid = false;
      }
    }

    if (this.showFilterByRef) {
      if (!this.filterByRef) {
        this.showMessage(this.getText('ProfitLoss.FilterByRefMsg'));
        isValid = false;
      }
    }

    if (this.compareDate(this.toDate, this.FiscalPeriodStartDate) == -1) {
      this.showMessage("تاریخ ابتدا کوچکتر از ابتدای دوره مالی میباشد", MessageType.Warning);
      this.toDate = this.FiscalPeriodEndDate;
      isValid = false;
    }
    else if (this.compareDate(this.toDate, this.FiscalPeriodEndDate) == 1) {
      this.showMessage("تاریخ انتها بزرگتر از انتهای دوره مالی میباشد", MessageType.Warning);
      this.toDate = this.FiscalPeriodEndDate;
      isValid = false;
    }

    return isValid;
  }

  onAdvanceFilterOk(): any {
    this.getReportData();
  }

  onListChanged() {
    this.listChanged = true;
  }

  setDataUrl() {           
    var endDate = new Date(this.toDate).toDateString();   
    this.getDataUrl = BalanceSheetApi.BalanceSheet;
    this.setUrlParameters();
    this.getDataUrl += "&date=" + endDate; 
  }
 
  getReportData() {
       
    if (!this.validateFilters())
      return;
    
    this.quickFilter = [];        
    this.getDataUrl = "";
    
    this.setDataUrl();

    if (this.branchScopeSelected == "1") {      
        this.quickFilter.push(new Filter("BranchId", this.BranchId.toString(), " == {0}", "System.Int32"));
    }

    switch (this.voucherStatusSelected) {
      case "2": {
        this.quickFilter.push(new Filter("VoucherStatusId", this.voucherStatusSelected, " >= {0}", "System.Int32"));
        break;
      }
      case "3": {
        this.quickFilter.push(new Filter("VoucherStatusId", this.voucherStatusSelected, " == {0}", "System.Int32"));
        break;
      }
      case "4": {
        this.quickFilter.push(new Filter("VoucherConfirmedById", "", " != null", ""));
        break;
      }
      case "5": {
        this.quickFilter.push(new Filter("VoucherApprovedById", "", " != null", ""));
        break;
      }
      default:
    }

    if (this.showFilterByRef) {
      var filterByRefValue = '';
      if (this.filterByRef) {
        filterByRefValue = this.filterByRef;
        this.quickFilter.push(new Filter("VoucherReference", filterByRefValue, " == {0}", "System.String"));
      }
      else {
        this.quickFilter.push(new Filter("VoucherReference", filterByRefValue, " == null", "System.String"));
      }
    }
    
    this.reloadGrid();    
  }   

  onChangeFilterByRef(checked)
  {
    if (this.isAccess(Entities.ProfitLost, ProfitLossPermissions.FilterByRef)) {
      if (!checked) {
        this.filterByRef = "";
      }
    }
    else {
      setTimeout(() => {
        this.showFilterByRef = false;
        this.filterByRef = "";
      });      
      this.showMessage(this.getText('App.AccessDenied'), MessageType.Warning);
    }    
  }

  openProjectSelectForm() {

    this.dialogRef = this.dialogService.open({
      content: SelectFormComponent
    });

    this.dialogModel = this.dialogRef.content.instance;
    this.dialogModel.isDisableEntities = true;        
    this.dialogModel.viewID = ViewName.Project;

    this.dialogRef.content.instance.cancel.subscribe((res) => {
      this.dialogRef.close();
    });

    this.dialogRef.content.instance.result.subscribe((res) => {      
      this.selectedProjectModel = res.dataItem;

      this.dialogRef.close();
    });

  }

  openCostCenterSelectForm() {

    this.dialogRef = this.dialogService.open({
      content: SelectFormComponent
    });

    this.dialogModel = this.dialogRef.content.instance;
    this.dialogModel.isDisableEntities = true;

    this.dialogModel.viewID = ViewName.CostCenter;

    this.dialogRef.content.instance.cancel.subscribe((res) => {
      this.dialogRef.close();
    });

    this.dialogRef.content.instance.result.subscribe((res) => {
      this.selectedCostCenterModel = res.dataItem;

      this.dialogRef.close();
    });

  }

  onChangeVoucherStatus() {
    
    let statusFilter: Filter[] = [];
    let statusFilterExp: FilterExpression = undefined;
    var statusKey = "";

    switch (this.voucherStatusSelected) {
      case "2": {
        statusFilter.push(new Filter("StatusId", "1", "== {0}", "System.Int32"));
        statusKey = VoucherStatusResource.NotCommitted;
        break;
      }
      case "3": {
        statusFilter.push(new Filter("StatusId", "2", "== {0}", "System.Int32"));
        statusKey = VoucherStatusResource.NotFinalized;
        break;
      }
      case "4": {
        statusFilter.push(new Filter("ConfirmedById", "", "== null", ""));
        statusKey = VoucherStatusResource.NotConfirmed;
        break;
      }
      case "5": {
        statusFilter.push(new Filter("ConfirmedById", "", "!= null", ""));
        statusFilter.push(new Filter("ApprovedById", "", "== null", ""));
        statusKey = VoucherStatusResource.NotApproved;
        break;
      }
      default:
    }
    if (statusFilter.length > 0) {
      statusFilter.forEach(item => {
        statusFilterExp = this.addFilterToFilterExpression(statusFilterExp,
          item, FilterExpressionOperator.And);
      })

      this.voucherService.getVoucherNumberByStatus(VoucherApi.VoucherCountByStatus, statusFilterExp).subscribe(res => {
        this.showMessage(String.Format(this.getText('Messages.VoucherNumberByStatus'), res.toString(), this.getText(statusKey)), MessageType.Info);
      })
    }

    this.saveStates();
  }

  saveStates() {

    var state = {      
      branchScopeSelected: this.branchScopeSelected,
      voucherStatusSelected: this.voucherStatusSelected,      
    };

    this.bStorageService.setSession(SessionKeys.BalanceSheet, state);
  }

  loadStates() {

    var state = this.bStorageService.getSession(SessionKeys.BalanceSheet);
    if (state) {      
      this.branchScopeSelected = state.branchScopeSelected;
      this.voucherStatusSelected = state.voucherStatusSelected;  
    }
  }

}

