import { Component, OnInit, OnDestroy, ChangeDetectorRef, Renderer2, NgZone, ViewChild } from '@angular/core';
import { String, AutoGeneratedGridComponent, Filter, FilterExpressionOperator, FilterExpression, GridOrderBy } from '@sppc/shared/class';
import { TranslateService } from '@ngx-translate/core';
import { ToastrService } from 'ngx-toastr';
import { MetaDataService, BrowserStorageService, ReportingService, GridService, SessionKeys } from '@sppc/shared/services';
import { SettingService } from '@sppc/config/service';
import { FormBuilder, FormGroup } from '@angular/forms';
import { DialogService, DialogRef } from '@progress/kendo-angular-dialog';
import { Entities, MessageType, Layout } from '@sppc/env/environment';
import { RTL } from '@progress/kendo-angular-l10n';
import { ViewName, BalanceByAccountPermissions } from '@sppc/shared/security';
import { VoucherApi, BalanceByAccountApi } from '@sppc/finance/service/api';
import { VoucherStatusResource, BranchScopeResource } from '@sppc/finance/enum';
import { Item } from '@sppc/shared/models';
import { LookupApi } from '@sppc/shared/services/api';
import { SelectFormComponent } from '@sppc/shared/controls';
import { DetailAccount, CostCenter, Project, Account } from '@sppc/finance/models';
import { SettingKey } from '@sppc/shared/enum';
import { BalanceOptions } from '@sppc/finance/enum/balance';


export function getLayoutModule(layout: Layout) {
  return layout.getLayout();
}

@Component({
  selector: 'sppc-balance-account',
  templateUrl: './balanceByAccount.component.html',
  styleUrls: ['./balanceByAccount.component.css'],
  providers: [{
    provide: RTL,
    useFactory: getLayoutModule,
    deps: [Layout]
  }]
})

export class BalanceByAccountComponent extends AutoGeneratedGridComponent implements OnInit {

  voucherStatus: Array<Item> = [
    { value: VoucherStatusResource.Committed, key: "2" },
    { value: VoucherStatusResource.Finalized, key: "3" },
    { value: VoucherStatusResource.Confirmed, key: "4" },
    { value: VoucherStatusResource.Approved, key: "5" },
    { value: VoucherStatusResource.AllVouchers, key: "0" }
  ]
  branchScope: Array<Item> = [
    { value: BranchScopeResource.CurrentBranch, key: "1" },
    { value: BranchScopeResource.CurrentBranchAndSubsets, key: "2" },
  ]

  gridColumnsRow: any[] = [];
  fromDate: Date;
  toDate: Date;
  fromVoucher: string;
  toVoucher: string;
  isDefaultBtn: boolean = true;
  reportType: string = '1';
  reportBy: Array<Item> = [];

  selectedReportBy: string;

  selectedVoucherStatus: string = '2';
  selectedBranchScope: string = '1';
  isApplyBranchSeparation: boolean = false;
  selectedBranchSeparation: boolean = false;

  showZeroBalanceItems: boolean;
  showClosingVoucher: boolean;
  showTemporaryVoucher: boolean;
  showFilterByRef: boolean = false;
  filterByRef: string;

  chbAccount: boolean = false;
  chbDetailAccount: boolean = false;
  chbCCenter: boolean = false;
  chbProject: boolean = false;
  accountLevelList: Array<any> = [];
  detailAccountLevelList: Array<any> = [];
  cCenterLevelList: Array<any> = [];
  projectLevelList: Array<any> = [];
  selectedAccount: Account;
  selectedDetailAccount: DetailAccount;
  selectedCCenter: CostCenter;
  selectedProject: Project;
  selectedAccountLevel: number;
  selectedDetailAccountLevel: number;
  selectedCCenterLevel: number;
  selectedProjectLevel: number;
  openingVoucherAsInitBalance: boolean;

  dialogRef: DialogRef;
  dialogModel: any;

  private docClickSubscription: any;

  constructor(public toastrService: ToastrService, public translate: TranslateService, public dialogService: DialogService, public gridService: GridService,
    public cdref: ChangeDetectorRef, public renderer: Renderer2, public metadata: MetaDataService, public bStorageService: BrowserStorageService,
    public settingService: SettingService, public reportingService: ReportingService, public ngZone: NgZone, public formBuilder: FormBuilder) {
    super(toastrService, translate, gridService, renderer, metadata, settingService, bStorageService, cdref, ngZone);
  }

  ngOnInit() {
    this.entityName = Entities.BalanceByAccount;
    this.viewId = ViewName[this.entityTypeName];

    this.showloadingMessage = false;

    this.getFirstAndLastVoucherNo();
    this.getReportByItems();

    this.settingService.getSettingById(SettingKey.TestBalanceConfig).subscribe((res) => {
      if (res) {
        this.openingVoucherAsInitBalance = res.values.addOpeningVoucherToInitBalance;
      }
    });

    //this.docClickSubscription = this.renderer.listen('document', 'click', this.onDocumentClick.bind(this));

    this.cdref.detectChanges();
  }

  getReportByItems() {
    this.settingService.getAll(LookupApi.TreeViews).subscribe(res => {
      this.reportBy = res.body;
    })
  }

  onChangeReportBy() {
    var viewId = parseInt(this.selectedReportBy);

    this.getAccountItemLevels(true,viewId);

  }

  openSelectForm(viewId: number) {
    this.dialogRef = this.dialogService.open({
      content: SelectFormComponent,
    });

    this.dialogModel = this.dialogRef.content.instance;

    this.dialogModel.viewID = viewId;
    this.dialogModel.isDisableEntities = true;

    this.dialogRef.content.instance.cancel.subscribe((res) => {

      //var viewId = 1;

      //switch (viewId) {
      //  case ViewName.Account: {
      //    this.selectedAccount.name = "کلیه حساب ها";
      //    console.log(this.selectedAccount);
      //    break;
      //  }
      //  case ViewName.DetailAccount: {
      //    this.selectedDetailAccount.name="کلیه تفصیلی های شناور";
      //    break;
      //  }
      //  case ViewName.CostCenter: {
      //    this.selectedCCenter.name = "کلیه مراکز هزینه";
      //    break;
      //  }
      //  case ViewName.Project: {
      //    this.selectedProject.name = "کلیه پروژه ها";
      //    break;
      //  }
      //  default:
      //}
      this.dialogRef.close();
    });

    this.dialogRef.content.instance.result.subscribe((res) => {
      switch (res.viewId) {
        case ViewName.Account: {
          this.selectedAccount = res.dataItem;
          this.selectedAccountLevel = this.selectedAccount.level;
          break;
        }
        case ViewName.DetailAccount: {
          this.selectedDetailAccount = res.dataItem;
          this.selectedDetailAccountLevel = this.selectedDetailAccount.level;
          break;
        }
        case ViewName.CostCenter: {
          this.selectedCCenter = res.dataItem;
          this.selectedCCenterLevel = this.selectedCCenter.level;
          break;
        }
        case ViewName.Project: {
          this.selectedProject = res.dataItem;
          this.selectedProjectLevel = this.selectedProject.level;
          break;
        }
        default:
      }


      this.dialogRef.close();
    });

  }

  getAccountItemLevels(isChecked: boolean, viewId: number) {
    if (isChecked) {
      this.gridService.getModels(String.Format(LookupApi.AccountBookLevels, viewId)).subscribe(res => {
        switch (viewId) {
          case ViewName.Account: {
            this.accountLevelList = res;
            this.chbAccount = true;
            break;
          }
          case ViewName.DetailAccount: {
            this.detailAccountLevelList = res;
            this.chbDetailAccount = true;
            break;
          }
          case ViewName.CostCenter: {
            this.cCenterLevelList = res;
            this.chbCCenter = true;
            break;
          }
          case ViewName.Project: {
            this.projectLevelList = res;
            this.chbProject = true;
            break;
          }
          default:
        }
      })
    }
    else {
      switch (viewId) {
        case ViewName.Account: {
          this.accountLevelList = [];
          this.selectedAccount = undefined;
          this.selectedAccountLevel = undefined;
          break;
        }
        case ViewName.DetailAccount: {
          this.detailAccountLevelList = [];
          this.selectedDetailAccount = undefined;
          this.selectedDetailAccountLevel = undefined;
          break;
        }
        case ViewName.CostCenter: {
          this.cCenterLevelList = [];
          this.selectedCCenter = undefined;
          this.selectedCCenterLevel = undefined;
          break;
        }
        case ViewName.Project: {
          this.projectLevelList = [];
          this.selectedProject = undefined;
          this.selectedProjectLevel = undefined;
          break;
        }
        default:
      }
    }
  }


  getColumns(e: any) {
    this.gridColumns = e;
    //if (!this.selectedBranchSeparation) {
    this.gridColumnsRow = this.gridColumns.filter(f => f.name != "BranchName");
    //}
    //else {
    //  this.gridColumnsRow = this.gridColumns;
    //}

  }

  dateValueChange(event: any) {
    this.fromDate = event.fromDate;
    this.toDate = event.toDate;
    this.isDefaultBtn = false;
  }

  getFirstAndLastVoucherNo() {
    this.gridService.getModels(VoucherApi.EnvironmentItemRange).subscribe(res => {
      this.fromVoucher = res.firstNo.toString();
      this.toVoucher = res.lastNo.toString();
    })
  }


  changeBranchSeparation() {
    if (this.isAccess(Entities.BalanceByAccount, BalanceByAccountPermissions.ViewByBranch)) {
      this.isApplyBranchSeparation = true;
      if (!this.selectedBranchSeparation) {
        this.gridColumnsRow = this.gridColumns.filter(f => f.name != "BranchName");
      }
      else {
        this.gridColumnsRow = this.gridColumns;
      }
      this.changeParam();
    }
    else {
      this.isApplyBranchSeparation = false;
      this.showMessage(this.getText('App.AccessDenied'), MessageType.Warning);
    }
  }

  changeParam() {
    this.isDefaultBtn = false;

    //this.creditSum = 0;
    //this.debitSum = 0;
    this.selectedRows = [];
    this.pageIndex = 0;
    this.showloadingMessage = false;
    this.totalRecords = 0;
    //this.rowData = undefined;
  }

  onChangeFilterByRef() {
    if (!this.showFilterByRef) {
      this.filterByRef = undefined;
    }
  }

  getReportData() {
    if (this.selectedReportBy) {
      var model: any;
      model = {
        viewId: this.selectedReportBy,
        isByDate : this.reportType == "1" ? true : false,
        fromDate : this.fromDate,
        toDate : this.toDate,
        fromNo : this.fromVoucher,
        toNo : this.toVoucher,
        isByBranch : this.selectedBranchSeparation,
        accountLevel : this.selectedAccountLevel,
        accountId : this.selectedAccount ? this.selectedAccount.id : null,
        detailAccountLevel : this.selectedDetailAccountLevel,
        detailAccountId : this.selectedDetailAccount ? this.selectedDetailAccount.id : null,
        costCenterLevel : this.selectedCCenterLevel,
        costCenterId : this.selectedCCenter ? this.selectedCCenter.id : null,
        projectLevel : this.selectedProjectLevel,
        projectId: this.selectedProject ? this.selectedProject.id : null,
        gridOptions: this.generateGridOptions(),
        options: this.generateOptionNumber()
      }

      this.reportingService.getBalanceByAccountData(BalanceByAccountApi.BalanceByAccount, model).subscribe(res => {
        var resData = res.body;
        var totalCount = 0;

        if (res.headers != null) {
          var headers = res.headers != undefined ? res.headers : null;
          if (headers != null) {
            var retheader = headers.get('X-Total-Count');
            if (retheader != null)
              totalCount = parseInt(retheader.toString());
          }
        }
        this.rowData = {
          data: resData.items,
          total: totalCount
        }

        this.showloadingMessage = !(resData.length == 0);
        this.totalRecords = totalCount;
        this.grid.loading = false;
      })
    }
    else {
      this.showMessage("لطفا گزارش بر اساس را انتخاب کنید", MessageType.Info);
    }
    
  }

  generateGridOptions() {
    this.defaultFilter = [];
    this.quickFilter = [];

    switch (this.selectedVoucherStatus) {
      case "2": {
        this.quickFilter.push(new Filter("VoucherStatusId", this.selectedVoucherStatus, " == {0}", "System.Int32"));
        break;
      }
      case "3": {
        this.quickFilter.push(new Filter("VoucherStatusId", this.selectedVoucherStatus, " == {0}", "System.Int32"));
        break;
      }
      case "4": {
        this.quickFilter.push(new Filter("VoucherConfirmedById", "", " != null", ""));
        break;
      }
      case "5": {
        this.quickFilter.push(new Filter("VoucherApprovedById", "", " != null", ""));
        break;
      }
      default:
    }

    if (this.showFilterByRef) {
      var filterByRefValue = '';
      if (this.filterByRef) {
        filterByRefValue = this.filterByRef;
        this.quickFilter.push(new Filter("VoucherReference", filterByRefValue, " == {0}", "System.String"));
      }
      else {
        this.quickFilter.push(new Filter("VoucherReference", filterByRefValue, " == null", "System.String"));
      }
    }

    if (this.selectedBranchScope == "1") {
      this.quickFilter.push(new Filter("BranchId", this.BranchId.toString(), " == {0}", "System.Int32"));
    }



    this.grid.loading = true;

    if (this.totalRecords == this.skip && this.totalRecords != 0) {
      this.skip = this.skip - this.pageSize;
    }

    var currentFilter = this.currentFilter;
    this.defaultFilter.forEach(item => {
      currentFilter = this.addFilterToFilterExpression(currentFilter,
        item, FilterExpressionOperator.And);
    })

    var filterExp: FilterExpression;
    this.quickFilter.forEach(item => {
      filterExp = this.addFilterToFilterExpression(filterExp,
        item, FilterExpressionOperator.And);
    })

    if (this.advanceFilters)
      currentFilter = this.andFilterToFilterExpression(currentFilter,
        this.advanceFilters);

    var filter = currentFilter;
    this.reportFilter = filter;


    var gridPaging = { pageIndex: this.pageIndex, pageSize: this.pageSize };
    var sort = new Array<GridOrderBy>();
    if (this.sort && this.sort.length > 0) {
      for (let item of this.sort) {
        sort.push(new GridOrderBy(item.field, item.dir.toUpperCase()));
      }
    }
    return { paging: gridPaging, filter: filter, quickFilter: filterExp, sortColumns: sort };

  }

  generateOptionNumber() {
    var options = (this.showTemporaryVoucher ? BalanceOptions.UseClosingTempVoucher : 0) |
      (this.showClosingVoucher ? BalanceOptions.UseClosingVoucher : 0) |
      (this.showZeroBalanceItems ? BalanceOptions.ShowZeroBalanceItems : 0) |
      (this.openingVoucherAsInitBalance ? BalanceOptions.OpeningVoucherAsInitBalance : 0);

    return options;
  }

  onCellClick(e: any) {

  }

  rowDoubleClickHandler() {

  }
}




