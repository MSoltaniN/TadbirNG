<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BabakSoft.Platform.Interfaces</name>
    </assembly>
    <members>
        <member name="T:BabakSoft.Platform.Cryptography.HashAlgorithmName">
            <summary>
            Defines the hashing algorithms that can be used in hash provider classes in base library.
            </summary>
        </member>
        <member name="F:BabakSoft.Platform.Cryptography.HashAlgorithmName.None">
            <summary>
            Hash algorithm is not specified. This value is internally used for initialization and
            cannot be used.
            </summary>
        </member>
        <member name="F:BabakSoft.Platform.Cryptography.HashAlgorithmName.MD5">
            <summary>
            MD5 hash algorith with 128-bit hash size
            </summary>
        </member>
        <member name="F:BabakSoft.Platform.Cryptography.HashAlgorithmName.MD160">
            <summary>
            MD160 hash algorithm with 160-bit hash size
            </summary>
        </member>
        <member name="F:BabakSoft.Platform.Cryptography.HashAlgorithmName.SHA1">
            <summary>
            SHA1 hash algorithm with 160-bit hash size. SHA stands for Secure Hash Algorithm.
            </summary>
        </member>
        <member name="F:BabakSoft.Platform.Cryptography.HashAlgorithmName.SHA256">
            <summary>
            SHA256 hash algorithm with 256-bit hash size
            </summary>
        </member>
        <member name="F:BabakSoft.Platform.Cryptography.HashAlgorithmName.SHA384">
            <summary>
            SHA384 hash algorithm with 384-bit hash size
            </summary>
        </member>
        <member name="F:BabakSoft.Platform.Cryptography.HashAlgorithmName.SHA512">
            <summary>
            SHA512 hash algorithm with 512-bit hash size
            </summary>
        </member>
        <member name="T:BabakSoft.Platform.Cryptography.SymmetricCryptoAlgorithm">
            <summary>
            Defines the symmetric algorithms that can be used in crypto provider classes in base library.
            </summary>
        </member>
        <member name="F:BabakSoft.Platform.Cryptography.SymmetricCryptoAlgorithm.None">
            <summary>
            Symmetric crypto algorithm is not specified. This value is internally used for initialization
            and cannot be used.
            </summary>
        </member>
        <member name="F:BabakSoft.Platform.Cryptography.SymmetricCryptoAlgorithm.RC2">
            <summary>
            RC2 symmetric algorithm.
            </summary>
        </member>
        <member name="F:BabakSoft.Platform.Cryptography.SymmetricCryptoAlgorithm.Rijndael">
            <summary>
            Rijndael symmetric algorithm.
            </summary>
        </member>
        <member name="F:BabakSoft.Platform.Cryptography.SymmetricCryptoAlgorithm.DES">
            <summary>
            Data Encryption Standard (DES) symmetric algorithm with 64-bit key length.
            </summary>
        </member>
        <member name="F:BabakSoft.Platform.Cryptography.SymmetricCryptoAlgorithm.TripleDES">
            <summary>
            Triple Data Encryption Standard symmetric algorithm.
            </summary>
        </member>
        <member name="F:BabakSoft.Platform.Cryptography.SymmetricCryptoAlgorithm.Aes">
            <summary>
            Advanced Encryption Standard (AES) symmetric algorithm.
            </summary>
        </member>
        <member name="T:BabakSoft.Platform.Cryptography.AsymmetricCryptoAlgorithm">
            <summary>
            Defines the asymmetric algorithms that can be used in crypto provider classes in base library.
            </summary>
        </member>
        <member name="F:BabakSoft.Platform.Cryptography.AsymmetricCryptoAlgorithm.None">
            <summary>
            Asymmetric crypto algorithm is not specified.
            </summary>
        </member>
        <member name="F:BabakSoft.Platform.Cryptography.AsymmetricCryptoAlgorithm.RSA">
            <summary>
            RSA asymmetric algorithm
            </summary>
        </member>
        <member name="F:BabakSoft.Platform.Cryptography.AsymmetricCryptoAlgorithm.DSA">
            <summary>
            DSA asymmetric algorithm
            </summary>
        </member>
        <member name="T:BabakSoft.Platform.Cryptography.KeyStrength">
            <summary>
            Defines security level of cryptographic keys used by symmetric algorithms.
            </summary>
        </member>
        <member name="F:BabakSoft.Platform.Cryptography.KeyStrength.None">
            <summary>
            Key strength is not specified.
            </summary>
        </member>
        <member name="F:BabakSoft.Platform.Cryptography.KeyStrength.Weak">
            <summary>
            A Low-complexity key
            </summary>
        </member>
        <member name="F:BabakSoft.Platform.Cryptography.KeyStrength.Medium">
            <summary>
            A Medium-complexity key
            </summary>
        </member>
        <member name="F:BabakSoft.Platform.Cryptography.KeyStrength.Strong">
            <summary>
            A High-complexity key
            </summary>
        </member>
        <member name="T:BabakSoft.Platform.Cryptography.ICryptoProvider">
            <summary>
            Defines a contract for data encryption / decryption services provided by .NET Cryptography API.
            </summary>
        </member>
        <member name="M:BabakSoft.Platform.Cryptography.ICryptoProvider.Encrypt(System.String,System.Text.Encoding)">
            <summary>
            Encrypts input string using current algorithm and returns encrypted data as an array of bytes.
            </summary>
            <param name="data">The string that should be encrypted.</param>
            <param name="encoding">Text encoding to use for deriving bytes in the input text.</param>
            <returns>A byte array that contains encryption of input string.</returns>
        </member>
        <member name="M:BabakSoft.Platform.Cryptography.ICryptoProvider.Encrypt(System.Byte[])">
            <summary>
            Encrypts input raw data using current algorithm and returns encrypted data as an array of bytes.
            </summary>
            <param name="dataBytes">The raw data that should be encrypted.</param>
            <returns>A byte array that contains encryption of input data.</returns>
        </member>
        <member name="M:BabakSoft.Platform.Cryptography.ICryptoProvider.EncryptFile(System.String)">
            <summary>
            Encrypts a file using current algorithm and returns encrypted data as an array of bytes.
            </summary>
            <param name="path">Path of file whose content must be encrypted.</param>
            <returns>A byte array that contains encryption of file contents.</returns>
        </member>
        <member name="M:BabakSoft.Platform.Cryptography.ICryptoProvider.Decrypt(System.Byte[],System.Text.Encoding)">
            <summary>
            Decrypts raw cipher data and uses specified encoding to returns the result as a string.
            </summary>
            <param name="cipherData">Raw cipher data that was encrypted using current algorithm and key file.</param>
            <param name="encoding">The encoding to use for converting decrypted raw data into string.</param>
            <returns>Decrypted data in text form with specified encoding.</returns>
        </member>
        <member name="M:BabakSoft.Platform.Cryptography.ICryptoProvider.Decrypt(System.Byte[])">
            <summary>
            Decrypts raw cipher data and returns the result as a byte array.
            </summary>
            <param name="cipherData">Raw cipher data that was encrypted using current algorithm and key file.
            </param>
            <returns>A byte array containing decrypted data. This byte array can be transformed to string
            using Transform utility class.</returns>
        </member>
        <member name="M:BabakSoft.Platform.Cryptography.ICryptoProvider.DecryptFile(System.String)">
            <summary>
            Decrypts contents of a file specified by path and returns decrypted data as an array of bytes.
            </summary>
            <param name="path">Path to the file whose contents must be decrypted.</param>
            <returns></returns>
        </member>
        <member name="M:BabakSoft.Platform.Cryptography.ICryptoProvider.ReplaceKey(System.Object)">
            <summary>
            Replaces current crypto key with the given key. Each implementation defines the expected key type.
            </summary>
            <param name="newKey">The new key</param>
        </member>
        <member name="T:BabakSoft.Platform.Cryptography.IHashProvider">
            <summary>
            Defines a contract for data hash and validation services provided by .NET Cryptography API.
            </summary>
        </member>
        <member name="M:BabakSoft.Platform.Cryptography.IHashProvider.Hash(System.String)">
            <summary>
            Hashes input string and returns data hash as an array of bytes.
            </summary>
            <param name="data">The string that should be hashed.</param>
            <returns>A byte array that contains the hash of input string.</returns>
            <remarks>This method uses UTF8 encoding as the default encoding for interpreting
            given text.</remarks>
        </member>
        <member name="M:BabakSoft.Platform.Cryptography.IHashProvider.Hash(System.Byte[])">
            <summary>
            Hashes input byte array and returns data hash as an array of bytes.
            </summary>
            <param name="dataBytes">A byte array containing the data that should be hashed.</param>
            <returns>A byte array that contains the hash of input data.</returns>
        </member>
        <member name="M:BabakSoft.Platform.Cryptography.IHashProvider.HashFile(System.String)">
            <summary>
            Hashes input file and returns data hash as an array of bytes.
            </summary>
            <param name="path">Absolute or relative path to the file to be hashed.</param>
            <returns>A byte array that contains the hash of input file.</returns>
        </member>
        <member name="M:BabakSoft.Platform.Cryptography.IHashProvider.Validate(System.String,System.Byte[])">
            <summary>
            Validates input string against previously hashed data in byte array format.
            </summary>
            <param name="data">The string that should be validated.</param>
            <param name="hash">An array of bytes containing previously hashed data</param>
            <returns>True if input data is valid, otherwise false.</returns>
        </member>
        <member name="M:BabakSoft.Platform.Cryptography.IHashProvider.Validate(System.Byte[],System.Byte[])">
            <summary>
            Validates input raw data against previously hashed data in byte array format.
            </summary>
            <param name="dataBytes">A byte array containing data that should be validated.</param>
            <param name="hash">An array of bytes containing previously hashed data</param>
            <returns>True if input data is valid, otherwise false.</returns>
        </member>
        <member name="M:BabakSoft.Platform.Cryptography.IHashProvider.ValidateFile(System.String,System.Byte[])">
            <summary>
            Validates input file against previously hashed data in byte array format.
            </summary>
            <param name="path">Absolute or relative path to the file to be validated.</param>
            <param name="hash">An array of bytes containing previously hashed file.</param>
            <returns>True if input file is valid, otherwise false.</returns>
        </member>
        <member name="T:BabakSoft.Platform.Data.IQualifiedNameBuilder">
            <summary>
            Provides a convenient interface for reading provider details of a database object specified
            by fully-qualified name (parsing), and formatting a fully-qualified name from the preconfigured
            provider details (formatting).
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.IQualifiedNameBuilder.QualifiedName">
            <summary>
            Gets or sets the fully-qualified name of a database object.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.IQualifiedNameBuilder.DataSource">
            <summary>
            Gets or sets the name of the database server corresponding to the database object.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.IQualifiedNameBuilder.Catalog">
            <summary>
            Gets or sets the name of the database in which a database object is defined.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.IQualifiedNameBuilder.Schema">
            <summary>
            Gets or sets the name of the database schema that defines the scope of the database object.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.IQualifiedNameBuilder.Name">
            <summary>
            Gets or sets the name of the database object.
            </summary>
        </member>
        <member name="T:BabakSoft.Platform.Data.Schema.IColumnSchema">
            <summary>
            Provides a provider-agnostic definition of schema information for a column in a database table.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IColumnSchema.Name">
            <summary>
            Gets the column name.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IColumnSchema.Ordinal">
            <summary>
            Gets a one-based integer number that specifies the index of the column in the source table.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IColumnSchema.DataType">
            <summary>
            Gets the CLR Type of data in this column.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IColumnSchema.ProviderType">
            <summary>
            Gets the provider-specific name of the data type for this column.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IColumnSchema.Default">
            <summary>
            Gets the default value defined for this column.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IColumnSchema.PrimaryKey">
            <summary>
            Gets a value indicating if the column acts as the primary key in the source table.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IColumnSchema.Nullable">
            <summary>
            Gets a value indicating if the column accepts null value.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IColumnSchema.Identity">
            <summary>
            Gets a value indicating if the column acts as the identity column in the source table.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IColumnSchema.MaxLength">
            <summary>
            Gets the maximum length of data defined for this column. This property may be null.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IColumnSchema.OctetLength">
            <summary>
            Gets the normalized (octet) length of data defined for this column. This property may be null.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IColumnSchema.Precision">
            <summary>
            Gets the numeric precision defined for this column. This property may be null.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IColumnSchema.Scale">
            <summary>
            Gets the numeric scale defined for this column. This property may be null.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IColumnSchema.CharacterSet">
            <summary>
            Gets the name of the character set defined for this column. If column does not have text data type,
            this property returns null.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IColumnSchema.TableName">
            <summary>
            Gets the fully-qualified name of the table to which this column belongs.
            </summary>
        </member>
        <member name="M:BabakSoft.Platform.Data.Schema.IColumnSchema.ReadSchema">
            <summary>
            Reads schema information for the column object used to initialize this instance.
            </summary>
        </member>
        <member name="T:BabakSoft.Platform.Data.Schema.IConstraintSchema">
            <summary>
            Provides a provider-agnostic definition of schema information for a constraint in a database table.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IConstraintSchema.Name">
            <summary>
            Gets the name of the constraint, as specified in database catalogs.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IConstraintSchema.Columns">
            <summary>
            Gets a collection of columns used by the constraint.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IConstraintSchema.Table">
            <summary>
            Gets the fully-qualified name of the table in which this constraint is defined.
            </summary>
        </member>
        <member name="M:BabakSoft.Platform.Data.Schema.IConstraintSchema.ReadSchema">
            <summary>
            Reads schema information for the constraint object used to initialize this instance.
            </summary>
        </member>
        <member name="T:BabakSoft.Platform.Data.Schema.IForeignKeySchema">
            <summary>
            Provides a provider-agnostic definition of schema information for a foreign key in a database table.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IForeignKeySchema.RelatedColumns">
            <summary>
            Gets a collection of columns that specify the related columns in primary tables referenced
            by this foreign key constraint.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IForeignKeySchema.RelatedTable">
            <summary>
            Gets the fully-qualified name of the primary table referenced by this foreign key constraint.
            </summary>
        </member>
        <member name="T:BabakSoft.Platform.Data.Schema.IParameterSchema">
            <summary>
            Provides a provider-agnostic definition of schema information for a parameter used in a stored procedure.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IParameterSchema.Name">
            <summary>
            Gets the name of the parameter, as it appears in the SQL content of the stored procedure. This name
            contains the provider-specific prefix expected by a database provider (e.g. @ for SQL Server).
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IParameterSchema.DataType">
            <summary>
            Gets the CLR Type of the parameter.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IParameterSchema.Ordinal">
            <summary>
            Gets the one-based index of the parameter, as it appears in the SQL content of containing
            stored procedure.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IParameterSchema.MaxLength">
            <summary>
            Gets the maximum length of data defined for this parameter. This property may be null.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IParameterSchema.OctetLength">
            <summary>
            Gets the normalized (octet) length of data defined for this parameter. This property may be null.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IParameterSchema.Precision">
            <summary>
            Gets the numeric precision defined for this parameter. This property may be null.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IParameterSchema.Scale">
            <summary>
            Gets the numeric scale defined for this parameter. This property may be null.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IParameterSchema.Procedure">
            <summary>
            Gets the fully-qualified name of the stored procedure in which this parameter is defined.
            </summary>
        </member>
        <member name="M:BabakSoft.Platform.Data.Schema.IParameterSchema.ReadSchema">
            <summary>
            Reads schema information for the parameter object from database catalogs.
            </summary>
        </member>
        <member name="T:BabakSoft.Platform.Data.Schema.IProcedureSchema">
            <summary>
            Provides a provider-agnostic definition of schema information for a stored procedure object.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IProcedureSchema.QualifiedName">
            <summary>
            Gets the fully-qualified name of the stored procedure.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IProcedureSchema.Parameters">
            <summary>
            Gets a collection of parameters expected by the stored procedure.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IProcedureSchema.Columns">
            <summary>
            Gets a collection of column names returned in the result set of the stored procedure.
            </summary>
        </member>
        <member name="M:BabakSoft.Platform.Data.Schema.IProcedureSchema.ReadSchema">
            <summary>
            Reads schema information for the stored procedure object from database catalogs.
            </summary>
        </member>
        <member name="T:BabakSoft.Platform.Data.Schema.ISyntaxSchema">
            <summary>
            Provides a provider-agnostic way of handling special identifiers and keywords that cause provider
            errors when used in database object names.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.ISyntaxSchema.ReservedWords">
            <summary>
            Gets a collection of special identifiers and keywords that have special meaning for data provider.
            </summary>
        </member>
        <member name="M:BabakSoft.Platform.Data.Schema.ISyntaxSchema.Normalize(System.String)">
            <summary>
            Delimits the specified word in a way that the data provider can treat it as a valid identifier.
            If the specified word is not a reserved word, no modification would be necessary.
            </summary>
            <param name="word">A name that must be normalized.</param>
            <returns>Normalized form of the specified name.</returns>
        </member>
        <member name="T:BabakSoft.Platform.Data.Schema.ITableSchema">
            <summary>
            Provides a provider-agnostic definition of schema information for a database table.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.ITableSchema.PrimaryKey">
            <summary>
            Gets the schema object for the primary key in the table.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.ITableSchema.ForeignKeys">
            <summary>
            Gets a collection of schema objects for the foreign keys in the table.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.ITableSchema.UniqueKeys">
            <summary>
            Gets a collection of schema objects for the unique keys in the table.
            </summary>
        </member>
        <member name="T:BabakSoft.Platform.Data.Schema.IViewSchema">
            <summary>
            Provides a provider-agnostic definition of schema information for a database view.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IViewSchema.QualifiedName">
            <summary>
            Gets the fully-qualified name of the database view.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Data.Schema.IViewSchema.Columns">
            <summary>
            Gets a collection of schema objects for the columns in the view.
            </summary>
        </member>
        <member name="M:BabakSoft.Platform.Data.Schema.IViewSchema.ReadSchema">
            <summary>
            Reads schema information for the view object used to initialize this instance.
            </summary>
        </member>
        <member name="T:BabakSoft.Platform.Domain.IEntity">
            <summary>
            Defines members required for identifying and tracking a business entity that is persisted to a database.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Domain.IEntity.Id">
            <summary>
            Gets or sets the unique identifier for a business entity, suitable for being mapped to an auto-generated
            integer field.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Domain.IEntity.RowGuid">
            <summary>
            Gets or sets the unique identifier for a business entity, suitable for being mapped to an auto-generated
            globally unique identifier (GUID) field.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Domain.IEntity.ModifiedDate">
            <summary>
            Gets or sets the last modification date for a business entity.
            </summary>
        </member>
        <member name="T:BabakSoft.Platform.Persistence.BasicXmlSerializer">
            <summary>
            Provides a simple implementation for XML serialize/deserialize operations.
            </summary>
            <remarks>
            Current serialization logic in this class can be summarized as below :
            1. No specific attribute is required by the input object.
            2. All public properties in a given object will be serialized, regardless of any exclusion criteria
            that may be specified on a property.
            3. A property having built-in types (i.e. all common types in System namespace, as well as all enum types)
            will be serialized as an XML attribute having property name in camel-case form.
            4. A generic collection property will be serialized as a container XML element having original
            property name. Each element inside the collection will be serialized as a custom object (i.e. not built-in)
            To be able to later deserialize a collection element, an additional property containing the element's full
            type name (called clrType) will also be added to the resulting XML element.
            5. A property having a custom non-enumeration type will be serialized as an XML child element recursively.
            </remarks>
        </member>
        <member name="M:BabakSoft.Platform.Persistence.BasicXmlSerializer.Serialize(System.Object)">
            <summary>
            Converts given object into a well-formed XML representation and returns the serialized form
            as an XElement object.
            </summary>
            <param name="item">Object that needs to be serialized</param>
            <returns>Serialized form of the input object as an XElement instance</returns>
        </member>
        <member name="M:BabakSoft.Platform.Persistence.BasicXmlSerializer.Serialize(System.String,System.Object)">
            <summary>
            Converts given object into a well-formed XML representation and saves the serialized form
            in a standard XML file (with UTF-8 encoding) in the specified path.
            </summary>
            <param name="path">Absolute or related path to the file where the serialized object must be saved</param>
            <param name="item">Object that needs to be serialized</param>
        </member>
        <member name="T:BabakSoft.Platform.Persistence.IORMapper">
            <summary>
            Defines necessary members for working with an object-relational (O/R) mapper.
            </summary>
        </member>
        <member name="M:BabakSoft.Platform.Persistence.IORMapper.Initialize">
            <summary>
            Performs one-time initialization required before the O/R mapper can be used, if any.
            </summary>
        </member>
        <member name="T:BabakSoft.Platform.Security.ICryptoService">
            <summary>
            Defines a minimal contract for common cryptographic operations.
            </summary>
        </member>
        <member name="M:BabakSoft.Platform.Security.ICryptoService.Hash(System.String)">
            <summary>
            Hashes input string and returns data hash as an array of bytes.
            </summary>
            <param name="data">The string that should be hashed</param>
            <returns>A byte array that contains the hash of input string</returns>
            <remarks>The implementation provides the default encoding used for interpreting data.</remarks>
        </member>
        <member name="M:BabakSoft.Platform.Security.ICryptoService.Validate(System.String,System.Byte[])">
            <summary>
            Validates input string against previously hashed data in byte array format.
            </summary>
            <param name="data">The string that should be validated</param>
            <param name="dataHash">An array of bytes containing previously hashed data</param>
            <returns>True if input data is valid, otherwise returns false</returns>
            <remarks>The implementation provides the default encoding used for interpreting data.</remarks>
        </member>
        <member name="M:BabakSoft.Platform.Security.ICryptoService.Encrypt(System.String)">
            <summary>
            Encrypts input string using current algorithm and returns encrypted data as an array of bytes.
            </summary>
            <param name="data">The string that should be encrypted</param>
            <returns>A byte array that contains encryption of input string</returns>
            <remarks>The implementation provides the default encoding used for interpreting data.</remarks>
        </member>
        <member name="M:BabakSoft.Platform.Security.ICryptoService.Decrypt(System.Byte[])">
            <summary>
            Decrypts raw cipher data and returns the result as a string.
            </summary>
            <param name="cipher">Raw cipher data that was encrypted using current algorithm and parameters</param>
            <returns>Decrypted data in text form</returns>
            <remarks>The implementation provides the default encoding used for interpreting data.</remarks>
        </member>
        <member name="T:BabakSoft.Platform.Security.ITokenManager">
            <summary>
            Defines useful operations for working with an expirable cryptographic token.
            </summary>
        </member>
        <member name="P:BabakSoft.Platform.Security.ITokenManager.TokenLifespan">
            <summary>
            Gets or sets the duration after which a generated token should be considered expired.
            </summary>
        </member>
        <member name="M:BabakSoft.Platform.Security.ITokenManager.Generate(System.String)">
            <summary>
            Generates a cryptographic token from the specified clear-text data.
            </summary>
            <param name="data">Clear-text data that is used for generating the new token</param>
            <returns>Generated token</returns>
        </member>
        <member name="M:BabakSoft.Platform.Security.ITokenManager.Validate(System.Byte[])">
            <summary>
            Validates a previously generated token using expiration timestamp encasulated in the token.
            If current server time (in UTC timezone) is after expiration timestamp, the token is considered
            to be expired and validation will fail.
            </summary>
            <param name="token">Token to validate</param>
            <returns>True if the token is not expired; otherwise returns false.</returns>
        </member>
        <member name="M:BabakSoft.Platform.Security.ITokenManager.ExtractData(System.Byte[])">
            <summary>
            Extracts and returns the clear-text data used for generating the token.
            </summary>
            <param name="token">Token to extract data from</param>
            <returns>Clear-text data used for generating the token</returns>
        </member>
        <member name="T:BabakSoft.Platform.Service.IApiClient">
            <summary>
            Defines common operations for working with a Web API service.
            </summary>
        </member>
        <member name="M:BabakSoft.Platform.Service.IApiClient.Get``1(System.String,System.Object[])">
            <summary>
            Retrieves data by sending an HTTP GET request to a Web API service.
            </summary>
            <typeparam name="T">Type of data to retrieve</typeparam>
            <param name="apiUrl">A URL value understandable by the underlying API controller</param>
            <param name="apiUrlArgs">Variable array of arguments required by the API URL</param>
            <returns>Requested data deserialized from the API Service response</returns>
        </member>
        <member name="M:BabakSoft.Platform.Service.IApiClient.Insert``1(``0,System.String,System.Object[])">
            <summary>
            Inserts data by sending an HTTP POST request to a Web API service.
            </summary>
            <typeparam name="T">Type of data to insert</typeparam>
            <param name="data">Data to insert</param>
            <param name="apiUrl">A URL value understandable by the underlying API controller</param>
            <param name="apiUrlArgs">Variable array of arguments required by the API URL</param>
        </member>
        <member name="M:BabakSoft.Platform.Service.IApiClient.Update``1(``0,System.String,System.Object[])">
            <summary>
            Updates data by sending an HTTP PUT request to a Web API service.
            </summary>
            <typeparam name="T">Type of data to update</typeparam>
            <param name="data">Data to update</param>
            <param name="apiUrl">A URL value understandable by the underlying API controller</param>
            <param name="apiUrlArgs">Variable array of arguments required by the API URL</param>
        </member>
        <member name="M:BabakSoft.Platform.Service.IApiClient.Update``2(``0,System.String,System.Object[])">
            <summary>
            Updates data by sending an HTTP PUT request to a Web API service. This overload should call
            a service PUT action that returns an operation result.
            </summary>
            <typeparam name="T">Type of data to update</typeparam>
            <typeparam name="TResult">Type of operation result returned by service action</typeparam>
            <param name="data">Data to update</param>
            <param name="apiUrl">A URL value understandable by the underlying API controller</param>
            <param name="apiUrlArgs">Variable array of arguments required by the API URL</param>
        </member>
        <member name="M:BabakSoft.Platform.Service.IApiClient.Delete(System.String,System.Object[])">
            <summary>
            Deletes data by sending an HTTP DELETE request to a Web API service.
            </summary>
            <param name="apiUrl">A URL value understandable by the underlying API controller</param>
            <param name="apiUrlArgs">Variable array of arguments required by the API URL</param>
        </member>
    </members>
</doc>
